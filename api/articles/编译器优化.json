{"title":"编译器优化","uid":"654198c9751861f6164cbde797aab0ed","slug":"编译器优化","date":"2022-11-08T09:13:00.000Z","updated":"2023-09-25T16:40:39.684Z","comments":true,"path":"api/articles/编译器优化.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/CPPcover.webp","content":"<p>这是观看一位大佬<a href=\"https://space.bilibili.com/263032155\">双笙子佯谬</a>的视频后写的笔记。</p>\n<h3 id=\"汇编基础\"><a href=\"#汇编基础\" class=\"headerlink\" title=\"汇编基础\"></a>汇编基础</h3><h4 id=\"x64架构CPU寄存器模型\"><a href=\"#x64架构CPU寄存器模型\" class=\"headerlink\" title=\"x64架构CPU寄存器模型\"></a>x64架构CPU寄存器模型</h4><img src=\"/img/CPP/register.png\">\n\n<h4 id=\"汇编语言\"><a href=\"#汇编语言\" class=\"headerlink\" title=\"汇编语言\"></a>汇编语言</h4><img src=\"/img/CPP/lang.png\">\n\n<p><strong>gcc编译器里函数的前6个参数：分别通过*di，*si，*dx，*cx，r8*，r9*传入,如果有六个以上的参数，则使用程序的堆栈将其他参数传递给该函数。</strong>  <br><strong>gcc编译器里的返回值：通过 eax 传出</strong></p>\n<p>如何用编译器产生汇编语言？添加下面几个编译参数。第一个参数用于简化汇编代码，第二个参数用于在汇编代码旁边附带源码注释。第三个是告诉编译器生成目标是汇编语言。至于第四个是优化等级，有O0,O1,O2,O3等等，优化程度由低到高，可自行选择。</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">-fomit-frame-pointer -fverbose-asm -S -O2</span></span></code></pre></div><h3 id=\"化简\"><a href=\"#化简\" class=\"headerlink\" title=\"化简\"></a>化简</h3><h4 id=\"代数化简\"><a href=\"#代数化简\" class=\"headerlink\" title=\"代数化简\"></a>代数化简</h4><div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> c = a + b;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> d = a - b;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> (c + d) / </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//其实就是return a;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>编译优化后</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">_Z4funcii:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.LFB0:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .seh_endprologue</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:2: {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movl\t%ecx, %eax\t # tmp86, a</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:6: }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    ret\t</span></span></code></pre></div><h4 id=\"常量折叠\"><a href=\"#常量折叠\" class=\"headerlink\" title=\"常量折叠\"></a>常量折叠</h4><p><strong>示例1：</strong></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">() </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> a = </span><span style=\"color: #B5CEA8\">32</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> b = </span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> a + b;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>编译优化后</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">_Z4funcv:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.LFB0:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .seh_endprologue</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:5: }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movl\t$42, %eax\t #,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    ret\t</span></span></code></pre></div><p><strong>示例2</strong></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">n</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> ret = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= </span><span style=\"color: #B5CEA8\">100</span><span style=\"color: #D4D4D4\">; i++) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        ret += i;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> ret;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>编译优化后</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">_Z4funci:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.LFB0:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .seh_endprologue</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:6: }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movl\t$5050, %eax\t #,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    ret\t</span></span></code></pre></div><p><strong>但是像这种就会优化失败：</strong></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;vector&gt;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::vector&lt;</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">&gt; arr;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= </span><span style=\"color: #B5CEA8\">100</span><span style=\"color: #D4D4D4\">; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">arr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">(i);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">reduce</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">arr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">begin</span><span style=\"color: #D4D4D4\">(), </span><span style=\"color: #9CDCFE\">arr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">end</span><span style=\"color: #D4D4D4\">());</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>结论：尽量避免代码复杂化，避免使用会造成内存分配在堆上的容器。<br>简单的代码，比什么优化手段都强。</p></blockquote>\n<p>存储在堆上（妨碍优化）：<br>vector, map, set, string, function, any<br>unique_ptr, shared_ptr, weak_ptr。</p>\n<p>存储在栈上（利于优化）：<br>array, bitset, glm::vec, string_view<br>pair, tuple, optional, variant</p>\n<p>那把vector改为array试试？</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;array&gt;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::array&lt;</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">,</span><span style=\"color: #B5CEA8\">100</span><span style=\"color: #D4D4D4\">&gt; arr;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= </span><span style=\"color: #B5CEA8\">100</span><span style=\"color: #D4D4D4\">; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">arr</span><span style=\"color: #D4D4D4\">[i-</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]=i;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">reduce</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">arr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">begin</span><span style=\"color: #D4D4D4\">(), </span><span style=\"color: #9CDCFE\">arr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">end</span><span style=\"color: #D4D4D4\">());</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>优化失败的。</p>\n<p>那再改用手写的reduce？</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;array&gt;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::array&lt;</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">100</span><span style=\"color: #D4D4D4\">&gt; arr;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= </span><span style=\"color: #B5CEA8\">100</span><span style=\"color: #D4D4D4\">; i++) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">arr</span><span style=\"color: #D4D4D4\">[i - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] = i;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> ret = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= </span><span style=\"color: #B5CEA8\">100</span><span style=\"color: #D4D4D4\">; i++) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        ret += </span><span style=\"color: #9CDCFE\">arr</span><span style=\"color: #D4D4D4\">[i - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> ret;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>优化还是失败。<br>把数字改小一点试试？</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;array&gt;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::array&lt;</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\">&gt; arr;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= </span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\">; i++) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">arr</span><span style=\"color: #D4D4D4\">[i - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] = i;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> ret = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= </span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\">; i++) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        ret += </span><span style=\"color: #9CDCFE\">arr</span><span style=\"color: #D4D4D4\">[i - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> ret;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>实测优化成功。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>结论：代码过于复杂，涉及的语句数量过多时，编译器会放弃优化！<br>简单的代码，比什么优化手段都强。</p></blockquote>\n<p><strong>constexpr：强迫编译器在编译期求值</strong></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;vector&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;numeric&gt;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">constexpr</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func1</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::vector&lt;</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">&gt; arr;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= </span><span style=\"color: #B5CEA8\">100</span><span style=\"color: #D4D4D4\">; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">arr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">(i);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">reduce</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">arr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">begin</span><span style=\"color: #D4D4D4\">(), </span><span style=\"color: #9CDCFE\">arr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">end</span><span style=\"color: #D4D4D4\">());</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func2</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">constexpr</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> con = </span><span style=\"color: #DCDCAA\">func1</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> con;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>C++20实测可优化成功。C++20以下不支持对vector的优化，但是可以优化前面几个没优化成功的。</p>\n<p>过度依赖编译器c常量优化可能会导致编译速度变慢。</p>\n<h3 id=\"内联\"><a href=\"#内联\" class=\"headerlink\" title=\"内联\"></a>内联</h3><h4 id=\"编译器优化：call-变-jmp\"><a href=\"#编译器优化：call-变-jmp\" class=\"headerlink\" title=\"编译器优化：call 变 jmp\"></a>编译器优化：call 变 jmp</h4><p>调用外部函数：call 指令</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">other</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">other</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">233</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>优化前：</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">_Z4funcv:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.LFB0:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    subq\t$40, %rsp\t #,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .seh_stackalloc\t40</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .seh_endprologue</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:4:     return other(233);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movl\t$233, %ecx\t #,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    call\t_Z5otheri\t #</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:5: }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    addq\t$40, %rsp\t #,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    ret\t</span></span></code></pre></div><p>优化后</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">_Z4funcv:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.LFB0:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .seh_endprologue</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:4:     return other(233);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movl\t$233, %ecx\t #,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:5: }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:4:     return other(233);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    jmp\t_Z5otheri\t #</span></span></code></pre></div><p><em>如果 _Z5otheri 定义在同一个文件中，编译器会直接调用，减轻了链接器的负担。</em></p>\n<h4 id=\"内联化\"><a href=\"#内联化\" class=\"headerlink\" title=\"内联化\"></a>内联化</h4><p>内联：当编译器看得到被调用函数（other）实现的时候，会直接把函数实现贴到调用他的函数（func）里。<br>只有定义在同一个文件的函数可以被内联！否则编译器看不见函数体里的内容怎么内联呢？  </p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">other</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> a;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">other</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">233</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">_Z4funcv:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.LFB1:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .seh_endprologue</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:8: }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movl\t$233, %eax\t #,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    ret\t</span></span></code></pre></div><p>为了效率我们可以尽量把常用函数定义在头文件里，然后声明为 static。这样调用他们的时候编译器看得到他们的函数体，从而有机会内联。 因为 static 声明表示不会暴露 other 给其他文件，而且 func 也已经内联了 other，所以编译器干脆不定义 other 了。</p>\n<h3 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h3><p>看下面这个例子</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    *c = *a;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    *c = *b;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">_Z4funcPiS_S_:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.LFB0:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .seh_endprologue</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:3:     *c = *a;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movl\t(%rcx), %eax\t # *a_4(D), _1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:3:     *c = *a;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movl\t%eax, (%r8)\t # _1, *c_5(D)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:4:     *c = *b;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movl\t(%rdx), %eax\t # *b_7(D), _2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:4:     *c = *b;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movl\t%eax, (%r8)\t # _2, *c_5(D)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:5: }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    ret\t</span></span></code></pre></div><p>为什么编译器不优化掉 *c = *a？</p>\n<p><strong>指针别名现象（pointer aliasing）</strong><br>如果b和c指向同一个变量，优化就会产生错误，编译器宁肯不优化也不肯出现错误！</p>\n<p><strong>__restrict关键字优化</strong><br>如果用户能够向编译器保证这些指针之间不会重叠，就可以使用__restrict关键字，告诉编译器让它大胆优化。</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #4EC9B0\">__restrict</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #4EC9B0\">__restrict</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #4EC9B0\">__restrict</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    *c = *a;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    *c = *b;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">_Z4funcPiS_S_:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.LFB0:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .seh_endprologue</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:3:     *c = *b;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movl\t(%rdx), %eax\t # *b_5(D), *b_5(D)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movl\t%eax, (%r8)\t # *b_5(D), *c_4(D)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:4: }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    ret\t</span></span></code></pre></div><p>实际上，__restrict 只需要加在所有具有写入访问的指针（这里是 c）上，就可以优化成功。<br>而我们可以用 const 禁止写入访问。  </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>结论：所有非 const 的指针都可尝试声明 __restrict。 </p></blockquote>\n<p><strong>禁止优化：volatile</strong></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">volatile</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    *a = </span><span style=\"color: #B5CEA8\">42</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> *a;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">_Z4funcPVi:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.LFB0:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .seh_endprologue</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:3:     *a = 42;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movl\t$42, (%rcx)\t #, *a_2(D)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:4:     return *a;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movl\t(%rcx), %eax\t # *a_2(D), &lt;retval&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:5: }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    ret\t</span></span></code></pre></div><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>结论：加了 volatile 的对象，编译器会放弃优化对他的读写操作。<br>做性能实验的时候非常有用。</p></blockquote>\n<p><strong>合并写入</strong></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">123</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">456</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>将两个 int32 的写入合并为一个 int64 的写入。</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">_Z4funcPi:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.LFB0:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .seh_endprologue</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:3:     a[0] = 123;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movq\t.LC0(%rip), %rax\t #, tmp83</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movq\t%rax, (%rcx)\t # tmp83, MEM &lt;vector(2) int&gt; [(int *)a_2(D)]</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:5: }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    ret\t</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .seh_endproc</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .section .rdata,\"dr\"</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .align 8</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.LC0:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t123</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t456</span></span></code></pre></div><p>但如果访问的两个元素地址间有跳跃，就不能合并了。</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">123</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">456</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">_Z4funcPi:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.LFB0:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .seh_endprologue</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:3:     a[0] = 123;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movl\t$123, (%rcx)\t #, *a_2(D)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:4:     a[2] = 456;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movl\t$456, 8(%rcx)\t #, MEM[(int *)a_2(D) + 8B]</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:5: }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    ret\t</span></span></code></pre></div><h3 id=\"矢量化\"><a href=\"#矢量化\" class=\"headerlink\" title=\"矢量化\"></a>矢量化</h3><h4 id=\"SIMD\"><a href=\"#SIMD\" class=\"headerlink\" title=\"SIMD\"></a>SIMD</h4><p><strong>更宽的合并写入：矢量化指令（SIMD）</strong>  <br>两个 int32 可以合并为一个 int64<br>四个 int32 可以合并为一个 __m128<br>xmm0 由 SSE 引入，是个 128 位寄存器<br>他可以一次存储 4 个 int，或 4 个 float<br><em>movups：move unaligned packed single</em><br><em>movaps：move aligned packed single</em>  </p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">111</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">222</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">333</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">3</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">444</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">_Z4funcPi:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.LFB0:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .seh_endprologue</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:2:     a[0] = 111;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movdqu\t.LC0(%rip), %xmm0\t #, tmp83</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movups\t%xmm0, (%rcx)\t # tmp83, MEM &lt;vector(4) int&gt; [(int *)a_2(D)]</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:6: }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    ret\t</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .seh_endproc</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .section .rdata,\"dr\"</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .align 16</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.LC0:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t111</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t222</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t333</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t444</span></span></code></pre></div><p><strong>能再宽一点吗？</strong><br>两个 int32 可以合并为一个 int64<br>四个 int32 可以合并为一个 __m128<br><em>八个 int32 可以合并为一个 __m256！</em>  </p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">111</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">222</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">333</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">3</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">444</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">4</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">555</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">666</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">6</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">777</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">7</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">888</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>但是编译器默认没有用256位的 ymm0而是用了两次xmm0,因为他不敢保证运行这个程序的电脑支持 AVX 指令集…… </p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">_Z4funcPi:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.LFB0:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .seh_endprologue</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:3:     a[0] = 111;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movdqu\t.LC0(%rip), %xmm0\t #, tmp83</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movups\t%xmm0, (%rcx)\t # tmp83, MEM &lt;vector(4) int&gt; [(int *)a_2(D)]</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movdqu\t.LC1(%rip), %xmm0\t #, tmp84</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movups\t%xmm0, 16(%rcx)\t # tmp84, MEM &lt;vector(4) int&gt; [(int *)a_2(D) + 16B]</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:11: }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    ret\t</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .seh_endproc</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .section .rdata,\"dr\"</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .align 16</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.LC0:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t111</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t222</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t333</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t444</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .align 16</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.LC1:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t555</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t666</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t777</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t888</span></span></code></pre></div><p>编译选项<code>-march=native</code> 让编译器自动判断当前硬件支持的指令。但是这会导致程序兼容性降低。</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">_Z4funcPi:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.LFB0:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .seh_endprologue</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:3:     a[0] = 111;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    vmovdqu\t.LC0(%rip), %ymm0\t #, tmp83</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    vmovdqu\t%ymm0, (%rcx)\t # tmp83, MEM &lt;vector(8) int&gt; [(int *)a_2(D)]</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    vzeroupper</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:11: }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    ret\t</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .seh_endproc</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .section .rdata,\"dr\"</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .align 32</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.LC0:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t111</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t222</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t333</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t444</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t555</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t666</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t777</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t888</span></span></code></pre></div><p>成功使用了ymm0</p>\n<h4 id=\"清零拷贝：自动调用标准库\"><a href=\"#清零拷贝：自动调用标准库\" class=\"headerlink\" title=\"清零拷贝：自动调用标准库\"></a>清零拷贝：自动调用标准库</h4><div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">n</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; n; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">_Z4funcPii:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.LFB0:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .seh_endprologue</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:2:     for (int i = 0; i &lt; n; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    testl\t%edx, %edx\t # n</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    jle\t.L3\t #,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:3:         a[i] = 0;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movl\t%edx, %edx\t # n, n</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    leaq\t0(,%rdx,4), %r8\t #,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    xorl\t%edx, %edx\t #</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:5: }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:3:         a[i] = 0;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    jmp\tmemset\t #</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .p2align 4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .p2align 3</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.L3:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:5: }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    ret\t</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .seh_endproc</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .ident\t\"GCC: (Rev2, Built by MSYS2 project) 12.1.0\"</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .def\tmemset;\t.scl\t2;\t.type\t32;\t.endef</span></span></code></pre></div><p>memcpy 同理，不必为了高效，手动改写成对 memcpy/memset 的调用，影响可读性。编译器会自动分析你是在做拷贝或是清零，并优化成对标准库这俩的调用。</p>\n<h4 id=\"从0到1024填充：SIMD加速\"><a href=\"#从0到1024填充：SIMD加速\" class=\"headerlink\" title=\"从0到1024填充：SIMD加速\"></a>从0到1024填充：SIMD加速</h4><p>paddd：四个 int 的加法<br>movdqa：加载四个 int  <br><strong>如果次数是4的倍数（如下面的1024）</strong></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] = i;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">_Z4funcPi:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.LFB0:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .seh_endprologue</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:2: {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movdqu\t.LC0(%rip), %xmm0\t #, vect_vec_iv_.4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movdqu\t.LC1(%rip), %xmm2\t #, tmp89</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    leaq\t4096(%rcx), %rax\t #, _9</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .p2align 4,,10</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .p2align 3</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.L2:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movdqa\t%xmm0, %xmm1\t # vect_vec_iv_.4, vect_vec_iv_.4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    addq\t$16, %rcx\t #, ivtmp.10</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    paddd\t%xmm2, %xmm0\t # tmp89, vect_vec_iv_.4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:5:         a[i] = i;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    movups\t%xmm1, -16(%rcx)\t # vect_vec_iv_.4, MEM &lt;vector(4) int&gt; [(int *)_2]</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    cmpq\t%rcx, %rax\t # ivtmp.10, _9</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    jne\t.L2\t #,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:7: }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    ret\t</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .seh_endproc</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .section .rdata,\"dr\"</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .align 16</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.LC0:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t0</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t3</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .align 16</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.LC1:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t4</span></span></code></pre></div><p>一次写入 4 个 int，一次计算 4 个 int 的加法，从而更加高效<br>但这样有个缺点，那就是数组的大小必须为 4 的整数倍，否则就会写入越界的地址！</p>\n<p><strong>如果不一定是 4 的倍数？边界特判法</strong>  </p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">n</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; n; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] = i;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>假设 n = 1023：  <br>先对前 1020 个元素用 SIMD 指令填入，每次处理 4 个<br>剩下 3 个元素用传统的标量方式填入，每次处理 1 个<br>思想：对边界特殊处理，而对大部分数据能够矢量化<br>编译器做优化时会自动处理边界特判。<br>如果你是自己手写 SIMD 指令的话就要考虑一下这个。  </p>\n<p><strong>n总是4的倍数？避免边界特判</strong>  <br>这样写</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">n</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    n = n / </span><span style=\"color: #B5CEA8\">4</span><span style=\"color: #D4D4D4\"> * </span><span style=\"color: #B5CEA8\">4</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; n; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] = i;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>编译器会发现 n % 4 = 0，从而不会生成边界特判的分支。</p>\n<p><strong>假定指针是 16 字节对齐的：assume_aligned</strong><br>如果能保证指针 a 总是对齐到 16 字节，这样写(C++20),对性能有微弱的提升。</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">n</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    n = n / </span><span style=\"color: #B5CEA8\">4</span><span style=\"color: #D4D4D4\"> * </span><span style=\"color: #B5CEA8\">4</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    a = </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">assume_aligned</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #B5CEA8\">16</span><span style=\"color: #D4D4D4\">&gt;(a);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; n; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] = i;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h4 id=\"数组求和：reduction-的优化\"><a href=\"#数组求和：reduction-的优化\" class=\"headerlink\" title=\"数组求和：reduction 的优化\"></a>数组求和：reduction 的优化</h4><div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> ret = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        ret += </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> ret;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">_Z4funcPf:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.LFB0:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .seh_endprologue</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:3:     float ret = 0;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    pxor\t%xmm0, %xmm0\t # &lt;retval&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    leaq\t4096(%rcx), %rax\t #, _4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .p2align 4,,10</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .p2align 3</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.L2:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    addss\t(%rcx), %xmm0\t # BIT_FIELD_REF &lt;MEM &lt;vector(4) float&gt; [(float *)_3], 32, 0&gt;, stmp_ret_10.7</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    addq\t$16, %rcx\t #, ivtmp.13</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    addss\t-12(%rcx), %xmm0\t # BIT_FIELD_REF &lt;MEM &lt;vector(4) float&gt; [(float *)_3], 32, 32&gt;, stmp_ret_10.7</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:5:         ret += a[i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    addss\t-8(%rcx), %xmm0\t # BIT_FIELD_REF &lt;MEM &lt;vector(4) float&gt; [(float *)_3], 32, 64&gt;, stmp_ret_10.7</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    addss\t-4(%rcx), %xmm0\t # BIT_FIELD_REF &lt;MEM &lt;vector(4) float&gt; [(float *)_3], 32, 96&gt;, &lt;retval&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    cmpq\t%rcx, %rax\t # ivtmp.13, _4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    jne\t.L2\t #,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:7: }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    ret\t</span></span></code></pre></div><h3 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h3><h4 id=\"循环中的矢量化\"><a href=\"#循环中的矢量化\" class=\"headerlink\" title=\"循环中的矢量化\"></a>循环中的矢量化</h4><div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] = </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[i] + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>考虑 func(a, a + 1) 的情况，那样会产生数据依赖链，没法 SIMD 化。<br>为了优化而不失正确性，他索性生成两份代码：<br>一份是 SIMD 的，一份是传统标量的<br>他在运行时检测 a, b 指针的差是否超过 1024 来判断是否有重叠现象。<br>如果没有重叠，则跳转到 SIMD 版本高效运行。<br>如果重叠，则跳转到标量版本低效运行，但至少不会错。  </p>\n<p>可以通过使用__restrict,仅仅生成SIMD版本进行矢量化。</p>\n<h4 id=\"循环中的if语句\"><a href=\"#循环中的if语句\" class=\"headerlink\" title=\"循环中的if语句\"></a>循环中的if语句</h4><p>循环中的if语句会导致SIMD矢量化困难。</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #4EC9B0\">__restrict</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #4EC9B0\">__restrict</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">is_mul</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (is_mul)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] = </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] * </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">else</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] = </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] + </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>在这里，编译器的看到is_mul是常量，就会将条件判断提到前面，然后使用SIMD矢量化，下面这个代码和上面这个代码编译优化后是一样的。</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #4EC9B0\">__restrict</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #4EC9B0\">__restrict</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">is_mul</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (is_mul) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">; i++) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] = </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] * </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">; i++) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] = </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] + </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>同样的，如果循环中有在循环期间不变的表达式，在优化的时候也会把它提到循环体外。</p>\n<h4 id=\"循环体内调用函数\"><a href=\"#循环体内调用函数\" class=\"headerlink\" title=\"循环体内调用函数\"></a>循环体内调用函数</h4><p>下面这个代码无法优化。</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">other</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> ret = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        ret += </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">other</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> ret;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>因为编译器看不到那个文件的 other 函数里是什么，哪怕 other 在定义他的文件里是个空函数，他也不敢优化掉。   </p>\n<p><em>解决方案：把函数实现放在同一个文件里</em><br>编译器看得到 other 的函数体，就可以内联化该函数</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>结论：避免在 for 循环体里调用外部函数，或者把他们移到同一个文件里，或者放在头文件声明为 static 函数。</p></blockquote>\n<h4 id=\"下标随机访问\"><a href=\"#下标随机访问\" class=\"headerlink\" title=\"下标随机访问\"></a>下标随机访问</h4><p>矢量化失败</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[i]] += </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h4 id=\"下标跳跃访问\"><a href=\"#下标跳跃访问\" class=\"headerlink\" title=\"下标跳跃访问\"></a>下标跳跃访问</h4><p>矢量化部分成功，但是很艰难</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i * </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">] += </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h4 id=\"下标连续访问\"><a href=\"#下标连续访问\" class=\"headerlink\" title=\"下标连续访问\"></a>下标连续访问</h4><p>矢量化成功</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] += </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>结论：不管是编译器还是 CPU，都喜欢顺序的连续访问。</p></blockquote>\n<h4 id=\"循环展开\"><a href=\"#循环展开\" class=\"headerlink\" title=\"循环展开\"></a>循环展开</h4><div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#pragma</span><span style=\"color: #569CD6\"> </span><span style=\"color: #9CDCFE\">GCC</span><span style=\"color: #569CD6\"> </span><span style=\"color: #9CDCFE\">unroll</span><span style=\"color: #569CD6\"> 4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>每次执行循环体 a[i] = 1后，都要进行一次判断 i &lt; 1024。<br>导致一部分时间花在判断是否结束循环，而不是循环体里。如果循环体内容非常简单，那么相对的来说，判断的代价就会很高。所以要循环展开避免判断。</p>\n<p>对小的循环体进行 unroll 可能是划算的，但最好不要 unroll 大的循环体，否则会造成指令缓存的压力反而变慢！</p>\n<p>对于 GCC 编译器，可以用<br>#pragma GCC unroll 4<br>表示把循环体展开为4个  <br>就像这样（但是不建议手动这样写，可能会妨碍编译器矢量化）</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">; i += </span><span style=\"color: #B5CEA8\">4</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i + </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i + </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i + </span><span style=\"color: #B5CEA8\">3</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h3 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h3><p><strong>两个 float：对齐到 8 字节，成功矢量化。</strong></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">MyVec</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> x;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> y;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">MyVec </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\"> *= </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">y</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p><strong>三个 float：对齐到 12 字节，矢量化失败。生成了标量的低效汇编代码</strong></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">MyVec</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> x;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> y;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> z;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">MyVec </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\"> *= </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">y</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p><strong>添加一个辅助对齐的变量：对齐到 16 字节,追加了一个没有用的 4 字节变量，整个结构体变成 16 字节大小，矢量化成功</strong></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">MyVec</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> x;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> y;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> z;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">padding</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">4</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">MyVec </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\"> *= </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">y</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>结论：计算机喜欢 2 的整数幂，2, 4, 8, 16, 32, 64, 128…<br>结构体大小若不是 2 的整数幂，往往会导致 SIMD 优化失败。</p></blockquote>\n<p><strong>让编译器自动对齐 alignas（c++11）</strong><br>在 struct 后加上 alignas(要对齐到的字节数) 即可实现同样效果，就不需要手动写 padding 变量了。</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> alignas(</span><span style=\"color: #B5CEA8\">16</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #4EC9B0\">MyVec</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> x;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> y;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> z;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">MyVec </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\"> *= </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">y</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\"> </p>\n<p><p>SIMD 和缓存行对齐只是性能优化的一个点，又不是全部。还要考虑结构体变大会导致内存带宽的占用，对缓存的占用等一系列连锁反应，总之，要根据实际情况选择优化方案。</p>\n</p>\n</div>\n<p><strong>结构体的内存布局：AOS、SOA和AOSOA</strong></p>\n<h3 id=\"STL容器\"><a href=\"#STL容器\" class=\"headerlink\" title=\"STL容器\"></a>STL容器</h3><p><strong>std::vector也有指针别名问题。</strong><br>此时__restrict对于STL容器的指针或引用是无效的。<br>解决方案：#pragma omp simd 或 #pragma GCC ivdep</p>\n<p><strong>std::vector也能实现 SOA！</strong></p>\n<h3 id=\"数学运算\"><a href=\"#数学运算\" class=\"headerlink\" title=\"数学运算\"></a>数学运算</h3><h4 id=\"除法变为乘法\"><a href=\"#除法变为乘法\" class=\"headerlink\" title=\"除法变为乘法\"></a>除法变为乘法</h4><p>计算机做乘法的速度比除法快两倍甚至三倍。</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> a / </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>相当于变成了 a * 0.5f</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">_Z4funcf:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.LFB0:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .seh_endprologue</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:3:     return a / 2;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    mulss\t.LC0(%rip), %xmm0\t #, tmp84</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> # exam1.cpp:4: }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    ret\t</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .seh_endproc</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .section .rdata,\"dr\"</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .align 4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">.LC0:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    .long\t1056964608</span></span></code></pre></div><h4 id=\"编译器放弃的优化：分离公共除数\"><a href=\"#编译器放弃的优化：分离公共除数\" class=\"headerlink\" title=\"编译器放弃的优化：分离公共除数\"></a>编译器放弃的优化：分离公共除数</h4><p>因为担心b=0,编译器放弃优化。</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">; i++) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] /= b;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p><strong>解决方法1</strong></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> inv_b = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> / b;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">; i++) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] *= inv_b;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p><strong>解决方法2</strong><br>编译参数<code>-ffast-math</code>选项让 GCC 更大胆地尝试浮点运算的优化，有时能带来 2 倍左右的提升。作为代价，他对 NaN 和无穷大的处理，可能会和 IEEE 标准（腐朽的）规定的不一致。如果你能保证，程序中永远不会出现 NaN 和无穷大，那么可以放心打开 <code>-ffast-math</code>。</p>\n<h4 id=\"嵌套循环：直接累加，有指针别名问题\"><a href=\"#嵌套循环：直接累加，有指针别名问题\" class=\"headerlink\" title=\"嵌套循环：直接累加，有指针别名问题\"></a>嵌套循环：直接累加，有指针别名问题</h4><p>编译器担心 c 和 a 可能会指向同一个地址，而判断多个指针是否有重合又过于复杂。编译器选择直接放弃矢量化。</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; j &lt; </span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">; j++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[i] += </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] * </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[j];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p><strong>解决方法1</strong><br>先累加到初始为 0 的局部变量，再累加到 c</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">func</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">float</span><span style=\"color: #D4D4D4\"> tmp = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; j &lt; </span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">; j++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            tmp += </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] * </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[j];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[i] += tmp;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>函数尽量写在同一个文件内</li>\n<li>避免在 for 循环内调用外部函数</li>\n<li>非 const 指针加上 __restrict 修饰</li>\n<li>试着用 SOA 取代 AOS</li>\n<li>对齐到 16 或 64 字节</li>\n<li>简单的代码，不要复杂化</li>\n<li>试试看 #pragma omp simd</li>\n<li>循环中不变的常量挪到外面来</li>\n<li>对小循环体用 #pragma unroll</li>\n<li>-ffast-math 和 -march=native</li>\n</ol>\n","feature":true,"text":"这是观看一位大佬双笙子佯谬的视频后写的笔记。 汇编基础x64架构CPU寄存器模型 汇编语言 gcc编译器里函数的前6个参数：分别通过*di，*si，*dx，*c...","permalink":"/post/编译器优化","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"C++","slug":"C","count":3,"path":"api/categories/C.json"}],"tags":[{"name":"C++进阶","slug":"C-进阶","count":3,"path":"api/tags/C-进阶.json"},{"name":"编译器优化","slug":"编译器优化","count":1,"path":"api/tags/编译器优化.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">汇编基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#x64%E6%9E%B6%E6%9E%84CPU%E5%AF%84%E5%AD%98%E5%99%A8%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">x64架构CPU寄存器模型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80\"><span class=\"toc-text\">汇编语言</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8C%96%E7%AE%80\"><span class=\"toc-text\">化简</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E6%95%B0%E5%8C%96%E7%AE%80\"><span class=\"toc-text\">代数化简</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E9%87%8F%E6%8A%98%E5%8F%A0\"><span class=\"toc-text\">常量折叠</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%85%E8%81%94\"><span class=\"toc-text\">内联</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91%E5%99%A8%E4%BC%98%E5%8C%96%EF%BC%9Acall-%E5%8F%98-jmp\"><span class=\"toc-text\">编译器优化：call 变 jmp</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%86%85%E8%81%94%E5%8C%96\"><span class=\"toc-text\">内联化</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%87%E9%92%88\"><span class=\"toc-text\">指针</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9F%A2%E9%87%8F%E5%8C%96\"><span class=\"toc-text\">矢量化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#SIMD\"><span class=\"toc-text\">SIMD</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B8%85%E9%9B%B6%E6%8B%B7%E8%B4%9D%EF%BC%9A%E8%87%AA%E5%8A%A8%E8%B0%83%E7%94%A8%E6%A0%87%E5%87%86%E5%BA%93\"><span class=\"toc-text\">清零拷贝：自动调用标准库</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%8E0%E5%88%B01024%E5%A1%AB%E5%85%85%EF%BC%9ASIMD%E5%8A%A0%E9%80%9F\"><span class=\"toc-text\">从0到1024填充：SIMD加速</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E6%B1%82%E5%92%8C%EF%BC%9Areduction-%E7%9A%84%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">数组求和：reduction 的优化</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">循环</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E4%B8%AD%E7%9A%84%E7%9F%A2%E9%87%8F%E5%8C%96\"><span class=\"toc-text\">循环中的矢量化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E4%B8%AD%E7%9A%84if%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">循环中的if语句</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E4%BD%93%E5%86%85%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">循环体内调用函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E6%A0%87%E9%9A%8F%E6%9C%BA%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">下标随机访问</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E6%A0%87%E8%B7%B3%E8%B7%83%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">下标跳跃访问</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E6%A0%87%E8%BF%9E%E7%BB%AD%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">下标连续访问</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E5%B1%95%E5%BC%80\"><span class=\"toc-text\">循环展开</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%84%E4%BD%93\"><span class=\"toc-text\">结构体</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#STL%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">STL容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">数学运算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%99%A4%E6%B3%95%E5%8F%98%E4%B8%BA%E4%B9%98%E6%B3%95\"><span class=\"toc-text\">除法变为乘法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91%E5%99%A8%E6%94%BE%E5%BC%83%E7%9A%84%E4%BC%98%E5%8C%96%EF%BC%9A%E5%88%86%E7%A6%BB%E5%85%AC%E5%85%B1%E9%99%A4%E6%95%B0\"><span class=\"toc-text\">编译器放弃的优化：分离公共除数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B5%8C%E5%A5%97%E5%BE%AA%E7%8E%AF%EF%BC%9A%E7%9B%B4%E6%8E%A5%E7%B4%AF%E5%8A%A0%EF%BC%8C%E6%9C%89%E6%8C%87%E9%92%88%E5%88%AB%E5%90%8D%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">嵌套循环：直接累加，有指针别名问题</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/74120250?spm_id_from=333.1007.0.0"},"rss":{"icon":"/svg/rss.svg","link":"atom.xml"},"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"C++多线程","uid":"29c0bb26f17c8d5598125731d7dbd2bf","slug":"C-多线程","date":"2022-11-08T17:02:00.000Z","updated":"2023-09-25T16:37:57.941Z","comments":true,"path":"api/articles/C-多线程.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/CPPcover.webp","text":"这是观看一位大佬双笙子佯谬的视频后写的笔记。 时间标准库chrono（C++11）std::chrono定义于头文件&lt;chrono&gt; 利用 C++ ...","permalink":"/post/C-多线程","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"C++","slug":"C","count":3,"path":"api/categories/C.json"}],"tags":[{"name":"C++进阶","slug":"C-进阶","count":3,"path":"api/tags/C-进阶.json"},{"name":"多线程","slug":"多线程","count":1,"path":"api/tags/多线程.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/74120250?spm_id_from=333.1007.0.0"},"rss":{"icon":"/svg/rss.svg","link":"atom.xml"},"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true},"next_post":{"title":"C++ RAII与智能指针","uid":"182933b43edb5a2e2aab1a699c004ce0","slug":"C-RAII与智能指针","date":"2022-11-06T04:22:00.000Z","updated":"2023-09-25T16:37:57.933Z","comments":true,"path":"api/articles/C-RAII与智能指针.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/CPPcover.webp","text":"这是观看一位大佬双笙子佯谬的视频后写的笔记。 RAII（Resource Acquisition Is Initialization）资源获取视为初始化，反之，...","permalink":"/post/C-RAII与智能指针","photos":[],"count_time":{"symbolsCount":"9.1k","symbolsTime":"8 mins."},"categories":[{"name":"C++","slug":"C","count":3,"path":"api/categories/C.json"}],"tags":[{"name":"C++进阶","slug":"C-进阶","count":3,"path":"api/tags/C-进阶.json"},{"name":"内存安全","slug":"内存安全","count":1,"path":"api/tags/内存安全.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/74120250?spm_id_from=333.1007.0.0"},"rss":{"icon":"/svg/rss.svg","link":"atom.xml"},"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true}}