{"title":"Linux网络编程（TCP进阶）","uid":"c49d0f0683cb7b900e98e175f46fbdbf","slug":"Linux网络编程（TCP进阶）","date":"2024-02-13T12:26:18.000Z","updated":"2024-08-19T04:37:21.351Z","comments":true,"path":"api/articles/Linux网络编程（TCP进阶）.json","keywords":"C++,Pyhton,Java,算法","cover":"img/linux.jpeg","content":"<h1 id=\"shutdown函数\"><a href=\"#shutdown函数\" class=\"headerlink\" title=\"shutdown函数\"></a>shutdown函数</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">shutdown</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">sockfd</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">how</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>shutdown()</code> 调用可以关闭 <code>sockfd</code> 关联的套接字上的全双工连接的全部或部分。如果 <code>how</code> 参数为 <code>SHUT_RD</code>，则将禁止未来的读操作。如果 <code>how</code> 为 <code>SHUT_WR</code>，则将禁止未来的写操作。如果 <code>how</code> 为 <code>SHUT_RDWR</code>，则将禁止进一步的读写操作。</p>\n<p>成功返回0；失败返回-1，设置 <code>errno</code>。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果 <code>how</code> 为 <code>SHUT_WR</code> ，则将发送一个FIN包给对端，对端收到FIN包后，会回复一个ACK包。此时TCP连接进入半关闭状态。此时对端还可以发送数据，本端可以进行读取，但是本端不能再发送数据。</p></blockquote>\n<h1 id=\"setsockopt函数\"><a href=\"#setsockopt函数\" class=\"headerlink\" title=\"setsockopt函数\"></a>setsockopt函数</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">getsockopt</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">sockfd</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">level</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">optname</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">              </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">optval</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">socklen_t</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">optlen</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">setsockopt</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">sockfd</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">level</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">optname</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">              </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">optval</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">socklen_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">optlen</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>getsockopt()</code> 和 <code>setsockopt()</code> 函数用于操作文件描述符 <code>sockfd</code> 所指向的套接字的选项。选项可以存在于多个协议层级，但它们始终存在于最高层的套接字层级。</p>\n<p>当操作套接字选项时，必须指定选项所在的层级和选项的名称。要在套接字 API 层级操作选项，请将 <code>level</code> 参数指定为 <code>SOL_SOCKET</code>。要在任何其他层级操作选项，请提供控制该选项的相应协议的协议号。例如，要指示 <code>TCP</code> 协议解释某个选项，则应将 <code>level</code> 设置为 <code>TCP</code> 的协议号；参见 getprotoent(3)。</p>\n<p>参数 <code>optval</code> 和 <code>optlen</code> 用于访问 <code>setsockopt()</code> 的选项值。对于 <code>getsockopt()</code>，它们标识一个缓冲区，用于返回所请求选项的值。对于 <code>getsockopt()</code>，<code>optlen</code> 是一个值结果参数，最初包含 <code>optval</code> 指向的缓冲区的大小，并在返回时进行修改以指示返回的实际值的大小。如果没有要提供或返回的选项值，则 <code>optval</code> 可以为 <code>NULL</code>。</p>\n<p><code>optname</code> 和任何指定的选项都会不加解释地传递给相应的协议模块进行解释。头文件 <code>&lt;sys/socket.h&gt;</code> 包含套接字级别选项的定义，如下所述。其他协议级别的选项在格式和名称上有所不同；请参阅手册第 4 节中的相应条目。</p>\n<p>大多数套接字级别的选项都使用 <code>int</code> 参数作为 <code>optval</code>。对于 <code>setsockopt()</code>，如果要启用布尔选项，则该参数应为非零值；如果要禁用该选项，则该参数应为零。</p>\n<p>对于标准选项，成功时返回零。出错时返回 -1，并将 <code>errno</code> 设置为相应的值。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>端口复用的实现是通过 <code>setsockopt()</code> 函数设置 <code>SO_REUSEADDR</code> 或者 <code>SO_REUSEPORT</code> 选项来实现的。</p>\n<p><code>SO_REUSEADDR</code> 允许将一个地址和端口绑定到一个新的 socket 上，即使该地址和端口已经有处于 TIME_WAIT 状态的 socket 绑定。</p>\n<p><code>SO_REUSEPORT</code> 允许多个 socket 绑定到完全相同的地址和端口。操作系统会负责在这些 socket 之间负载均衡传入的连接。</p>\n<p><code>SO_KEEPALIVE</code> 启用 TCP keepalive 机制。当启用后，如果一段时间内没有数据传输，TCP 会定期发送探测包，以检测连接是否仍然存活。（接收方不需要进行任何特殊的 socket 设置来处理 keepalive 探测包，当接收方收到 TCP keepalive 探测包时，它会自动回复一个 ACK 包）</p></blockquote>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p>必须要在 <code>bind()</code> 之前调用 <code>setsockopt(SO_REUSEADDR)</code>来设置端口复用。</p>\n<p>对于其他 Socket 选项，例如 <code>SO_KEEPALIVE</code>，在 <code>bind()</code> 之前或之后调用 setsockopt() 函数都无所谓。<br>最佳实践是在创建 socket 之后，并在任何与该选项相关的操作（例如 <code>listen()</code> 或 <code>connect()</code>）之前设置 Socket 选项。</p>\n\n</div>\n<h1 id=\"IO多路转接\"><a href=\"#IO多路转接\" class=\"headerlink\" title=\"IO多路转接\"></a>IO多路转接</h1><p>使用多线程/多进程处理并发, 其实本质就是使用不同的线程/进程检测文件描述符的缓冲区（阻塞直到发生变化）。这导致了不必要的线程/进程切换开销。</p>\n<p>IO多路转接就是<strong>调用一个系统函数委托内核帮助我们去检测程序中的一些列文件描述符的状态</strong>，文件描述符发生变化后，内核设置对应的标志位，并返回用户态，这样我们就可以知道哪些文件描述符发生了变化。从而进行对应处理。</p>\n<h2 id=\"select函数\"><a href=\"#select函数\" class=\"headerlink\" title=\"select函数\"></a>select函数</h2><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/select.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">select</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">nfds</span><span style=\"color: #D4D4D4\">, fd_set *</span><span style=\"color: #9CDCFE\">readfds</span><span style=\"color: #D4D4D4\">, fd_set *</span><span style=\"color: #9CDCFE\">writefds</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          fd_set *</span><span style=\"color: #9CDCFE\">exceptfds</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> timeval *</span><span style=\"color: #9CDCFE\">timeout</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">FD_CLR</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\">, fd_set *</span><span style=\"color: #9CDCFE\">set</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">FD_ISSET</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\">, fd_set *</span><span style=\"color: #9CDCFE\">set</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">FD_SET</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\">, fd_set *</span><span style=\"color: #9CDCFE\">set</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">FD_ZERO</span><span style=\"color: #D4D4D4\">(fd_set *</span><span style=\"color: #9CDCFE\">set</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> timeval {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">time_t</span><span style=\"color: #D4D4D4\">      tv_sec;</span><span style=\"color: #6A9955\">         /* seconds */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">suseconds_t</span><span style=\"color: #D4D4D4\"> tv_usec;</span><span style=\"color: #6A9955\">        /* microseconds */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span></code></pre></div><ul>\n<li><strong>readfds</strong><ul>\n<li>此集合中的文件描述符会被监视，以确定它们是否已准备好进行读取操作。</li>\n<li>如果读取操作不会阻塞，则文件描述符已准备好进行读取；特别地，文件描述符在文件结尾也处于可读状态。</li>\n<li>select() 返回后，readfds 将清除除已准备好进行读取操作的文件描述符之外的所有文件描述符。</li>\n</ul>\n</li>\n<li><strong>writefds</strong><ul>\n<li>此集合中的文件描述符会被监视，以确定它们是否已准备好进行写入操作。</li>\n<li>如果写入操作不会阻塞，则文件描述符已准备好进行写入。但是，即使文件描述符指示为可写，大型写入操作仍可能会阻塞。</li>\n<li>select() 返回后，writefds 将清除除已准备好进行写入操作的文件描述符之外的所有文件描述符。</li>\n<li>一般情况下, 文件描述符的写缓冲区都是可写的(有存储空间), 因此这集合很少用</li>\n</ul>\n</li>\n<li><strong>exceptfds</strong><ul>\n<li>此集合中的文件描述符会被监视“异常情况”。</li>\n<li>有关某些异常情况的示例，请参阅 poll(2) 中有关 POLLPRI 的讨论。</li>\n<li>select() 返回后，exceptfds 将清除除发生异常情况的文件描述符之外的所有文件描述符。</li>\n<li>一般情况下, 这个集合也很少用</li>\n</ul>\n</li>\n<li><strong>nfds</strong><ul>\n<li>此参数应设置为三个集合中任何一个集合中编号最高的文件描述符加 1。</li>\n<li>将检查每个集合中指示的文件描述符，直至达到此限制（但请参阅“错误”部分）。</li>\n</ul>\n</li>\n<li><strong>timeout</strong><ul>\n<li>超时参数是一个 timeval 结构，它指定 select() 应该阻塞等待文件描述符变为就绪状态的时间间隔。</li>\n<li>调用将一直阻塞，直到：<ul>\n<li>文件描述符变为就绪状态；</li>\n<li>调用被信号处理程序中断；或</li>\n<li>超时时间到期。</li>\n</ul>\n</li>\n<li>请注意，超时时间间隔将向上舍入到系统时钟粒度，并且内核调度延迟意味着阻塞时间间隔可能会稍微超过指定的时间。</li>\n<li>如果 timeval 结构的两个字段都为零，则 select() 立即返回。（这对于轮询很有用。）</li>\n<li>如果 timeout 指定为 NULL，则 select() 将无限期阻塞，等待文件描述符变为就绪状态。</li>\n</ul>\n</li>\n</ul>\n<p>成功时，<code>select()</code> 返回三个返回描述符集中包含的文件描述符的数量（即，在 <code>readfds</code>，<code>writefds</code>，<code>exceptfds</code> 中设置的位总数）。如果在任何文件描述符变为就绪状态之前超时已到期，则返回值可能为零。<br>出错时，返回 -1，并将 <code>errno</code> 设置为指示错误的值；文件描述符集保持不变，并且 <code>timeout</code> 变得未定义。</p>\n<p>一个简单的echo服务器示例：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;arpa/inet.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;cerrno&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;netinet/in.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdlib.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;string.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> PORT </span><span style=\"color: #B5CEA8\">8080</span><span style=\"color: #6A9955\">        // 服务器监听端口</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> MAX_CLIENTS </span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #6A9955\">   // 最大客户端连接数</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> BUFFER_SIZE </span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #6A9955\"> // 数据缓冲区大小</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #569CD6\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> server_socket, </span><span style=\"color: #9CDCFE\">client_socket</span><span style=\"color: #D4D4D4\">[MAX_CLIENTS];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr_in server_addr, client_addr;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">socklen_t</span><span style=\"color: #D4D4D4\"> addr_len = </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(client_addr);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">buffer</span><span style=\"color: #D4D4D4\">[BUFFER_SIZE];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 初始化客户端套接字数组</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; MAX_CLIENTS; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">client_socket</span><span style=\"color: #D4D4D4\">[i] = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 创建套接字</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  server_socket = </span><span style=\"color: #DCDCAA\">socket</span><span style=\"color: #D4D4D4\">(AF_INET, SOCK_STREAM, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (server_socket == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"创建套接字失败\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 设置服务器地址信息</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">memset</span><span style=\"color: #D4D4D4\">(&amp;</span><span style=\"color: #9CDCFE\">server_addr</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(server_addr));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  server_addr.sin_family = AF_INET;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  server_addr.sin_addr.s_addr = INADDR_ANY;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  server_addr.sin_port = </span><span style=\"color: #DCDCAA\">htons</span><span style=\"color: #D4D4D4\">(PORT);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 绑定套接字到地址</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">bind</span><span style=\"color: #D4D4D4\">(server_socket, (</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *)&amp;</span><span style=\"color: #9CDCFE\">server_addr</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">           </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(server_addr)) == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"绑定套接字失败\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(server_socket);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 监听连接请求</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">listen</span><span style=\"color: #D4D4D4\">(server_socket, MAX_CLIENTS) == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"监听连接请求失败\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(server_socket);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"服务器启动，监听端口: </span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, PORT);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  fd_set readfds;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> max_sd = server_socket;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> activity, valread;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">FD_ZERO</span><span style=\"color: #D4D4D4\">(&amp;readfds);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">FD_SET</span><span style=\"color: #D4D4D4\">(server_socket, &amp;readfds);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 将活动连接添加到select监听</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; MAX_CLIENTS; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> sd = </span><span style=\"color: #9CDCFE\">client_socket</span><span style=\"color: #D4D4D4\">[i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (sd &gt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">FD_SET</span><span style=\"color: #D4D4D4\">(sd, &amp;readfds);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #6A9955\">// 更新最大文件描述符</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (sd &gt; max_sd) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        max_sd = sd;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 使用select监听文件描述符</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    activity = </span><span style=\"color: #DCDCAA\">select</span><span style=\"color: #D4D4D4\">(max_sd + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, &amp;readfds, </span><span style=\"color: #569CD6\">NULL</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">NULL</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">NULL</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> ((activity &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) &amp;&amp; (errno != EINTR)) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"select error\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 处理新的连接请求</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">FD_ISSET</span><span style=\"color: #D4D4D4\">(server_socket, &amp;readfds)) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> new_socket =</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #DCDCAA\">accept</span><span style=\"color: #D4D4D4\">(server_socket, (</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *)&amp;client_addr, &amp;addr_len);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (new_socket == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"接受连接失败\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      } </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"新连接: socket fd </span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #CE9178\"> , ip </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #CE9178\"> , port </span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #CE9178\"> </span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, new_socket,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">               </span><span style=\"color: #DCDCAA\">inet_ntoa</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">client_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_addr</span><span style=\"color: #D4D4D4\">), </span><span style=\"color: #DCDCAA\">ntohs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">client_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_port</span><span style=\"color: #D4D4D4\">));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// 将新套接字添加到数组中</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; MAX_CLIENTS; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">client_socket</span><span style=\"color: #D4D4D4\">[i] == </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span><span style=\"color: #6A9955\">// 找到空闲位置</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">client_socket</span><span style=\"color: #D4D4D4\">[i] = new_socket;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 处理来自客户端的数据</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; MAX_CLIENTS; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> sd = </span><span style=\"color: #9CDCFE\">client_socket</span><span style=\"color: #D4D4D4\">[i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">FD_ISSET</span><span style=\"color: #D4D4D4\">(sd, &amp;readfds)) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        valread = </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">(sd, buffer, BUFFER_SIZE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (valread == </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #6A9955\">// 连接已关闭</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"主机断开连接: socket fd </span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #CE9178\"> </span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, sd);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(sd);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #9CDCFE\">client_socket</span><span style=\"color: #D4D4D4\">[i] = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        } </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #6A9955\">// 将接收到的数据回显给客户端</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #DCDCAA\">send</span><span style=\"color: #D4D4D4\">(sd, buffer, valread, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 关闭套接字</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(server_socket);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p><p>注意，内核判断文件描述符是否就绪是通过判断其对应的数据缓冲区的状态。举个例子，从select返回后，如果不去读取数据，那么下次select还会返回这个文件描述符！！！</p>\n</p>\n</div>\n<h2 id=\"poll函数\"><a href=\"#poll函数\" class=\"headerlink\" title=\"poll函数\"></a>poll函数</h2><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;poll.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">poll</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> pollfd *</span><span style=\"color: #9CDCFE\">fds</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">nfds_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">nfds</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">timeout</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> pollfd</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> fd;</span><span style=\"color: #6A9955\">\t\t\t/* File descriptor to poll.  */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">short</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> events;</span><span style=\"color: #6A9955\">\t\t/* Types of events poller cares about.  */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">short</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> revents;</span><span style=\"color: #6A9955\">\t\t/* Types of events that actually occurred.  */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span></code></pre></div><p><code>poll()</code> 函数与 <code>select()</code> 函数执行类似的任务：等待一组文件描述符中的一个变为就绪状态，以便执行 I/O 操作。特定于 Linux 的 <code>epoll()</code> API 也执行类似的任务，但提供了 <code>poll()</code> 中没有的功能。</p>\n<p>要监控的文件描述符集在 <code>fds</code> 参数中指定， <code>fds</code> 是一个指向 <code>pollfd</code> 结构的指针数组。</p>\n<p>对于<code>pollfd</code>结构体：</p>\n<ul>\n<li><code>fd</code> 字段包含一个打开文件的文件描述符。如果此字段为负数，则将忽略相应的 <code>events</code> 字段，并且 <code>revents</code> 字段返回零。（这提供了一种在单个 <code>poll()</code> 调用中忽略文件描述符的简单方法：只需将 <code>fd</code> 字段设置为其按位补码即可。）</li>\n<li><code>events</code> 字段是一个输入参数，一个位掩码，指定应用程序对文件描述符 <code>fd</code> 感兴趣的事件，通常是<code>POLLIN</code> 或 <code>POLLOUT</code> 。此字段可以指定为零，在这种情况下，<code>revents</code> 中可以返回的唯一事件是 <code>POLLHUP</code>、<code>POLLERR</code> 和 <code>POLLNVAL</code>。</li>\n<li><code>revents</code> 字段是一个输出参数，由内核填充实际发生的事件。<code>revents</code> 中返回的位可以包括在 <code>events</code> 中指定的任何位，或者 <code>POLLERR</code>、<code>POLLHUP</code> 或 <code>POLLNVAL</code> 中的一个值。（这三位在 <code>events</code> 字段中没有意义，并且只要相应的条件为真，就会在 <code>revents</code> 字段中设置。）</li>\n</ul>\n<p>调用者应在 <code>nfds</code> 参数中指定 <code>fds</code> 数组中的元素数量。</p>\n<p><code>timeout</code>参数指定 <code>poll()</code>的阻塞时长，单位是毫秒。特别地，为负数表示无限期阻塞，为0表示立即返回。</p>\n<p>返回值和 <code>select()</code> 函数类似，成功时返回就绪的文件描述符数量，出错时返回-1，并设置 <code>errno</code>。</p>\n<p>一个简单的echo服务器示例：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;arpa/inet.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;netinet/in.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;poll.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdlib.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;string.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> PORT </span><span style=\"color: #B5CEA8\">8080</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> MAX_CLIENTS </span><span style=\"color: #B5CEA8\">10</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> BUFFER_SIZE </span><span style=\"color: #B5CEA8\">1024</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> server_socket, </span><span style=\"color: #9CDCFE\">client_sockets</span><span style=\"color: #D4D4D4\">[MAX_CLIENTS];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr_in address;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i, sd, valread;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">buffer</span><span style=\"color: #D4D4D4\">[BUFFER_SIZE];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> pollfd </span><span style=\"color: #9CDCFE\">fds</span><span style=\"color: #D4D4D4\">[MAX_CLIENTS + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">];</span><span style=\"color: #6A9955\"> // 使用 pollfd 结构体存储文件描述符和事件</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> nfds = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\"> // 当前监控的文件描述符数量，初始为1（只包含server_socket）</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 初始化所有客户端套接字</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; MAX_CLIENTS; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">client_sockets</span><span style=\"color: #D4D4D4\">[i] = -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\"> // 使用 -1 表示空闲的客户端槽位</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 创建服务器套接字</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> ((server_socket = </span><span style=\"color: #DCDCAA\">socket</span><span style=\"color: #D4D4D4\">(AF_INET, SOCK_STREAM, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">)) == </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"socket failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">address</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_family</span><span style=\"color: #D4D4D4\"> = AF_INET;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">address</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">s_addr</span><span style=\"color: #D4D4D4\"> = INADDR_ANY;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">address</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_port</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">htons</span><span style=\"color: #D4D4D4\">(PORT);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 绑定地址和端口</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">bind</span><span style=\"color: #D4D4D4\">(server_socket, (</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *)&amp;address, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(address)) &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"bind failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 监听连接</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">listen</span><span style=\"color: #D4D4D4\">(server_socket, </span><span style=\"color: #B5CEA8\">3</span><span style=\"color: #D4D4D4\">) &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"listen failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Echo server started on port </span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, PORT);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 初始化 pollfd 结构体数组</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">fds</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">].</span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\"> = server_socket;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">fds</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">].</span><span style=\"color: #9CDCFE\">events</span><span style=\"color: #D4D4D4\"> = POLLIN;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 使用 poll 监控文件描述符</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> activity = </span><span style=\"color: #DCDCAA\">poll</span><span style=\"color: #D4D4D4\">(fds, nfds, -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\"> // -1 表示无限等待</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (activity &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"poll failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 处理服务器套接字事件</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">fds</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">].</span><span style=\"color: #9CDCFE\">revents</span><span style=\"color: #D4D4D4\"> &amp; POLLIN) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #4EC9B0\">socklen_t</span><span style=\"color: #D4D4D4\"> addrlen = </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(address);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> new_socket =</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #DCDCAA\">accept</span><span style=\"color: #D4D4D4\">(server_socket, (</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *)&amp;address, &amp;addrlen);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (new_socket &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"accept failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"New connection , socket fd is </span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #CE9178\"> , ip is : </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #CE9178\"> , port : </span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #CE9178\"> </span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">             new_socket, </span><span style=\"color: #DCDCAA\">inet_ntoa</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">address</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_addr</span><span style=\"color: #D4D4D4\">), </span><span style=\"color: #DCDCAA\">ntohs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">address</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_port</span><span style=\"color: #D4D4D4\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #6A9955\">// 找到空闲的客户端槽位</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; MAX_CLIENTS; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">client_sockets</span><span style=\"color: #D4D4D4\">[i] == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #9CDCFE\">client_sockets</span><span style=\"color: #D4D4D4\">[i] = new_socket;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #6A9955\">// 添加新的文件描述符到 poll 监控列表</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #9CDCFE\">fds</span><span style=\"color: #D4D4D4\">[nfds].</span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\"> = new_socket;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #9CDCFE\">fds</span><span style=\"color: #D4D4D4\">[nfds].</span><span style=\"color: #9CDCFE\">events</span><span style=\"color: #D4D4D4\"> = POLLIN;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          nfds++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (i == MAX_CLIENTS) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Too many clients connected</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(new_socket);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 处理客户端数据</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt; nfds; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      sd = </span><span style=\"color: #9CDCFE\">fds</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">fds</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">revents</span><span style=\"color: #D4D4D4\"> &amp; POLLIN) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> ((valread = </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">(sd, buffer, BUFFER_SIZE)) == </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #6A9955\">// 连接已关闭</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #DCDCAA\">getpeername</span><span style=\"color: #D4D4D4\">(sd, (</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *)&amp;address,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                      (</span><span style=\"color: #4EC9B0\">socklen_t</span><span style=\"color: #D4D4D4\"> *)</span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(address));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Host disconnected , ip </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #CE9178\"> , port </span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #CE9178\"> </span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                 </span><span style=\"color: #DCDCAA\">inet_ntoa</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">address</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_addr</span><span style=\"color: #D4D4D4\">), </span><span style=\"color: #DCDCAA\">ntohs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">address</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_port</span><span style=\"color: #D4D4D4\">));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(sd);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #9CDCFE\">client_sockets</span><span style=\"color: #D4D4D4\">[i - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] = -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #6A9955\">// 从 poll 监控列表中移除</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #9CDCFE\">fds</span><span style=\"color: #D4D4D4\">[i] = </span><span style=\"color: #9CDCFE\">fds</span><span style=\"color: #D4D4D4\">[nfds - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          nfds--;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          i--;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        } </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #6A9955\">// 回写数据到客户端</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #DCDCAA\">send</span><span style=\"color: #D4D4D4\">(sd, buffer, valread, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h2 id=\"epoll函数\"><a href=\"#epoll函数\" class=\"headerlink\" title=\"epoll函数\"></a>epoll函数</h2><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/epoll.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">epoll_create</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">size</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>size</code> 参数是一个提示，指定要与新实例关联的文件描述符的数量，不影响。</p>\n<p><code>epoll_create()</code> 返回一个指向新的 epoll 实例的文件描述符。此文件描述符用于所有后续对 epoll 接口的调用。当不再需要时，应该使用 <code>close()</code> 关闭由 <code>epoll_create()</code> 返回的文件描述符。当所有指向 epoll 实例的文件描述符都已关闭时，内核将销毁该实例并释放相关资源以供重用。</p>\n<p>如果成功，这些系统调用将返回一个文件描述符（一个非负整数）。如果出错，则返回 -1，并且 <code>errno</code> 会被设置为指示错误的值。 </p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/epoll.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">epoll_ctl</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">epfd</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">op</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">              </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> epoll_event *_Nullable </span><span style=\"color: #9CDCFE\">event</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">typedef</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">union</span><span style=\"color: #D4D4D4\"> epoll_data {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\">        *ptr;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">          fd;</span><span style=\"color: #6A9955\">\t\t// 常用的一个成员</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\">     u32;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">uint64_t</span><span style=\"color: #D4D4D4\">     u64;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">} </span><span style=\"color: #4EC9B0\">epoll_data_t</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> epoll_event {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\">     events;</span><span style=\"color: #6A9955\">      /* Epoll events */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">epoll_data_t</span><span style=\"color: #D4D4D4\"> data;</span><span style=\"color: #6A9955\">        /* User data variable */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span></code></pre></div><p><code>epoll_ctl()</code> 系统调用用于在文件描述符 <code>epfd</code> 引用的 <code>epoll</code> 实例的兴趣列表中添加、修改或删除条目。它请求对目标文件描述符 <code>fd</code> 执行操作 <code>op</code> 。</p>\n<p>其中<code>op</code>的取值有：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>EPOLL_CTL_ADD</code></td>\n<td>将一个条目添加到 epoll 文件描述符 <code>epfd</code> 的兴趣列表中。该条目包括文件描述符 <code>fd</code>、对相应打开文件描述符的引用 以及 <code>event</code> 中指定的设置。</td>\n</tr>\n<tr>\n<td><code>EPOLL_CTL_MOD</code></td>\n<td>将兴趣列表中与 <code>fd</code> 关联的设置更改为 <code>event</code> 中指定的新设置。</td>\n</tr>\n<tr>\n<td><code>EPOLL_CTL_DEL</code></td>\n<td>从兴趣列表中移除（取消注册）目标文件描述符 <code>fd</code>。<code>event</code> 参数将被忽略，并且可以是 <code>NULL</code></td>\n</tr>\n</tbody></table>\n<p><code>event.events</code> 可以是以下值的按位或：<code>EPOLLOUT</code>、<code>EPOLLIN</code>；分别表示关联的文件描述符可写、可读。</p>\n<p><code>event.data</code> 指定了当此文件描述符变为就绪状态时，内核应该保存并（通过 <code>epoll_wait()</code>）随后返回的数据。</p>\n<p><code>epoll_ctl()</code> 成功时返回零。发生错误时，<code>epoll_ctl()</code> 返回 -1，并且 <code>errno</code> 会被设置为指示错误的值。 </p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/epoll.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">epoll_wait</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">epfd</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> epoll_event *</span><span style=\"color: #9CDCFE\">events</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">               </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">maxevents</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">timeout</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>epoll_wait()</code> 系统调用 会 阻塞 等待文件描述符 <code>epfd</code> 所引用的实例中 的事件。<code>events</code>是一个epoll_event数组，用于传出返回值。<code>epoll_wait()</code> 最多返回 <code>maxevents</code> 个事件。<code>maxevents</code> 参数必须大于零（通常是<code>events</code>数组所容纳元素的数量）。</p>\n<p><code>timeout</code> 参数指定 <code>epoll_wait()</code> 将阻塞的毫秒数。和 <code>poll()</code> 的参数一样。</p>\n<p>每个返回的 <code>epoll_event</code> 结构的 <code>data</code> 字段包含与最近一次调用 <code>epoll_ctl()</code> (<code>EPOLL_CTL_ADD</code>、<code>EPOLL_CTL_MOD</code>) 时为相应打开文件描述符指定的数据相同的数据。</p>\n<p><code>events</code> 字段是一个位掩码，指示已发生的相应打开文件描述符的事件。</p>\n<p><code>epoll_wait()</code> 成功时返回就绪的文件描述符数量。如果超时时间到期，则返回0。出错时，返回-1，并设置 <code>errno</code>。</p>\n<p>一个简单的echo服务器示例：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;arpa/inet.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;errno.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;netinet/in.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdlib.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;string.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/epoll.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/types.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> MAX_EVENTS </span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #6A9955\">    // epoll监听的最大事件数</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> BUFFER_SIZE </span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #6A9955\"> // 数据缓冲区大小</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> PORT </span><span style=\"color: #B5CEA8\">8080</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 1. 创建socket</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> server_socket = </span><span style=\"color: #DCDCAA\">socket</span><span style=\"color: #D4D4D4\">(AF_INET, SOCK_STREAM, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (server_socket == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"socket creation failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 2. 绑定地址和端口</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr_in server_addr;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">memset</span><span style=\"color: #D4D4D4\">(&amp;server_addr, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(server_addr));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">server_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_family</span><span style=\"color: #D4D4D4\"> = AF_INET;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">server_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">s_addr</span><span style=\"color: #D4D4D4\"> = INADDR_ANY;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">server_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_port</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">htons</span><span style=\"color: #D4D4D4\">(PORT);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">bind</span><span style=\"color: #D4D4D4\">(server_socket, (</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *)&amp;server_addr,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">           </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(server_addr)) == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"bind failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 3. 监听连接</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">listen</span><span style=\"color: #D4D4D4\">(server_socket, </span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">) == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"listen failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Server listening on :</span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, PORT);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 4. 创建epoll实例</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> epoll_fd = </span><span style=\"color: #DCDCAA\">epoll_create</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (epoll_fd == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"epoll_create1 failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 5. 将监听socket添加到epoll实例中</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> epoll_event event;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">event</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">events</span><span style=\"color: #D4D4D4\"> = EPOLLIN;</span><span style=\"color: #6A9955\"> // 监听可读事件</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">event</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">data</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\"> = server_socket;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">epoll_ctl</span><span style=\"color: #D4D4D4\">(epoll_fd, EPOLL_CTL_ADD, server_socket, &amp;event) == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"epoll_ctl failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 6. 事件循环</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> epoll_event </span><span style=\"color: #9CDCFE\">events</span><span style=\"color: #D4D4D4\">[MAX_EVENTS];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">buffer</span><span style=\"color: #D4D4D4\">[BUFFER_SIZE];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 6.1 等待事件发生</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> num_events = </span><span style=\"color: #DCDCAA\">epoll_wait</span><span style=\"color: #D4D4D4\">(epoll_fd, events, MAX_EVENTS, -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (num_events == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"epoll_wait failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 6.2 处理事件</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; num_events; ++i) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">events</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">data</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\"> == server_socket) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// 6.2.1 处理新连接</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr_in client_addr;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">socklen_t</span><span style=\"color: #D4D4D4\"> client_addr_len = </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(client_addr);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> client_socket = </span><span style=\"color: #DCDCAA\">accept</span><span style=\"color: #D4D4D4\">(</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            server_socket, (</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *)&amp;client_addr, &amp;client_addr_len);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (client_socket == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"accept failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #C586C0\">continue</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"New connection from </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #CE9178\">:</span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #DCDCAA\">inet_ntoa</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">client_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_addr</span><span style=\"color: #D4D4D4\">),</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">               </span><span style=\"color: #DCDCAA\">ntohs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">client_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_port</span><span style=\"color: #D4D4D4\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// 6.2.2 将新连接的socket添加到epoll实例中</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">event</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">events</span><span style=\"color: #D4D4D4\"> = EPOLLIN;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">event</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">data</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\"> = client_socket;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">epoll_ctl</span><span style=\"color: #D4D4D4\">(epoll_fd, EPOLL_CTL_ADD, client_socket, &amp;event) == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"epoll_ctl failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(client_socket);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #C586C0\">continue</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      } </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// 6.2.3 处理已连接socket上的数据</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> client_socket = </span><span style=\"color: #9CDCFE\">events</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">data</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">ssize_t</span><span style=\"color: #D4D4D4\"> bytes_received = </span><span style=\"color: #DCDCAA\">recv</span><span style=\"color: #D4D4D4\">(client_socket, buffer, BUFFER_SIZE, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (bytes_received == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"recv failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(client_socket);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #C586C0\">continue</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        } </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (bytes_received == </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #6A9955\">// 客户端断开连接</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Client disconnected</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(client_socket);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #C586C0\">continue</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// 回显数据</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">send</span><span style=\"color: #D4D4D4\">(client_socket, buffer, bytes_received, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 7. 关闭socket和epoll实例</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(server_socket);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(epoll_fd);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p>与上述 <code>select()</code> 和 <code>poll()</code> 函数不同，<code>epoll</code> 有两种工作模式：水平触发（LT）和边缘触发（ET）。其缺省模式和上述两者一样，是水平触发（LT）。</p>\n<ul>\n<li><p><strong>水平触发（LT）</strong>：当文件描述符就绪时，<code>epoll_wait()</code> 会返回，但是如果文件描述符还有数据未读取完，下次调用 <code>epoll_wait()</code> 时还会返回就绪状态。</p>\n</li>\n<li><p><strong>边缘触发（ET）</strong>：当文件描述符就绪时，<code>epoll_wait()</code> 会返回，但是如果文件描述符还有数据未读取完，下次调用 <code>epoll_wait()</code> 时不会返回就绪状态，直到文件描述符状态发生变化。（特别注意边缘触发 要使用非阻塞IO）</p>\n</li>\n</ul>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">event.events |=  EPOLLET;</span><span style=\"color: #6A9955\"> // 边缘触发模式</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> flag = </span><span style=\"color: #DCDCAA\">fcntl</span><span style=\"color: #D4D4D4\">(cfd, F_GETFL);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">flag |= O_NONBLOCK;</span></span>\n<span class=\"line\"><span style=\"color: #DCDCAA\">fcntl</span><span style=\"color: #D4D4D4\">(cfd, F_SETFL, flag);</span></span></code></pre></div>\n</div>\n","feature":true,"text":"shutdown函数c#include &lt;sys/socket.h&gt; int shutdown(int sockfd, int how);shutd...","permalink":"/post/Linux网络编程（TCP进阶）","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":"Linux","slug":"Linux","count":8,"path":"api/categories/Linux.json"}],"tags":[{"name":"C++","slug":"C","count":12,"path":"api/tags/C.json"},{"name":"Linux","slug":"Linux","count":8,"path":"api/tags/Linux.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#shutdown%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">shutdown函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#setsockopt%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">setsockopt函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#IO%E5%A4%9A%E8%B7%AF%E8%BD%AC%E6%8E%A5\"><span class=\"toc-text\">IO多路转接</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#select%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">select函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#poll%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">poll函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#epoll%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">epoll函数</span></a></li></ol></li></ol>","author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Linux网络编程（UDP）","uid":"49a0a815b68a3a838049f5994375a9d3","slug":"Linux网络编程（UDP）","date":"2024-02-17T12:28:55.000Z","updated":"2024-08-19T04:37:25.439Z","comments":true,"path":"api/articles/Linux网络编程（UDP）.json","keywords":"C++,Pyhton,Java,算法","cover":"img/linux.jpeg","text":"创建UDP套接字cint sockfd = socket(AF_INET, SOCK_DGRAM, 0);使用socket函数创建一个UDP套接字，注意第二个参...","permalink":"/post/Linux网络编程（UDP）","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"Linux","slug":"Linux","count":8,"path":"api/categories/Linux.json"}],"tags":[{"name":"C++","slug":"C","count":12,"path":"api/tags/C.json"},{"name":"Linux","slug":"Linux","count":8,"path":"api/tags/Linux.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true},"next_post":{"title":"Linux网络编程（TCP）","uid":"b7ae202389bc9c445e0505a76dbc19f8","slug":"Linux网络编程（TCP）","date":"2024-02-11T12:26:18.000Z","updated":"2024-08-19T04:37:16.435Z","comments":true,"path":"api/articles/Linux网络编程（TCP）.json","keywords":"C++,Pyhton,Java,算法","cover":"img/linux.jpeg","text":"数据的大端和小端所谓的字节序，指的是超过一个字节的数据在内存中的存储顺序。如果一个数据只占用一个字节，则字节序的问题就不存在了。 数据的大端存储比较贴近我们人类...","permalink":"/post/Linux网络编程（TCP）","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"Linux","slug":"Linux","count":8,"path":"api/categories/Linux.json"}],"tags":[{"name":"C++","slug":"C","count":12,"path":"api/tags/C.json"},{"name":"Linux","slug":"Linux","count":8,"path":"api/tags/Linux.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true}}