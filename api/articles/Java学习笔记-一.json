{"title":"Java学习笔记(一)","uid":"4fcfa8e6703310350c6e3442c24e0c97","slug":"Java学习笔记-一","date":"2022-05-09T08:43:00.000Z","updated":"2023-07-13T18:25:05.830Z","comments":true,"path":"api/articles/Java学习笔记-一.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/java1.jpeg","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p><strong>本篇不具体介绍Java的具体细节和语法，只记录在笔者眼中的Java和C++ 的相同和不同之处，因此需要有C++ 基础。</strong></p>\n<h3 id=\"类的结构和主函数\"><a href=\"#类的结构和主函数\" class=\"headerlink\" title=\"类的结构和主函数\"></a>类的结构和主函数</h3><ul>\n<li><p>main函数的写法固定为:<br><code>public static void main(string[] args)</code>  </p>\n</li>\n<li><p>Java文件必须以.java作为扩展名  </p>\n</li>\n<li><p>一个Java文件只能有一个public class  </p>\n</li>\n<li><p>public class的名字必须和文件名字一样，大小写都要完全一致  </p>\n</li>\n<li><p>一个文件可以有多个class，但是只能有一个是public。不提倡一个文件里面放多个类（内部类除外)  </p>\n</li>\n<li><p>System.out.print()输出<br>Systen.out.println()换行输出<br>System.out.printf()格式化的输出，输出方式与C语言基本相同</p>\n</li>\n<li><p>类是Java中的最基础逻辑单位  </p>\n<ul>\n<li>Java所有的内容都是需要放在类的范围中  </li>\n<li>内容不允许游离在类以外  </li>\n<li>换言之，Java项目就是由一个个类组成的</li>\n</ul>\n</li>\n<li><p>类的构成</p>\n<ul>\n<li>成员变量/属性</li>\n<li>成员方法/函数 </li>\n<li>代码块</li>\n</ul>\n</li>\n<li><p>一个class最多只能有一个main函数。类可以没有main函数，没有main函数的类就不能主动执行，但可以被动执行(被别人调用执行)。</p>\n</li>\n<li><p>程序的入口都是main函数，这点和C/C++ 一致。有一点不同的是，Java要求所有程序都必须放在类对象中，即所有的代码都要放在class的所辖范围内。</p>\n</li>\n<li><p>严格意义上说,main函数不属于这个类的所拥有函数。只是因为Java要求所有的内容都必须放置在class的范围内，所以main函数“寄居”在某一个class中。</p>\n</li>\n<li><p>main函数是一个Java程序的总入口。</p>\n</li>\n<li><p>main函数也无法被其他方法/类所调用。一个Java程序可以调用多个其他Java class。</p>\n</li>\n<li><p>main函数的形参传入方法和C++类似。</p>\n</li>\n</ul>\n<h3 id=\"数据类型和运算符\"><a href=\"#数据类型和运算符\" class=\"headerlink\" title=\"数据类型和运算符\"></a>数据类型和运算符</h3><p><strong>基本数据类型</strong>：</p>\n<ul>\n<li><strong>boolean布尔</strong>：<ul>\n<li>只有true，或者false两种值，默认是false，严格大小写</li>\n</ul>\n</li>\n<li><strong>byte字节</strong>：<ul>\n<li>1 byte = 8 bits (8位)</li>\n</ul>\n<ul>\n<li>存储有符号的，以二进制补码表示的整数-最小值-128，最大值127，默认值0，超过范围会进行截断。</li>\n<li>byte类型用在大型数组中可以显著节约空间，主要代替小整数，因为byte变量占用的空间只有int类型的四分之一</li>\n<li>byte在二进制文件读写中使用较多</li>\n</ul>\n</li>\n<li><strong>整型</strong><ul>\n<li><em>short短整数</em><br>16位,2个字节,有符号的以二进制补码表示的整数,默认值为0</li>\n<li><em>int整数</em><br>32位,4个字节,有符号的以二进制补码表示的整数,默认值为0</li>\n<li><em>long长整数</em><br>64位,8个字节,有符号的以二进制补码表示的整数,默认值为<em>0L</em></li>\n<li>整型超过范围会报错，long类型的赋值最好在数的末尾加上L。</li>\n</ul>\n</li>\n<li><strong>浮点</strong><ul>\n<li><em>float单精度</em><br>32位,4个字节，赋值必须在数值末尾加f</li>\n<li><em>double双精度</em><br>64位，8个字节，赋值可省略末尾的d</li>\n<li>都不能用来表示很精确的数值，float转double会使尾数变多</li>\n<li>两个小数无限接近的时候，会直接认为两个数相等</li>\n</ul>\n</li>\n<li><strong>char字符</strong><ul>\n<li>一个单一的16位Unicode字符</li>\n<li>赋值的时候可直接使用字符或者是Unicode编码</li>\n</ul>\n</li>\n</ul>\n<p><strong>运算符</strong>：<br>    同C++</p>\n<h3 id=\"选择与循环结构\"><a href=\"#选择与循环结构\" class=\"headerlink\" title=\"选择与循环结构\"></a>选择与循环结构</h3><p>    同C++</p>\n<h3 id=\"自定义函数\"><a href=\"#自定义函数\" class=\"headerlink\" title=\"自定义函数\"></a>自定义函数</h3><ul>\n<li>函数必须放在类的范围内  </li>\n<li>修饰词(public 或者 static) 返回值 (int或者void)，函数名(形参列表){函数体}  </li>\n<li>通常情况下，我们都建议方法是public。  </li>\n<li>函数可以调用其他的函数。  </li>\n<li>重载同C++</li>\n</ul>\n<h3 id=\"类和对象\"><a href=\"#类和对象\" class=\"headerlink\" title=\"类和对象\"></a>类和对象</h3><ul>\n<li>类的实例化：A obj = new A();  </li>\n<li>obj可以看作是内存中一个对象(包括若干个数据)的句柄  </li>\n<li>在C/C++中，obj称为指针，在Java中称为Reference  </li>\n<li>对象赋值是Reference赋值，而基本类型是直接值拷贝。基本类型的变量值小,可直拷贝;对象包含多个值，不易复制,赋值采用共享同一内存区域。</li>\n<li>类的成员变量如果没有被初始化，将默认为0</li>\n</ul>\n<p><strong>构造函数和析构函数：</strong>  </p>\n<ul>\n<li>构造函数同C++，但<em>没有</em>析构函数。</li>\n</ul>\n<p>Java具有内存自动回收机制的，当变量退出其生命周期后,JVM会自动回收所分配的对象的内存。所以不需要析构函数来释放内存<br><br><br><br><strong>变量的生命周期：</strong><br>同C++</p>\n<p><strong>this指针：</strong>  </p>\n<ol>\n<li>指向本类中的成员变量 this.member</li>\n<li>指向本类中的成员方法 this.methord()</li>\n<li>可以当做构造函数使用 this()</li>\n</ol>\n<h3 id=\"继承、接口和抽象类\"><a href=\"#继承、接口和抽象类\" class=\"headerlink\" title=\"继承、接口和抽象类\"></a>继承、接口和抽象类</h3><p><strong>继承：</strong><br><em>与C++相比：</em></p>\n<ul>\n<li>使用 extends 表示继承。</li>\n<li>没有诸如private，protect、public继承方式。</li>\n<li>没有关于继承方式的描述。</li>\n<li>每个类都只能继承一个类。</li>\n<li>访问权限除了private，protect、public，还有一个default，权限介于protect和private之间。前三个和C++相似，default意思是，只有在同一个<em>包(package)</em> 内才能访问。类成员的访问权限默认是default，通常不写。</li>\n</ul>\n<p>如下代码段就表示Derived类继承于Base类。</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Derived</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">extends</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Base</span><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">private</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">num</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #B5CEA8\">20</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p><em>特性</em>：</p>\n<ul>\n<li>如果不写extends，Java类都默认继承java.lang.Object类</li>\n<li>Java所有类从java.lang.Object开始，构建出一个类型继承树</li>\n<li>Object类里面默认就有clone, equals, finalize, getClass,hashCode, toString等方法</li>\n<li>每个子类的构造函数的第一句话，都默认调用父类的无参数构造函数super()，除非子类的构造函数第一句话是super，而且super语句必须放在第一条，不会出现连续两条super语句。</li>\n</ul>\n<p><strong>抽象类：</strong>  </p>\n<ul>\n<li>如果类中存在没有实现的方法，那所在的类就要被定义为抽象类。</li>\n<li>使用abstract关键字来声明类和类的abstract方法。</li>\n<li>子类可以继承于抽象类，但是一定要实现父类们所有abstract的方法。如果不能完全实现，那么子类也必须被定义为抽象类。</li>\n<li>有构造函数不能被new。</li>\n</ul>\n<p>例如这里定义了一个叫Shape的抽象类，以及类里面calArea抽象方法：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">abstract</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Shape</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">area</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">abstract</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">calArea</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p><strong>接口：</strong>   </p>\n<ul>\n<li><em>类似于</em>C++由虚函数和若干静态常量成员组成的类。</li>\n<li>由关键字interface定义。  </li>\n<li>接口可以继承(多个)接口，多个接口之间用逗号隔开，没有实现的方法将会叠加。</li>\n<li>类只可以继承(extends)一个类，但是可以实现(implements)多个接口，多个接口之间用逗号隔开。继承和实现可以同时，但extends 必须写在implements前。</li>\n<li>类实现接口，就必须实现所有未实现的方法。如果没有全部实现，那么只能成为一个抽象类。</li>\n<li>接口里可以定义变量，但是会被编译器当做常量处理</li>\n<li>没有构造函数且不能被new</li>\n</ul>\n<p>例如：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">// 接口</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">interface</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Animal</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">eat</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">move</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">// 实现Animal接口的抽象类</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">abstract</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">LandAnimal</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">implements</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Animal</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">abstract</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">eat</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">move</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"I can walk by feet\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">// 继承抽象类并且实现了抽象方法</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">GrassEating</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">extends</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">LandAnimal</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">eat</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"I eat grass\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">// 继承完整类</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Rabbit</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">extends</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">GrassEating</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">climb</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Rabbit: I can climb\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\">[] </span><span style=\"color: #9CDCFE\">args</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">Rabbit</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">t</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Rabbit</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">t</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">eat</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">t</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">climb</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">t</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">move</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h3 id=\"转型、多态和契约设置\"><a href=\"#转型、多态和契约设置\" class=\"headerlink\" title=\"转型、多态和契约设置\"></a>转型、多态和契约设置</h3><p><strong>转型：</strong></p>\n<ul>\n<li>通过Reference之间的赋值来实现转型。</li>\n<li>类型可以相互转型，但是只限制于有继承关系的类。</li>\n<li>子类可以转换成父类，而父类不可以转为子类。</li>\n<li>子类继承父类所有的成员，子类可以变成父类(向上转型);</li>\n<li>从父类直接变成子类(向下转型)则不允许。</li>\n<li>如果这个父类本身就是从子类转化过来的，则也可以向下转型。</li>\n</ul>\n<p><strong>多态：</strong>  </p>\n<ul>\n<li>和C++用虚函数实现不同，Java是通过接口和函数重写实现的。</li>\n<li>以统一的接口来操纵某一类中不同的对象的动态行为。</li>\n</ul>\n<p><strong>契约:</strong>  </p>\n<ul>\n<li>规定规范了对象应该包含的行为方法</li>\n<li>接口定义了方法的名称、参数和返回值，规范了派生类的行为</li>\n<li>基于接口，利用转型和多态，不影响真正方法的调用，成功地将调用类和被调用类<strong>解耦(decoupling)</strong></li>\n</ul>\n<h3 id=\"static、final和常量\"><a href=\"#static、final和常量\" class=\"headerlink\" title=\"static、final和常量\"></a>static、final和常量</h3><p><strong>static</strong><br>在类中的表现同C++。</p>\n<ul>\n<li>static块<ul>\n<li>只在类第一次被加载时调用。</li>\n<li>在程序运行期间，这段代码只运行一次。一执行顺序:static块&gt;匿名块&gt;构造函数。</li>\n</ul>\n</li>\n</ul>\n<p><strong>单例模式：</strong><br>保证一个类只有一个对象</p>\n<ol>\n<li>采用static来共享对象实例</li>\n<li>采用private构造函数，防止外界new操作</li>\n<li>定义一个函数获取该static实例</li>\n</ol>\n<p><strong>final</strong>：  </p>\n<ul>\n<li>位置不一样，C++是将final关键字放在后面，Java则是放在前面。</li>\n<li>Java的final用来修饰类、方法时，作用和C++差不多。</li>\n<li>用来修饰基本类型的时候，就和C++的const一样。</li>\n<li>如果作用于对象,则对象的指针的值不可改变，但是对象的数据可以改变。相当于C++的指针常量。</li>\n</ul>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">final</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">GrassEating</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">extends</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">LandAnimal</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">final</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">const_int</span><span style=\"color: #D4D4D4\">=</span><span style=\"color: #B5CEA8\">100</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">final</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">eat</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">final</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">GrassEating</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">const_object</span><span style=\"color: #D4D4D4\">=</span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">GrassEating</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"I eat grass\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p><strong>常量</strong>：  </p>\n<ul>\n<li>使用<code>public static final</code>来修饰常量</li>\n<li>常量命名最好大写</li>\n<li>接口里定义的变量默认是常量，是<code>public static final</code>的缺省</li>\n<li>常量式赋值创建，放在栈内存(将被常量化).如：<ul>\n<li>Integer a = 10;  </li>\n<li>String b =“abc”;</li>\n</ul>\n</li>\n<li>new对象进行创建，放在堆内存(不会常量化)。如：  <ul>\n<li>Integer c = new Integer(10);</li>\n</ul>\n<ul>\n<li>String d = new String(“abc”);</li>\n</ul>\n</li>\n<li>基本类型和包装类进行比较,包装类自动拆箱</li>\n</ul>\n<p><strong>常量池</strong>：<br>Java为很多基本类型的包装类/字符串常量都建立常量池<br>保存在编译期间就已经确定的数据是一块特殊的内存<br>相同的值只存储一份，节省内存，共享访问<br>基本类型的<strong>包装类</strong>Boolean，Byte，Short，Integer，Long，Character </p>\n<ul>\n<li>Boolean: true, false</li>\n<li>Byte : -128~127</li>\n<li>Character : 0~127</li>\n<li>Short,Int,Long: -128~127</li>\n</ul>\n<p><strong>不可变对象</strong>：  </p>\n<ul>\n<li>所有的属性都是final和private的</li>\n<li>不提供setter方法</li>\n<li>类是final的，或者所有的方法都是final</li>\n</ul>\n<h3 id=\"package、import和classpath\"><a href=\"#package、import和classpath\" class=\"headerlink\" title=\"package、import和classpath\"></a>package、import和classpath</h3><p><strong>package</strong>和C++中的namespace相似。但是包名必须和目录名相同且该语句必须放在文件的第一行。如<code>package neuq.cs.test;</code>表示该文件是在 neuq/cs/test目录下。类的全称为”包名+类名”</p>\n<p><strong>import</strong>语句的使用和python相似。但仍需注意几个地方。  </p>\n<ol>\n<li>import必须全部放在package之后，类定义之前。多个import的顺序无关。</li>\n<li>可以用*来引入一个目录下的所有类，比如<code>import java.lang.*;</code>此意思是引入java.lang下面所有的类文件，但不包括java.lang下面所有的子目录文件，即不能递归包含各个目录下的文件。</li>\n<li>import尽量精确，不推荐用*，以免新增的同名程序会使得老程序报错。</li>\n</ol>\n<p><strong>jar</strong>：<br><em>类似</em>于C++的库文件。<br>jar文件是Java所特有的一种文件格式，用于可执行程序文件的传播。<br>jar文件实际上是一组class文件的压缩包。项目引入一个jar文件,就可以使用jar文件中所有类(.class文件),无需类的源码(.java文件)</p>\n","feature":true,"text":"前言本篇不具体介绍Java的具体细节和语法，只记录在笔者眼中的Java和C++ 的相同和不同之处，因此需要有C++ 基础。 类的结构和主函数 main函数的写法...","permalink":"/post/Java学习笔记-一","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"Java","slug":"Java","count":3,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":3,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E7%9A%84%E7%BB%93%E6%9E%84%E5%92%8C%E4%B8%BB%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">类的结构和主函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">数据类型和运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%89%E6%8B%A9%E4%B8%8E%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">选择与循环结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">自定义函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">类和对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%A7%E6%89%BF%E3%80%81%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB\"><span class=\"toc-text\">继承、接口和抽象类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BD%AC%E5%9E%8B%E3%80%81%E5%A4%9A%E6%80%81%E5%92%8C%E5%A5%91%E7%BA%A6%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">转型、多态和契约设置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#static%E3%80%81final%E5%92%8C%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">static、final和常量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#package%E3%80%81import%E5%92%8Cclasspath\"><span class=\"toc-text\">package、import和classpath</span></a></li></ol>","author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/74120250?spm_id_from=333.1007.0.0"},"rss":{"icon":"/svg/rss.svg","link":"atom.xml"},"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Java学习笔记(二)","uid":"f72442027e50aabe63bc800cc8297c91","slug":"Java学习笔记-二","date":"2022-05-11T15:24:00.000Z","updated":"2023-07-13T18:22:14.593Z","comments":true,"path":"api/articles/Java学习笔记-二.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/java2.jpeg","text":"Java常用类Java类库*包名以Java开始的包是Java核心包(Java Core Package)*： Module Description java.a...","permalink":"/post/Java学习笔记-二","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[{"name":"Java","slug":"Java","count":3,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":3,"path":"api/tags/Java.json"},{"name":"异常","slug":"异常","count":1,"path":"api/tags/异常.json"},{"name":"文件操作","slug":"文件操作","count":2,"path":"api/tags/文件操作.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/74120250?spm_id_from=333.1007.0.0"},"rss":{"icon":"/svg/rss.svg","link":"atom.xml"},"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true},"next_post":{"title":"计算机网络(二)","uid":"1400880ea83318bcbc365c9ffe072342","slug":"计算机网络-二","date":"2022-05-08T03:29:00.000Z","updated":"2023-07-13T18:29:38.184Z","comments":true,"path":"api/articles/计算机网络-二.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/network2.jpeg","text":"数据链路层数据链路层负责通过一条链路从一个结点向另一个物理链路直接相连的相邻结点传送数据报。 基本概念结点:主机、路由器链路:网络中两个结点之间的物理通道，链路...","permalink":"/post/计算机网络-二","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"网络","slug":"网络","count":4,"path":"api/categories/网络.json"}],"tags":[{"name":"网络","slug":"网络","count":4,"path":"api/tags/网络.json"},{"name":"数据链路层","slug":"数据链路层","count":1,"path":"api/tags/数据链路层.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/74120250?spm_id_from=333.1007.0.0"},"rss":{"icon":"/svg/rss.svg","link":"atom.xml"},"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true}}