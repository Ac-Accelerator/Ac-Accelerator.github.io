{"title":"Linux网络编程（UDP）","uid":"49a0a815b68a3a838049f5994375a9d3","slug":"Linux网络编程（UDP）","date":"2024-02-17T12:28:55.000Z","updated":"2024-08-19T04:37:25.439Z","comments":true,"path":"api/articles/Linux网络编程（UDP）.json","keywords":"C++,Pyhton,Java,算法","cover":"img/linux.jpeg","content":"<h1 id=\"创建UDP套接字\"><a href=\"#创建UDP套接字\" class=\"headerlink\" title=\"创建UDP套接字\"></a>创建UDP套接字</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> sockfd = </span><span style=\"color: #DCDCAA\">socket</span><span style=\"color: #D4D4D4\">(AF_INET, SOCK_DGRAM, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p>使用<code>socket</code>函数创建一个UDP套接字，注意第二个参数为<code>SOCK_DGRAM</code>，表示使用报式传输，第三个参数为0，表示使用报式传输默认的UDP协议。</p>\n<h1 id=\"绑定端口\"><a href=\"#绑定端口\" class=\"headerlink\" title=\"绑定端口\"></a>绑定端口</h1><p>对于 UDP 服务器来说，<code>bind()</code> 函数是必要的，它确保了服务器有一个固定的、已知的端口号，客户端才能将数据发送到正确的目的地。这个和 TCP 一样。</p>\n<h1 id=\"发送数据\"><a href=\"#发送数据\" class=\"headerlink\" title=\"发送数据\"></a>发送数据</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">ssize_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">sendto</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">socket</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">message</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">length</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">flags</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *</span><span style=\"color: #9CDCFE\">dest_addr</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">socklen_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">dest_len</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>sendto()</code> 函数应通过连接模式或无连接模式套接字发送消息。</p>\n<p>如果套接字是无连接模式套接字，并且尚未设置预先指定的对等地址，则消息应发送到 <code>dest_addr</code> 指定的地址。如果已预先指定对等地址（用<code>connect()</code>），则消息应发送到 <code>dest_addr</code> 指定的地址（覆盖预先指定的对等地址），不然函数应返回 -1 并将 <code>errno</code> 设置为 <code>EISCONN</code>。</p>\n<p>如果套接字是连接模式套接字，则 <code>dest_addr</code> 应被忽略。</p>\n<p><code>sendto()</code> 函数接受以下参数：</p>\n<p><code>socket</code>：指定套接字文件描述符。<br><code>message</code>：指向包含要发送的消息的缓冲区。<br><code>length</code>：以字节为单位指定消息的大小。<br><code>dest_addr</code>：指向包含目标地址的 sockaddr 结构。地址的长度和格式取决于套接字的地址族。<br><code>dest_len</code>：指定 dest_addr 参数指向的 sockaddr 结构的长度。<br><code>flags</code>：指定消息传输的类型。此参数的值通过对以下一个或多个标志进行逻辑 OR 运算形成：</p>\n<table>\n<thead>\n<tr>\n<th>flags</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MSG_EOR</td>\n<td>终止记录（如果协议支持）。</td>\n</tr>\n<tr>\n<td>MSG_OOB</td>\n<td>在支持带外数据的套接字上发送带外数据。带外数据的意义和语义取决于具体的协议。</td>\n</tr>\n<tr>\n<td>MSG_NOSIGNAL</td>\n<td>请求在不再连接的面向流的套接字上尝试发送时，不要发送 SIGPIPE 信号。仍然会返回 [EPIPE] 错误。</td>\n</tr>\n</tbody></table>\n<p>如果套接字协议支持广播，并且指定的地址是套接字协议的广播地址，则如果未为套接字设置 <code>SO_BROADCAST</code> 选项，<code>sendto()</code> 将失败。</p>\n<p>调用 <code>sendto()</code> 成功完成并不能保证消息传递成功。返回值 -1 仅表示本地检测到的错误。</p>\n<p>如果发送套接字没有足够的空间来保存要传输的消息，并且套接字文件描述符没有设置 <code>O_NONBLOCK</code>，则 <code>sendto()</code> 将阻塞，直到有可用空间为止。如果发送套接字没有足够的空间来保存要传输的消息，并且套接字文件描述符设置了 <code>O_NONBLOCK</code>，则 <code>sendto()</code> 将失败。</p>\n<p>正在使用的套接字可能要求进程具有适当的特权才能使用 <code>sendto()</code> 函数。</p>\n<p>和<code>write()</code>、<code>sent()</code>一样，成功将返回发送的字节数。否则，将返回 -1 并设置 <code>errno</code> 以指示错误。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>创建 UDP 套接字时，其本地和远程地址未指定。可以使用 <code>sendto()</code> 或 <code>sendmsg()</code> 立即发送数据报，并以有效的目标地址作为参数。当在套接字上调用 <code>connect()</code> 时，将设置默认目标地址，并且可以使用 <code>send()</code> 或<code> write()</code> 发送数据报，而无需指定目标地址。仍然可以通过将地址传递给 <code>sendto()</code> 或 <code>sendmsg()</code> 来发送到其他目标。为了接收数据包，套接字可以先使用 <code>bind()</code> 绑定到本地地址。否则，套接字层将自动分配一个空闲的本地端口，并将套接字绑定到 <code>INADDR_ANY</code>。</p>\n</p>\n</div>\n<h1 id=\"接收数据\"><a href=\"#接收数据\" class=\"headerlink\" title=\"接收数据\"></a>接收数据</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">ssize_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">recvfrom</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">socket</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #569CD6\">restrict</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">buffer</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">length</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">flags</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *</span><span style=\"color: #569CD6\">restrict</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">address</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">socklen_t</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #569CD6\">restrict</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">address_len</span><span style=\"color: #D4D4D4\">)</span></span></code></pre></div><p><code>recvfrom()</code> 函数从连接模式或无连接模式套接字接收消息。它通常与无连接模式套接字一起使用，因为它允许应用程序检索接收数据的源地址。</p>\n<p><code>recvfrom()</code> 函数接受以下参数：</p>\n<p><code>socket</code>：指定套接字文件描述符。<br><code>buffer</code>：指向应该存储消息的缓冲区。<br><code>length</code>：以字节为单位指定 <code>buffer</code> 参数指向的缓冲区的长度。<br><code>address</code>：空指针，或指向要存储发送地址的 <code>sockaddr</code> 结构。地址的长度和格式取决于套接字的地址族。<br><code>address_len</code>：如果 <code>address</code> 为空指针，则为空指针；否则为指向 socklen_t 对象的指针，该对象在输入时指定提供的 <code>sockaddr</code> 结构的长度，在输出时指定存储的地址的长度。<br><code>flags</code>：指定消息接收的类型。此参数的值通过对以下一个或多个值进行逻辑 OR 运算形成：</p>\n<table>\n<thead>\n<tr>\n<th>falgs</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MSG_PEEK</td>\n<td>窥视传入消息。数据将被视为未读，并且下一个 recvfrom() 或类似函数仍将返回此数据。</td>\n</tr>\n<tr>\n<td>MSG_OOB</td>\n<td>请求带外数据。带外数据的意义和语义取决于具体的协议。</td>\n</tr>\n<tr>\n<td>MSG_WAITALL</td>\n<td>在 SOCK_STREAM 套接字上，这将请求函数阻塞，直到可以返回全部数据。如果套接字是基于消息的套接字，如果捕获到信号，如果连接终止，如果指定了 MSG_PEEK，或者如果套接字有待处理的错误，则函数可能会返回较少的数据量。</td>\n</tr>\n</tbody></table>\n<p><code>recvfrom()</code> 函数应返回写入 <code>buffer</code> 参数指向的缓冲区的消息长度。对于基于消息的套接字（例如 <code>SOCK_RAW</code>、<code>SOCK_DGRAM</code> 和 <code>SOCK_SEQPACKET</code>），应在单个操作中读取整个消息。如果消息太长而无法放入提供的缓冲区，并且 <code>flags</code> 参数中未设置 <code>MSG_PEEK</code>，则应丢弃多余的字节。对于基于流的套接字（例如 <code>SOCK_STREAM</code>），消息边界应被忽略。在这种情况下，数据应在可用时立即返回给用户，并且不应丢弃任何数据。</p>\n<p>如果未设置 <code>MSG_WAITALL</code> 标志，则仅返回到第一条消息结尾的数据。</p>\n<p>并非所有协议都提供消息的源地址。如果 <code>address</code> 参数不是空指针，并且协议提供了消息的源地址，则接收到的消息的源地址应存储在 <code>address</code> 参数指向的 <code>sockaddr</code> 结构中，并且此地址的长度应存储在 <code>address_len</code> 参数指向的对象中。</p>\n<p>如果地址的实际长度大于提供的 <code>sockaddr</code> 结构的长度，则存储的地址将被截断。</p>\n<p>如果 <code>address</code> 参数不是空指针，并且协议不提供消息的源地址，则 <code>address</code> 指向的对象中存储的值未指定。</p>\n<p>如果套接字上没有可用的消息，并且套接字的文件描述符上未设置 <code>O_NONBLOCK</code>，则 <code>recvfrom()</code> 将阻塞，直到消息到达。如果套接字上没有可用的消息，并且套接字的文件描述符上设置了 <code>O_NONBLOCK</code>，则 <code>recvfrom()</code> 将失败并将 <code>errno</code> 设置为 <code>EAGAIN</code> 或 <code>EWOULDBLOCK</code>。</p>\n<p>成功则返回消息的长度（以字节为单位）。如果没有可接收的消息，并且对等方已执行有序关闭，则返回 0。否则，该函数应返回 -1 并设置 <code>errno</code> 以指示错误。</p>\n<p>一个简单的 UDP 通信示例：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">//服务器端</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;arpa/inet.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;netinet/in.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdlib.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;string.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> PORT </span><span style=\"color: #B5CEA8\">8080</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> sockfd;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr_in server_addr, client_addr;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">socklen_t</span><span style=\"color: #D4D4D4\"> addr_len = </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(client_addr);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">buffer</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 创建 UDP socket</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  sockfd = </span><span style=\"color: #DCDCAA\">socket</span><span style=\"color: #D4D4D4\">(AF_INET, SOCK_DGRAM, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (sockfd &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Failed to create socket\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 设置服务器地址</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">memset</span><span style=\"color: #D4D4D4\">(&amp;server_addr, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(server_addr));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">server_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_family</span><span style=\"color: #D4D4D4\"> = AF_INET;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">server_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_port</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">htons</span><span style=\"color: #D4D4D4\">(PORT);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">server_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">s_addr</span><span style=\"color: #D4D4D4\"> = INADDR_ANY;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 绑定 socket 到地址</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">bind</span><span style=\"color: #D4D4D4\">(sockfd, (</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *)&amp;server_addr, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(server_addr)) &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Failed to bind socket\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 接收数据</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> char_num = </span><span style=\"color: #DCDCAA\">recvfrom</span><span style=\"color: #D4D4D4\">(sockfd, buffer, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(buffer), </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                          (</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *)&amp;client_addr, &amp;addr_len);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (char_num &gt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">buffer</span><span style=\"color: #D4D4D4\">[char_num] = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Received  message: </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, buffer);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(sockfd);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">//客户端</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;arpa/inet.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;netinet/in.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdlib.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;string.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> SERVER_IP </span><span style=\"color: #CE9178\">\"127.0.0.1\"</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> PORT </span><span style=\"color: #B5CEA8\">8080</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> sockfd;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr_in server_addr;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *message = </span><span style=\"color: #CE9178\">\"Hello from sender!\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 创建 UDP socket</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  sockfd = </span><span style=\"color: #DCDCAA\">socket</span><span style=\"color: #D4D4D4\">(AF_INET, SOCK_DGRAM, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (sockfd &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Failed to create socket\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 设置服务器地址</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">memset</span><span style=\"color: #D4D4D4\">(&amp;server_addr, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(server_addr));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">server_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_family</span><span style=\"color: #D4D4D4\"> = AF_INET;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">server_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_port</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">htons</span><span style=\"color: #D4D4D4\">(PORT);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">server_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">s_addr</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">inet_addr</span><span style=\"color: #D4D4D4\">(SERVER_IP);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 发送数据</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">sendto</span><span style=\"color: #D4D4D4\">(sockfd, message, </span><span style=\"color: #DCDCAA\">strlen</span><span style=\"color: #D4D4D4\">(message), </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, (</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *)&amp;server_addr,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">         </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(server_addr));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Message sent.</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(sockfd);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h1 id=\"UDP广播\"><a href=\"#UDP广播\" class=\"headerlink\" title=\"UDP广播\"></a>UDP广播</h1><p>只要将目标地址设置为广播地址，使用<code>socket_ctl()</code> 设置 <code>SO_BROADCAST</code> 选项即可。</p>\n<p>这是一个简单的 UDP 广播示例：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">//广播端</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;arpa/inet.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;netinet/in.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdlib.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;string.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> BROADCAST_ADDR </span><span style=\"color: #CE9178\">\"255.255.255.255\"</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> PORT </span><span style=\"color: #B5CEA8\">8888</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> sockfd;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr_in broadcast_addr;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">message</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 创建UDP套接字</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  sockfd = </span><span style=\"color: #DCDCAA\">socket</span><span style=\"color: #D4D4D4\">(AF_INET, SOCK_DGRAM, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (sockfd &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"socket creation failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 设置广播选项</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> broadcastEnable = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> ret = </span><span style=\"color: #DCDCAA\">setsockopt</span><span style=\"color: #D4D4D4\">(sockfd, SOL_SOCKET, SO_BROADCAST, &amp;broadcastEnable,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                       </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(broadcastEnable));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (ret &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"setsockopt failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(sockfd);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 设置广播地址信息</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">memset</span><span style=\"color: #D4D4D4\">(&amp;broadcast_addr, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(broadcast_addr));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">broadcast_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_family</span><span style=\"color: #D4D4D4\"> = AF_INET;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">broadcast_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_port</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">htons</span><span style=\"color: #D4D4D4\">(PORT);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">broadcast_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">s_addr</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">inet_addr</span><span style=\"color: #D4D4D4\">(BROADCAST_ADDR);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 发送广播消息</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"请输入要广播的消息: \"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">fgets</span><span style=\"color: #D4D4D4\">(message, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(message), stdin);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">ssize_t</span><span style=\"color: #D4D4D4\"> bytes_sent =</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">sendto</span><span style=\"color: #D4D4D4\">(sockfd, message, </span><span style=\"color: #DCDCAA\">strlen</span><span style=\"color: #D4D4D4\">(message), </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">               (</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *)&amp;broadcast_addr, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(broadcast_addr));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (bytes_sent &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"sendto failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"已广播消息: </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, message);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(sockfd);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">//接收端</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;arpa/inet.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;netinet/in.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdlib.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;string.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> PORT </span><span style=\"color: #B5CEA8\">8888</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> BUFFER_SIZE </span><span style=\"color: #B5CEA8\">1024</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> sockfd;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr_in server_addr, client_addr;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">socklen_t</span><span style=\"color: #D4D4D4\"> client_addr_len;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">buffer</span><span style=\"color: #D4D4D4\">[BUFFER_SIZE];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 创建UDP套接字</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  sockfd = </span><span style=\"color: #DCDCAA\">socket</span><span style=\"color: #D4D4D4\">(AF_INET, SOCK_DGRAM, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (sockfd &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"socket creation failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 设置服务器地址信息</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">memset</span><span style=\"color: #D4D4D4\">(&amp;server_addr, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(server_addr));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">server_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_family</span><span style=\"color: #D4D4D4\"> = AF_INET;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">server_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_port</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">htons</span><span style=\"color: #D4D4D4\">(PORT);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">server_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">s_addr</span><span style=\"color: #D4D4D4\"> = INADDR_ANY;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 绑定套接字到指定端口</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">bind</span><span style=\"color: #D4D4D4\">(sockfd, (</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *)&amp;server_addr, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(server_addr)) &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"bind failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(sockfd);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"监听广播端口：</span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, PORT);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    client_addr_len = </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(client_addr);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">ssize_t</span><span style=\"color: #D4D4D4\"> bytes_received =</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">recvfrom</span><span style=\"color: #D4D4D4\">(sockfd, buffer, BUFFER_SIZE, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                 (</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *)&amp;client_addr, &amp;client_addr_len);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (bytes_received &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"recvfrom failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">buffer</span><span style=\"color: #D4D4D4\">[bytes_received] = </span><span style=\"color: #CE9178\">'</span><span style=\"color: #D7BA7D\">\\0</span><span style=\"color: #CE9178\">'</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"接收到来自 </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #CE9178\">:</span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #CE9178\"> 的广播消息: </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #DCDCAA\">inet_ntoa</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">client_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_addr</span><span style=\"color: #D4D4D4\">),</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">           </span><span style=\"color: #DCDCAA\">ntohs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">client_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_port</span><span style=\"color: #D4D4D4\">), buffer);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(sockfd);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p>注意，广播端指定的端口 必须和 接收端绑定的端口 一致，否则接收端将无法接收到广播消息。因为广播只是对IP地址来说的。</p>\n\n</div>\n<h1 id=\"UDP组播\"><a href=\"#UDP组播\" class=\"headerlink\" title=\"UDP组播\"></a>UDP组播</h1><p>组播地址是D类地址。</p>\n<p>这是一个简单的 UDP 组播示例：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">//发送端</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;arpa/inet.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;netinet/in.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdlib.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;string.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/types.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> MULTICAST_ADDR </span><span style=\"color: #CE9178\">\"224.0.1.100\"</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> MULTICAST_PORT </span><span style=\"color: #B5CEA8\">8080</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> TTL </span><span style=\"color: #B5CEA8\">64</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> LOCALIP </span><span style=\"color: #CE9178\">\"192.168.168.248\"</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> sockfd;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr_in multicast_addr;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> message</span><span style=\"color: #569CD6\">[]</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #CE9178\">\"Hello, this is a multicast message!\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> ttl = TTL;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 创建 UDP socket</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  sockfd = </span><span style=\"color: #DCDCAA\">socket</span><span style=\"color: #D4D4D4\">(AF_INET, SOCK_DGRAM, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (sockfd &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"socket creation failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 设置组播 TTL 值</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">setsockopt</span><span style=\"color: #D4D4D4\">(sockfd, IPPROTO_IP, IP_MULTICAST_TTL, &amp;ttl, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(ttl)) &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"setting TTL failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(sockfd);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> in_addr ip;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">ip</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">s_addr</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">inet_addr</span><span style=\"color: #D4D4D4\">(LOCALIP);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">setsockopt</span><span style=\"color: #D4D4D4\">(sockfd, IPPROTO_IP, IP_MULTICAST_IF, &amp;ip, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(ip))) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"setting IP_MULTICAST_IF failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(sockfd);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">memset</span><span style=\"color: #D4D4D4\">(&amp;multicast_addr, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(multicast_addr));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">multicast_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_family</span><span style=\"color: #D4D4D4\"> = AF_INET;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">multicast_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">s_addr</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">inet_addr</span><span style=\"color: #D4D4D4\">(MULTICAST_ADDR);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">multicast_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_port</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">htons</span><span style=\"color: #D4D4D4\">(MULTICAST_PORT);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 发送组播消息</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">sendto</span><span style=\"color: #D4D4D4\">(sockfd, message, </span><span style=\"color: #DCDCAA\">strlen</span><span style=\"color: #D4D4D4\">(message), </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">               (</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *)&amp;multicast_addr,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">               </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(multicast_addr)) &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"sendto failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(sockfd);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Sent message: </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, message);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">sleep</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\"> // 每秒发送一次</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(sockfd);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">//接收端</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;arpa/inet.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;net/if.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;netinet/in.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdlib.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;string.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/types.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> MULTICAST_ADDR </span><span style=\"color: #CE9178\">\"224.0.1.100\"</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> MULTICAST_PORT </span><span style=\"color: #B5CEA8\">8080</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> IFNAME </span><span style=\"color: #CE9178\">\"wlp1s0\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> sockfd;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr_in multicast_addr;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">buffer</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> ip_mreqn mreq;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 创建 UDP socket</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  sockfd = </span><span style=\"color: #DCDCAA\">socket</span><span style=\"color: #D4D4D4\">(AF_INET, SOCK_DGRAM, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (sockfd &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"socket creation failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">memset</span><span style=\"color: #D4D4D4\">(&amp;multicast_addr, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(multicast_addr));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">multicast_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_family</span><span style=\"color: #D4D4D4\"> = AF_INET;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">multicast_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">s_addr</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">htonl</span><span style=\"color: #D4D4D4\">(INADDR_ANY);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">multicast_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_port</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">htons</span><span style=\"color: #D4D4D4\">(MULTICAST_PORT);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 绑定 socket 到地址和端口</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">bind</span><span style=\"color: #D4D4D4\">(sockfd, (</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *)&amp;multicast_addr, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(multicast_addr)) &lt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"bind failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(sockfd);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 加入组播组</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">mreq</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">imr_multiaddr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">s_addr</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">inet_addr</span><span style=\"color: #D4D4D4\">(MULTICAST_ADDR);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">mreq</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">imr_address</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">s_addr</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">htonl</span><span style=\"color: #D4D4D4\">(INADDR_ANY);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">mreq</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">imr_ifindex</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">if_nametoindex</span><span style=\"color: #D4D4D4\">(IFNAME);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">setsockopt</span><span style=\"color: #D4D4D4\">(sockfd, IPPROTO_IP, IP_ADD_MEMBERSHIP, &amp;mreq, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(mreq)) &lt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"setsockopt failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(sockfd);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 接收组播消息</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">socklen_t</span><span style=\"color: #D4D4D4\"> addrlen = </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(multicast_addr);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n = </span><span style=\"color: #DCDCAA\">recvfrom</span><span style=\"color: #D4D4D4\">(sockfd, buffer, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(buffer), </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                     (</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *)&amp;multicast_addr, &amp;addrlen);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (n &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"recvfrom failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(sockfd);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">buffer</span><span style=\"color: #D4D4D4\">[n] = </span><span style=\"color: #CE9178\">'</span><span style=\"color: #D7BA7D\">\\0</span><span style=\"color: #CE9178\">'</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Received message from </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #CE9178\">:</span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #CE9178\">: </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">           </span><span style=\"color: #DCDCAA\">inet_ntoa</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">multicast_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_addr</span><span style=\"color: #D4D4D4\">), </span><span style=\"color: #DCDCAA\">ntohs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">multicast_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_port</span><span style=\"color: #D4D4D4\">),</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">           buffer);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(sockfd);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p><p><strong>对于 UDP 组播接收端，加入组播组的操作应该在 <code>bind</code> 函数之后进行。</strong></p>\n<p>如果先调用 <code>setsockopt(IP_ADD_MEMBERSHIP)</code> 加入组播组，但还没有调用 <code>bind</code> 绑定端口，操作系统无法确定将接收到的组播数据包传递给哪个应用程序，因为此时还没有与该端口关联的套接字。</p>\n</p>\n</div>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p><strong>对于 UDP 组播发送端，需要设置组播 TTL 值，以及设置组播接口。</strong></p>\n<p>通过设置<code>setsockopt(IP_MULTICAST_IF)</code>,可以指定组播数据包从哪个网络接口发送出去。如果不设置，那么组播数据包将从默认的网络接口发送出去（因为不知道默认的网络接口是什么，所以这个得控制一下）。</p>\n<p>另外，组播数据包的 TTL 值默认是 1 ，这样组播数据包只能在本地网络中传播，如果想要组播数据包能够在多个网络中传播，需要通过设置<code>setsockopt(IP_MULTICAST_TTL)</code>，设置组播数据包的 TTL 值。</p>\n\n</div>\n","feature":true,"text":"创建UDP套接字cint sockfd = socket(AF_INET, SOCK_DGRAM, 0);使用socket函数创建一个UDP套接字，注意第二个参...","permalink":"/post/Linux网络编程（UDP）","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"Linux","slug":"Linux","count":8,"path":"api/categories/Linux.json"}],"tags":[{"name":"C++","slug":"C","count":12,"path":"api/tags/C.json"},{"name":"Linux","slug":"Linux","count":8,"path":"api/tags/Linux.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAUDP%E5%A5%97%E6%8E%A5%E5%AD%97\"><span class=\"toc-text\">创建UDP套接字</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BB%91%E5%AE%9A%E7%AB%AF%E5%8F%A3\"><span class=\"toc-text\">绑定端口</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">发送数据</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E6%94%B6%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">接收数据</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#UDP%E5%B9%BF%E6%92%AD\"><span class=\"toc-text\">UDP广播</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#UDP%E7%BB%84%E6%92%AD\"><span class=\"toc-text\">UDP组播</span></a></li></ol>","author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Linux网络编程（libevent）","uid":"8dd59640d6bc3d377df04d40d6faff25","slug":"Linux网络编程（libevent）","date":"2024-02-19T12:26:18.000Z","updated":"2024-08-19T04:37:10.027Z","comments":true,"path":"api/articles/Linux网络编程（libevent）.json","keywords":"C++,Pyhton,Java,算法","cover":"img/linux.jpeg","text":"libevent的作用对于简单的socket编程，采用阻塞的方式是最基础的。例如，当调用recv函数时，如果没有数据到来就会一直阻塞。这种方式的问题在于，如果只...","permalink":"/post/Linux网络编程（libevent）","photos":[],"count_time":{"symbolsCount":"27k","symbolsTime":"24 mins."},"categories":[{"name":"Linux","slug":"Linux","count":8,"path":"api/categories/Linux.json"}],"tags":[{"name":"C++","slug":"C","count":12,"path":"api/tags/C.json"},{"name":"Linux","slug":"Linux","count":8,"path":"api/tags/Linux.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true},"next_post":{"title":"Linux网络编程（TCP进阶）","uid":"c49d0f0683cb7b900e98e175f46fbdbf","slug":"Linux网络编程（TCP进阶）","date":"2024-02-13T12:26:18.000Z","updated":"2024-08-19T04:37:21.351Z","comments":true,"path":"api/articles/Linux网络编程（TCP进阶）.json","keywords":"C++,Pyhton,Java,算法","cover":"img/linux.jpeg","text":"shutdown函数c#include &lt;sys/socket.h&gt; int shutdown(int sockfd, int how);shutd...","permalink":"/post/Linux网络编程（TCP进阶）","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":"Linux","slug":"Linux","count":8,"path":"api/categories/Linux.json"}],"tags":[{"name":"C++","slug":"C","count":12,"path":"api/tags/C.json"},{"name":"Linux","slug":"Linux","count":8,"path":"api/tags/Linux.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true}}