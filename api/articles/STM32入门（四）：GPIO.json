{"title":"STM32入门（四）：GPIO","uid":"68d21eb3a7189bac765001dce9d152b5","slug":"STM32入门（四）：GPIO","date":"2023-07-14T14:36:30.000Z","updated":"2023-09-25T16:37:41.405Z","comments":true,"path":"api/articles/STM32入门（四）：GPIO.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/STM32cover.png","content":"<h2 id=\"什么是GPIO\"><a href=\"#什么是GPIO\" class=\"headerlink\" title=\"什么是GPIO\"></a>什么是GPIO</h2><p>GPIO（General-Purpose Input/Output，通用输入输出）是指集成电路或电子电路（例如MCU/MPU）板上的一个未提交的数字信号引脚，它可以用作输入或输出，或两者兼而有之，并且可以通过软件控制。GPIO没有预定义的目的，且默认情况下未使用。</p>\n<p>GPIO的用途非常广泛，它可以用来操作自定义电子设备。例如，您可以使用GPIO来构建自己的机器人臂或DIY气象站。GPIO接口可以让您自定义信号，以便正确操作您的设备。</p>\n<p>每个GPI/O端口有两个32位配置寄存器(GPIOx_CRL，GPIOx_CRH)，两个32位数据寄存器(GPIOx_IDR和GPIOx_ODR)，一个32位置位/复位寄存器(GPIOx_BSRR)，一个16位复位寄存器(GPIOx_BRR)和一个32位锁定寄存器(GPIOx_LCKR)。根据数据手册中列出的每个I/O端口的特定硬件特征， GPIO端口的每个位可以由软件分别配置成多种模式。</p>\n<ul>\n<li>输入浮空</li>\n<li>输入上拉</li>\n<li>输入下拉</li>\n<li>模拟输入</li>\n<li>开漏输出</li>\n<li>推挽式输出</li>\n<li>推挽式复用功能</li>\n<li>开漏复用功能</li>\n</ul>\n<p>每个I/O端口位可以自由编程，然而I/0端口寄存器必须按32位字被访问(不允许半字或字节访问)。GPIOx_BSRR和GPIOx_BRR寄存器允许对任何GPIO寄存器的读/更改的独立访问；这样，在读和更改访问之间产生IRQ时不会发生危险。</p>\n<img src=\"/img/GPIO.png\">\n\n<h2 id=\"GPIO模式\"><a href=\"#GPIO模式\" class=\"headerlink\" title=\"GPIO模式\"></a>GPIO模式</h2><h3 id=\"输入浮空\"><a href=\"#输入浮空\" class=\"headerlink\" title=\"输入浮空\"></a>输入浮空</h3><p>输入浮空模式是指逻辑器件与引脚既不接高电平，也不接低电平。由于逻辑器件的内部结构，当它输入引脚悬空时，相当于该引脚接了高电平。一般实际运用时，引脚不建议悬空，易受干扰。通俗讲就是浮空就是浮在空中，就相当于此端口在默认情况下什么都不接，呈高阻态，这种设置在数据传输时用的比较多。浮空最大的特点就是电压的不确定性，它可能是0V，页可能是VCC，还可能是介于两者之间的某个值（最有可能）</p>\n<h3 id=\"输入上拉\"><a href=\"#输入上拉\" class=\"headerlink\" title=\"输入上拉\"></a>输入上拉</h3><p>输入上拉模式是一种常用的输入模式，它可以用来检测外部信号，例如接地的按键等，在按键没有导通的时候端口状态为1。在输入上拉模式中，微控制器将开启引脚的内部上拉电阻，实现上拉输入功能。这种模式可以确保输入信号稳定，避免输入信号受到干扰。</p>\n<h3 id=\"输入下拉\"><a href=\"#输入下拉\" class=\"headerlink\" title=\"输入下拉\"></a>输入下拉</h3><p>输入下拉模式是一种常用的输入模式，它可以用来检测外部信号，例如接高电平的按键等，在按键没有导通的时候端口状态为0。在输入下拉模式中，微控制器将开启引脚的内部下拉电阻，实现下拉输入功能。这种模式可以确保输入信号稳定，避免输入信号受到干扰</p>\n<h3 id=\"模拟输入\"><a href=\"#模拟输入\" class=\"headerlink\" title=\"模拟输入\"></a>模拟输入</h3><p>模拟输入是指对连续变化的信号进行量化，将模拟信号通过模数转换器（ADC）转换成数字量，并将数据上传到计算机的功能。这种功能在数据采集卡中使用最为广泛。例如，当您需要测量温度、压力或电压等物理量时，可以使用模拟输入来读取传感器的输出信号，并将其转换为数字量以便计算机处理。</p>\n<h3 id=\"开漏输出\"><a href=\"#开漏输出\" class=\"headerlink\" title=\"开漏输出\"></a>开漏输出</h3><p>开漏输出（Open Drain Output）是一种常用的输出模式，它可以用来连接不同电平的器件，匹配电平。因为开漏引脚不连接外部的上拉电阻时，只能输出低电平，如果需要同时具备输出高电平的功能，则需要接上拉电阻。这样，通过改变上拉电源的电压，便可以改变传输电平。</p>\n<p>开漏输出还可以用于通信接口，例如I2C总线。在这种情况下，多个设备可以同时挂在同一条总线上。当内部信号输入高电平时，NMOS管导通，输出被拉低到低电平状态；当内部信号输入低电平时，NMOS管截至，输出高阻态。此时可以在外部接一个上拉电阻来实现输出高电平。</p>\n<h3 id=\"推挽输出\"><a href=\"#推挽输出\" class=\"headerlink\" title=\"推挽输出\"></a>推挽输出</h3><p>推挽输出（Push-Pull Output）是一种常用的输出模式，它可以用来直接控制数字电路。可以直接控制一些数字芯片，如ADC、DAC、触发器、锁存器、三极管控制引脚等等。推挽输出电路通常用于驱动负载电流较大的应用，例如音频放大器或电机驱动器等</p>\n<h3 id=\"推挽复用功能\"><a href=\"#推挽复用功能\" class=\"headerlink\" title=\"推挽复用功能\"></a>推挽复用功能</h3><p>推挽复用输出（Push-Pull Alternate Function Output），复用功能是指单片机的引脚既可以做普通GPIO使用，也可以作为内部外设控制器的引脚来使用。例如，STM32F103xx单片机的PA5引脚，它可以做为普通GPIO来使用；其次，如果作为外设的引脚，它可以作为SPI1的时钟（SPI1_SCK）、DAC的输出通道1（DAC_OUT1）或者ADC的输入通道5（ADC12_IN5）。</p>\n<h3 id=\"开漏复用功能\"><a href=\"#开漏复用功能\" class=\"headerlink\" title=\"开漏复用功能\"></a>开漏复用功能</h3><p>开漏式复用输出（Open Drain Alternate Function Output）是一种常用的输出模式，它可以用来连接片内外设功能，例如I2C的SCL和SDA。</p>\n<h2 id=\"GPIO模式对应的状态\"><a href=\"#GPIO模式对应的状态\" class=\"headerlink\" title=\"GPIO模式对应的状态\"></a>GPIO模式对应的状态</h2><h3 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h3><ul>\n<li>输出缓冲器被禁止</li>\n<li>施密特触发输入被激活</li>\n<li>根据输入配置(上拉，下拉或浮动)的不同，弱上拉和下拉电阻被连接</li>\n<li>出现在I/O脚上的数据在每个APB2时钟被采样到输入数据寄存器</li>\n<li>对输入数据寄存器的读访问可得到I/O状态</li>\n</ul>\n<h3 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h3><ul>\n<li>输出缓冲器被激活<ul>\n<li>开漏模式：输出寄存器上的’0’激活N-MOS，而输出寄存器上的’1’将端口置于高阻状态(P-MOS从不被激活)。</li>\n<li>推挽模式：输出寄存器上的’0’激活N-MOS，而输出寄存器上的’1’将激活P-MOS。</li>\n</ul>\n</li>\n<li>施密特触发输入被激活</li>\n<li>弱上拉和下拉电阻被禁止</li>\n<li>出现在I/O脚上的数据在每个APB2时钟被采样到输入数据寄存器</li>\n<li>在开漏模式时，对输入数据寄存器的读访问可得到I/O状态</li>\n<li>在推挽式模式时，对输出数据寄存器的读访问得到最后一次写的值。</li>\n</ul>\n<h3 id=\"复用\"><a href=\"#复用\" class=\"headerlink\" title=\"复用\"></a>复用</h3><ul>\n<li>在开漏或推挽式配置中，输出缓冲器被打开</li>\n<li>内置外设的信号驱动输出缓冲器(复用功能输出)</li>\n<li>施密特触发输入被激活</li>\n<li>弱上拉和下拉电阻被禁止</li>\n<li>在每个APB2时钟周期，出现在I/O脚上的数据被采样到输入数据寄存器</li>\n<li>开漏模式时，读输入数据寄存器时可得到I/O口状态</li>\n<li>在推挽模式时，读输出数据寄存器时可得到最后一次写的值</li>\n</ul>\n<h3 id=\"模拟\"><a href=\"#模拟\" class=\"headerlink\" title=\"模拟\"></a>模拟</h3><ul>\n<li>输出缓冲器被禁止；</li>\n<li>禁止施密特触发输入，实现了每个模拟I/O引脚上的零消耗。施密特触发输出值被强置为’0’；</li>\n<li>弱上拉和下拉电阻被禁止；</li>\n<li>读取输入数据寄存器时数值为’0’。</li>\n</ul>\n<h2 id=\"GPIO使用（控制LED闪烁）\"><a href=\"#GPIO使用（控制LED闪烁）\" class=\"headerlink\" title=\"GPIO使用（控制LED闪烁）\"></a>GPIO使用（控制LED闪烁）</h2><p>查看开发板电路图，看到两个LED的引脚分别是PB5和PE5，因此我们需要对这两个引脚进行初始化，使其成为输出引脚。</p>\n<h3 id=\"GPIO初始化\"><a href=\"#GPIO初始化\" class=\"headerlink\" title=\"GPIO初始化\"></a>GPIO初始化</h3><div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stm32f1xx_hal.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">LED_Init</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    //在使用GPIO之前，需要使能GPIO时钟</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">__HAL_RCC_GPIOB_CLK_ENABLE</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">   // 使能GPIOB时钟</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">__HAL_RCC_GPIOE_CLK_ENABLE</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">   // 使能GPIOE时钟</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    GPIO_InitTypeDef GPIO_InitStruct = {</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">GPIO_InitStruct</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Pin</span><span style=\"color: #D4D4D4\"> = GPIO_PIN_5;</span><span style=\"color: #6A9955\">             // 指定要初始化的引脚</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">GPIO_InitStruct</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Mode</span><span style=\"color: #D4D4D4\"> = GPIO_MODE_OUTPUT_PP;</span><span style=\"color: #6A9955\"> // 指定引脚模式为推挽输出</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">GPIO_InitStruct</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Speed</span><span style=\"color: #D4D4D4\"> = GPIO_SPEED_LOW;</span><span style=\"color: #6A9955\">    // 指定引脚速度为低速（在控制led的例子中这一项没那么重要）</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    // GPIO_InitStruct.Pull = GPIO_NOPULL;     // 输出模式上下拉没什么意义</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_GPIO_Init</span><span style=\"color: #D4D4D4\">(GPIOB, &amp;GPIO_InitStruct);</span><span style=\"color: #6A9955\">// 初始化PB5引脚</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_GPIO_Init</span><span style=\"color: #D4D4D4\">(GPIOE, &amp;GPIO_InitStruct);</span><span style=\"color: #6A9955\">// 初始化PE5引脚</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span></code></pre></div><h3 id=\"GPIO使用\"><a href=\"#GPIO使用\" class=\"headerlink\" title=\"GPIO使用\"></a>GPIO使用</h3><p><a href=\"/post/STM32%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E6%97%B6%E9%92%9F%E9%85%8D%E7%BD%AE#%E6%97%B6%E9%92%9F%E7%B3%BB%E7%BB%9F%E5%88%9D%E5%A7%8B%E5%8C%96\">HAL_StatusTypeDef Stm32_Clock_Init();</a></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stm32f1xx_hal.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">HAL_StatusTypeDef</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Stm32_Clock_Init</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">LED_Init</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">LED0_TOGGLE</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">LED0_ON</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">LED0_OFF</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">LED1_TOGGLE</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">LED1_ON</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">LED1_OFF</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_Init</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">                     // 初始化HAL库</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">Stm32_Clock_Init</span><span style=\"color: #D4D4D4\">(RCC_PLL_MUL9);</span><span style=\"color: #6A9955\"> // 初始化时钟</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">LED_Init</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">                     // 初始化LED外设</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">//交替闪烁</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_GPIO_WritePin</span><span style=\"color: #D4D4D4\">(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);</span><span style=\"color: #6A9955\">//PB5输出低电平</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_GPIO_WritePin</span><span style=\"color: #D4D4D4\">(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);</span><span style=\"color: #6A9955\">//PE5输出高电平</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_Delay</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">500</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_GPIO_WritePin</span><span style=\"color: #D4D4D4\">(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);</span><span style=\"color: #6A9955\">//PE5输出低电平</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_GPIO_WritePin</span><span style=\"color: #D4D4D4\">(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);</span><span style=\"color: #6A9955\">//PB5输出高电平</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_Delay</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">500</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">SysTick_Handler</span><span style=\"color: #D4D4D4\">()</span><span style=\"color: #6A9955\">//系统计时器中断处理程序（重要⚠️如果没定义则无法处理系统定时器的中断）</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_IncTick</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">//系统嘀嗒计时器加1（如果不调用这个函数，无法使用HAL_Delay函数，需要自己实现其他方法）</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">LED0_ON</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_GPIO_WritePin</span><span style=\"color: #D4D4D4\">(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);</span><span style=\"color: #6A9955\"> // 点亮LED0</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">LED0_OFF</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_GPIO_WritePin</span><span style=\"color: #D4D4D4\">(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);</span><span style=\"color: #6A9955\"> // 关闭LED0</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">LED0_TOGGLE</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_GPIO_TogglePin</span><span style=\"color: #D4D4D4\">(GPIOB, GPIO_PIN_5);</span><span style=\"color: #6A9955\"> // 翻转LED0</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">LED1_ON</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_GPIO_WritePin</span><span style=\"color: #D4D4D4\">(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);</span><span style=\"color: #6A9955\"> // 点亮LED1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">LED1_OFF</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_GPIO_WritePin</span><span style=\"color: #D4D4D4\">(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);</span><span style=\"color: #6A9955\"> // 关闭LED1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">LED1_TOGGLE</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_GPIO_TogglePin</span><span style=\"color: #D4D4D4\">(GPIOE, GPIO_PIN_5);</span><span style=\"color: #6A9955\"> // 翻转LED1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span></code></pre></div><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>记得定义SysTick_Handler，否则时间延迟函数HAL_Delay()会进入死循环。</strong></p></blockquote>\n<p>其他的函数还有HAL_GPIO_ReadPin()、HAL_GPIO_TogglePin()等，可以自行查看。</p>\n","feature":true,"text":"什么是GPIOGPIO（General-Purpose Input/Output，通用输入输出）是指集成电路或电子电路（例如MCU/MPU）板上的一个未提交的数...","permalink":"/post/STM32入门（四）：GPIO","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"嵌入式","slug":"嵌入式","count":8,"path":"api/categories/嵌入式.json"}],"tags":[{"name":"STM32","slug":"STM32","count":8,"path":"api/tags/STM32.json"},{"name":"单片机","slug":"单片机","count":8,"path":"api/tags/单片机.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFGPIO\"><span class=\"toc-text\">什么是GPIO</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#GPIO%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">GPIO模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%B5%AE%E7%A9%BA\"><span class=\"toc-text\">输入浮空</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E4%B8%8A%E6%8B%89\"><span class=\"toc-text\">输入上拉</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E4%B8%8B%E6%8B%89\"><span class=\"toc-text\">输入下拉</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E6%8B%9F%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">模拟输入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%80%E6%BC%8F%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">开漏输出</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A8%E6%8C%BD%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">推挽输出</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A8%E6%8C%BD%E5%A4%8D%E7%94%A8%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">推挽复用功能</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%80%E6%BC%8F%E5%A4%8D%E7%94%A8%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">开漏复用功能</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#GPIO%E6%A8%A1%E5%BC%8F%E5%AF%B9%E5%BA%94%E7%9A%84%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">GPIO模式对应的状态</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">输入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">输出</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E7%94%A8\"><span class=\"toc-text\">复用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E6%8B%9F\"><span class=\"toc-text\">模拟</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#GPIO%E4%BD%BF%E7%94%A8%EF%BC%88%E6%8E%A7%E5%88%B6LED%E9%97%AA%E7%83%81%EF%BC%89\"><span class=\"toc-text\">GPIO使用（控制LED闪烁）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#GPIO%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">GPIO初始化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#GPIO%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">GPIO使用</span></a></li></ol></li></ol>","author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"STM32入门（五）：中断","uid":"216a2da9fe9c97a8ed131bdb8a83b703","slug":"STM32入门（五）：中断","date":"2023-07-15T04:16:04.000Z","updated":"2023-09-25T16:37:41.581Z","comments":true,"path":"api/articles/STM32入门（五）：中断.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/STM32cover.png","text":"中断概念中断是指计算机在正常处理程序的过程中，当发现某种异常事件或某种外部请求时，处理器会暂停执行当前程序转而执行异常事件处理或外部事件处理。在计算机科学中，中...","permalink":"/post/STM32入门（五）：中断","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"嵌入式","slug":"嵌入式","count":8,"path":"api/categories/嵌入式.json"}],"tags":[{"name":"STM32","slug":"STM32","count":8,"path":"api/tags/STM32.json"},{"name":"单片机","slug":"单片机","count":8,"path":"api/tags/单片机.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true},"next_post":{"title":"STM32入门（三）：时钟配置","uid":"4ec857b23ce5e6dcd3e699fe4235ea27","slug":"STM32入门（三）：时钟配置","date":"2023-07-14T09:04:28.000Z","updated":"2023-09-25T16:37:41.449Z","comments":true,"path":"api/articles/STM32入门（三）：时钟配置.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/STM32cover.png","text":"基本上所有的单片机功能都离不开时钟的帮助啦！所以时钟的配置是非常重要的。基本上是单片机开发的第一步呢！ 时钟系统初始化 cpp#include &lt;stm3...","permalink":"/post/STM32入门（三）：时钟配置","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"嵌入式","slug":"嵌入式","count":8,"path":"api/categories/嵌入式.json"}],"tags":[{"name":"STM32","slug":"STM32","count":8,"path":"api/tags/STM32.json"},{"name":"单片机","slug":"单片机","count":8,"path":"api/tags/单片机.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true}}