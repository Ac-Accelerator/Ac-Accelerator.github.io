{"title":"STM32入门（五）：中断","uid":"216a2da9fe9c97a8ed131bdb8a83b703","slug":"STM32入门（五）：中断","date":"2023-07-15T04:16:04.000Z","updated":"2023-09-25T16:37:41.581Z","comments":true,"path":"api/articles/STM32入门（五）：中断.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/STM32cover.png","content":"<h2 id=\"中断概念\"><a href=\"#中断概念\" class=\"headerlink\" title=\"中断概念\"></a>中断概念</h2><p>中断是指计算机在正常处理程序的过程中，当发现某种异常事件或某种外部请求时，处理器会暂停执行当前程序转而执行异常事件处理或外部事件处理。在计算机科学中，中断是指处理器接收到来自硬件或软件的信号，提示发生了某个事件，应该被注意，这种情况就称为中断。通常，在接收到来自外围硬件（相对于中央处理器和内存）的异步信号，或来自软件的同步信号之后，处理器将会进行相应的硬件/软件处理。发出这样的信号称为进行中断请求（interrupt request，IRQ）。硬件中断导致处理器通过一个执行资讯切换（context switch）来保存执行状态（以程序计数器和程序状态字等寄存器信息为主）；软件中断则通常作为CPU指令集中的一个指令，以可编程的方式直接指示这种执行资讯切换，并将处理导向一段中断处理代码。</p>\n<p>在STM32中，一个中断的流程如下：</p>\n<img src=\"/img/中断流程.png\">\n\n<h2 id=\"中断优先级\"><a href=\"#中断优先级\" class=\"headerlink\" title=\"中断优先级\"></a>中断优先级</h2><p>中断优先级是为了判断当多个中断同时发生时，哪个中断先执行而产生的概念。</p>\n<p>中断优先级分为：</p>\n<ol>\n<li>抢占优先级</li>\n<li>响应优先级</li>\n<li>自然优先级（中断向量表的优先级）</li>\n</ol>\n<p>抢占优先级高的会打断抢占优先级低的中断。<br>当中断的抢占优先级相同时，响应优先级高的会先执行，但是不能互相打断。<br>当中断的抢占优先级和响应优先级都相同时，自然优先级高的会先执行，但是不能互相打断。  </p>\n<p>中断优先级数值越小，优先级越高。</p>\n<p>在STM32中，有4个位来表示抢占优先级以及响应优先级，而<strong>中断优先级分组</strong>决定了这4个位中抢占优先级以及响应优先级位数的分配。</p>\n<h2 id=\"NVIC\"><a href=\"#NVIC\" class=\"headerlink\" title=\"NVIC\"></a>NVIC</h2><p>嵌套向量中断控制器（Nested Vectored Interrupt Controller）</p>\n<ul>\n<li>68个可屏蔽中断通道(不包含16个Cortex™-M3的中断线)；</li>\n<li>16个可编程的优先等级(使用了4位中断优先级)；</li>\n<li>低延迟的异常和中断处理；</li>\n<li>电源管理控制；</li>\n<li>系统控制寄存器的实现；</li>\n</ul>\n<p>嵌套向量中断控制器(NVIC)和处理器核的接口紧密相连，可以实现低延迟的中断处理和高效地处理晚到的中断。</p>\n<img src=\"/img/NVIC工作原理.png\">\n\n<p>**ISER(Interrupt Set-Enable Register)**：中断使能寄存器：此寄存器用于启用中断，并显示哪些中断已启用。<br>**ISCR(Interrupt Clear-Enable Register)**：中断失能寄存器：此寄存器用于禁用中断，并显示哪些中断已启用。<br><strong>AIRCR(Application Interrupt and Reset Control Register)</strong>:应用程序中断和复位控制寄存器此寄存器提供了数据访问的端序状态和系统的复位控制。（和中断优先级分组有关）<br><strong>SHPR(System Handler Priority Registers)</strong>:系统处理器优先级寄存器：这些寄存器设置异常处理程序的优先级级别。<br>**IPR(Interrupt Priority Registers)**：中断优先级寄存器：这些寄存器为每个中断提供一个4位优先级字段。  </p>\n<h2 id=\"EXTI\"><a href=\"#EXTI\" class=\"headerlink\" title=\"EXTI\"></a>EXTI</h2><p>外部中断/事件控制器（External Interrupt）</p>\n<p>对于互联型产品，外部中断/事件控制器由20个产生事件/中断请求的边沿检测器组成，对于其它产品，则有19个能产生事件/中断请求的边沿检测器。每个输入线可以独立地配置输入类型(脉冲或挂起)和对应的触发事件(上升沿或下降沿或者双边沿都触发)。每个输入线都可以独立地被屏蔽。挂起寄存器保持着状态线的中断请求。</p>\n<p>EXTI控制器的主要特性如下：</p>\n<ul>\n<li>每个中断/事件都有独立的触发和屏蔽</li>\n<li>每个中断线都有专用的状态位</li>\n<li>支持多达20个软件的中断/事件请求</li>\n<li>检测脉冲宽度低于APB2时钟宽度的外部信号。</li>\n</ul>\n<img src=\"/img/EXTI.png\">\n\n<ul>\n<li><strong>IMR</strong>：Interrupt Mask Register，中断屏蔽寄存器。</li>\n<li><strong>EMR</strong>：Event Mask Register，事件屏蔽寄存器。</li>\n<li><strong>RTSR</strong>：Rising Trigger Selection Register，上升沿触发选择寄存器。</li>\n<li><strong>FTSR</strong>：Falling Trigger Selection Register，下降沿触发选择寄存器。</li>\n<li><strong>SWIER</strong>：Software Interrupt Event Register，软件中断事件寄存器。</li>\n<li><strong>PR</strong>：Pending Register，挂起寄存器。</li>\n</ul>\n<p>要产生中断，必须先配置好并使能中断线。根据需要的边沿检测设置2个触发寄存器，同时在中断屏蔽寄存器的相应位写’1’允许中断请求。当外部中断线上发生了期待的边沿时，将产生一个中断请求，对应的挂起位也随之被置’1’。在挂起寄存器的对应位写’1’，将清除该中断请求。如果需要产生事件，必须先配置好并使能事件线。根据需要的边沿检测通过设置2个触发寄存器，同时在事件屏蔽寄存器的相应位写’1’允许事件请求。当事件线上发生了需要的边沿时，将产生一个事件请求脉冲，对应的挂起位不被置’1’。通过在软件中断/事件寄存器写’1’，也可以通过软件产生中断/事件请求。</p>\n<h2 id=\"GPIO外部中断\"><a href=\"#GPIO外部中断\" class=\"headerlink\" title=\"GPIO外部中断\"></a>GPIO外部中断</h2><img src=\"/img/GPIO外部中断.png\">\n\n<p>另外四个EXTI线的连接方式如下：</p>\n<ul>\n<li>EXTI线16连接到PVD输出</li>\n<li>EXTI线17连接到RTC闹钟事件</li>\n<li>EXTI线18连接到USB唤醒事件</li>\n<li>EXTI线19连接到以太网唤醒事件(只适用于互联型产品)</li>\n</ul>\n<h3 id=\"GPIO外部中断配置方式\"><a href=\"#GPIO外部中断配置方式\" class=\"headerlink\" title=\"GPIO外部中断配置方式\"></a>GPIO外部中断配置方式</h3><ol>\n<li>使能GPIO时钟</li>\n<li>设置GPIO模式为输入</li>\n<li>使能AFIO/SYSCFG时钟</li>\n<li>设置EXTI和GPIO的映射关系</li>\n<li>设置EXTI触发方式</li>\n<li>设置NVIC</li>\n<li>定义中断服务函数</li>\n</ol>\n<img src=\"/img/回调处理机制.png\">\n\n<p>依据上述回调机制，我们需要在自己定义的中断服务函数中调用HAL库中断处理公共函数，即HAL_GPIO_EXTI_IRQHandler，该函数会清除中断挂起寄存器PR，并调用回调函数HAL_GPIO_EXTI_Callback。HAL_GPIO_EXTI_Callback函数是个__weak类型的函数，可以重写该函数，这样就可以在中断服务函数里面实现具体的功能了。</p>\n<h2 id=\"GPIO硬件中断代码例子\"><a href=\"#GPIO硬件中断代码例子\" class=\"headerlink\" title=\"GPIO硬件中断代码例子\"></a>GPIO硬件中断代码例子</h2><p>制作一个会改变闪烁频率的LED灯</p>\n<p><a href=\"/post/STM32%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E6%97%B6%E9%92%9F%E9%85%8D%E7%BD%AE#%E6%97%B6%E9%92%9F%E7%B3%BB%E7%BB%9F%E5%88%9D%E5%A7%8B%E5%8C%96\">HAL_StatusTypeDef Stm32_Clock_Init();</a><br><a href=\"/post/STM32%E5%85%A5%E9%97%A8%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9AGPIO#GPIO%E5%88%9D%E5%A7%8B%E5%8C%96\">void LED_Init();</a></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stm32f1xx_hal.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">HAL_StatusTypeDef</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Stm32_Clock_Init</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">LED_Init</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">KEY_Init</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> time = </span><span style=\"color: #B5CEA8\">1000</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    /*</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    HAL_Init()中，调用HAL_NVIC_SetPriorityGrouping设置中断优先级分组为NVIC_PRIORITYGROUP_4</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    即4位抢占优先级，0位响应优先级</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    并且用HAL_NVIC_SetPriority将SysTick_IRQn设置为15即最低优先级</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_Init</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">                     // 初始化HAL库</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">Stm32_Clock_Init</span><span style=\"color: #D4D4D4\">(RCC_PLL_MUL9);</span><span style=\"color: #6A9955\"> // 初始化时钟</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">LED_Init</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">                     // 初始化LED外设</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">KEY_Init</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">                     // 初始化KEY外设</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_NVIC_SetPriority</span><span style=\"color: #D4D4D4\">(SysTick_IRQn, </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">0U</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">//由于我们要在中断里面使用HAL_Delay()函数消除抖动，所以要设置SysTick_IRQn的抢占优先级比EXTI3_IRQn和EXTI0_IRQn高。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">                       // 交替闪烁</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_GPIO_WritePin</span><span style=\"color: #D4D4D4\">(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);</span><span style=\"color: #6A9955\"> // PB5输出低电平</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_GPIO_WritePin</span><span style=\"color: #D4D4D4\">(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);</span><span style=\"color: #6A9955\">   // PE5输出高电平</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_Delay</span><span style=\"color: #D4D4D4\">(time);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_GPIO_WritePin</span><span style=\"color: #D4D4D4\">(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);</span><span style=\"color: #6A9955\"> // PE5输出低电平</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_GPIO_WritePin</span><span style=\"color: #D4D4D4\">(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);</span><span style=\"color: #6A9955\">   // PB5输出高电平</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_Delay</span><span style=\"color: #D4D4D4\">(time);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">KEY_Init</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    // 第1步，在使用GPIO之前，需要使能GPIO时钟</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">__HAL_RCC_GPIOA_CLK_ENABLE</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\"> // 使能GPIOA时钟</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">__HAL_RCC_GPIOE_CLK_ENABLE</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\"> // 使能GPIOE时钟</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    //第2步到第5步</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    GPIO_InitTypeDef GPIO_InitStruct = {</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">GPIO_InitStruct</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Pin</span><span style=\"color: #D4D4D4\"> = GPIO_PIN_3;</span><span style=\"color: #6A9955\">       // 指定要初始化的引脚</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">GPIO_InitStruct</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Mode</span><span style=\"color: #D4D4D4\"> = GPIO_MODE_IT_FALLING;</span><span style=\"color: #6A9955\"> // 指定引脚模式为输入</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">GPIO_InitStruct</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Pull</span><span style=\"color: #D4D4D4\"> = GPIO_PULLUP;</span><span style=\"color: #6A9955\">     // 指定引脚上拉</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_GPIO_Init</span><span style=\"color: #D4D4D4\">(GPIOE, &amp;GPIO_InitStruct);</span><span style=\"color: #6A9955\">// 初始化PE3引脚</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">GPIO_InitStruct</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Pin</span><span style=\"color: #D4D4D4\"> = GPIO_PIN_0;</span><span style=\"color: #6A9955\"> // 指定要初始化的引脚</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">GPIO_InitStruct</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Mode</span><span style=\"color: #D4D4D4\"> = GPIO_MODE_IT_RISING;</span><span style=\"color: #6A9955\">// 指定引脚模式为中断上升沿触发</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">GPIO_InitStruct</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Pull</span><span style=\"color: #D4D4D4\"> = GPIO_PULLDOWN;</span><span style=\"color: #6A9955\">// 指定引脚下拉</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_GPIO_Init</span><span style=\"color: #D4D4D4\">(GPIOA, &amp;GPIO_InitStruct);</span><span style=\"color: #6A9955\">// 初始化PA0引脚</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    //第6步，设置NVIC</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_NVIC_SetPriority</span><span style=\"color: #D4D4D4\">(EXTI0_IRQn, </span><span style=\"color: #B5CEA8\">15</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">// 设置中断优先级15，抢占优先级0</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_NVIC_EnableIRQ</span><span style=\"color: #D4D4D4\">(EXTI0_IRQn);</span><span style=\"color: #6A9955\">// 使能中断线0</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_NVIC_SetPriority</span><span style=\"color: #D4D4D4\">(EXTI3_IRQn, </span><span style=\"color: #B5CEA8\">15</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">// 设置中断优先级15，抢占优先级0</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_NVIC_EnableIRQ</span><span style=\"color: #D4D4D4\">(EXTI3_IRQn);</span><span style=\"color: #6A9955\">// 使能中断线3</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">EXTI0_IRQHandler</span><span style=\"color: #D4D4D4\">()</span><span style=\"color: #6A9955\">// 中断服务函数，当EXTI0发生中断时会自动调用该函数</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{   </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_GPIO_EXTI_IRQHandler</span><span style=\"color: #D4D4D4\">(GPIO_PIN_0);</span><span style=\"color: #6A9955\">//调用HAL库中断处理公共函数</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">EXTI3_IRQHandler</span><span style=\"color: #D4D4D4\">()</span><span style=\"color: #6A9955\">// 中断服务函数，当EXTI3发生中断时会自动调用该函数</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{   </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_GPIO_EXTI_IRQHandler</span><span style=\"color: #D4D4D4\">(GPIO_PIN_3);</span><span style=\"color: #6A9955\">//调用HAL库中断处理公共函数</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">HAL_GPIO_EXTI_Callback</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">uint16_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">GPIO_Pin</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">// 重写回调函数，实现具体功能</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_Delay</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">// 消除抖动</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (GPIO_Pin == GPIO_PIN_0)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">HAL_GPIO_ReadPin</span><span style=\"color: #D4D4D4\">(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            time /= (time==</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">?</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">:</span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">// 防止time为0</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (GPIO_Pin == GPIO_PIN_3)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">HAL_GPIO_ReadPin</span><span style=\"color: #D4D4D4\">(GPIOE, GPIO_PIN_3) == GPIO_PIN_RESET)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            time *= </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">SysTick_Handler</span><span style=\"color: #D4D4D4\">()</span><span style=\"color: #6A9955\">// SysTick中断服务函数</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_IncTick</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div>","feature":true,"text":"中断概念中断是指计算机在正常处理程序的过程中，当发现某种异常事件或某种外部请求时，处理器会暂停执行当前程序转而执行异常事件处理或外部事件处理。在计算机科学中，中...","permalink":"/post/STM32入门（五）：中断","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"嵌入式","slug":"嵌入式","count":8,"path":"api/categories/嵌入式.json"}],"tags":[{"name":"STM32","slug":"STM32","count":8,"path":"api/tags/STM32.json"},{"name":"单片机","slug":"单片机","count":8,"path":"api/tags/单片机.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E6%96%AD%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">中断概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E6%96%AD%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">中断优先级</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#NVIC\"><span class=\"toc-text\">NVIC</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#EXTI\"><span class=\"toc-text\">EXTI</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#GPIO%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD\"><span class=\"toc-text\">GPIO外部中断</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#GPIO%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">GPIO外部中断配置方式</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#GPIO%E7%A1%AC%E4%BB%B6%E4%B8%AD%E6%96%AD%E4%BB%A3%E7%A0%81%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">GPIO硬件中断代码例子</span></a></li></ol>","author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"STM32入门（六）：串口通信","uid":"a08aadec6f6b3fd60392df174980aebb","slug":"STM32入门（六）：串口通信","date":"2023-07-16T06:40:29.000Z","updated":"2023-09-25T16:37:41.405Z","comments":true,"path":"api/articles/STM32入门（六）：串口通信.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/STM32cover.png","text":"通信基本概念串行/并行通信串行通信：数据逐位传输，一个单位时间只能发送一个bit。并行通信：数据同时通过多条线路传输，一次可以发送多个bit 单工/半双工/全双...","permalink":"/post/STM32入门（六）：串口通信","photos":[],"count_time":{"symbolsCount":"8.7k","symbolsTime":"8 mins."},"categories":[{"name":"嵌入式","slug":"嵌入式","count":8,"path":"api/categories/嵌入式.json"}],"tags":[{"name":"STM32","slug":"STM32","count":8,"path":"api/tags/STM32.json"},{"name":"单片机","slug":"单片机","count":8,"path":"api/tags/单片机.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true},"next_post":{"title":"STM32入门（四）：GPIO","uid":"68d21eb3a7189bac765001dce9d152b5","slug":"STM32入门（四）：GPIO","date":"2023-07-14T14:36:30.000Z","updated":"2023-09-25T16:37:41.405Z","comments":true,"path":"api/articles/STM32入门（四）：GPIO.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/STM32cover.png","text":"什么是GPIOGPIO（General-Purpose Input/Output，通用输入输出）是指集成电路或电子电路（例如MCU/MPU）板上的一个未提交的数...","permalink":"/post/STM32入门（四）：GPIO","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"嵌入式","slug":"嵌入式","count":8,"path":"api/categories/嵌入式.json"}],"tags":[{"name":"STM32","slug":"STM32","count":8,"path":"api/tags/STM32.json"},{"name":"单片机","slug":"单片机","count":8,"path":"api/tags/单片机.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true}}