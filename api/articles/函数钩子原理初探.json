{"title":"函数钩子原理初探","uid":"d7e80eeb35c73d4ee8de7a24a876423f","slug":"函数钩子原理初探","date":"2025-02-25T02:01:00.000Z","updated":"2025-02-25T02:50:23.947Z","comments":true,"path":"api/articles/函数钩子原理初探.json","keywords":"C++,Pyhton,Java,算法","cover":"img/函数钩子.png","content":"<h1 id=\"什么是函数钩子\"><a href=\"#什么是函数钩子\" class=\"headerlink\" title=\"什么是函数钩子\"></a>什么是函数钩子</h1><p>在Windows操作系统中，似乎可以通过一些方法，将某个进程的函数调用替换掉，从而实现破解或者内容修改等功能。这种技术就是函数钩子。在Linux中，也可以通过一些方法实现函数钩子。</p>\n<h1 id=\"函数钩子的原理\"><a href=\"#函数钩子的原理\" class=\"headerlink\" title=\"函数钩子的原理\"></a>函数钩子的原理</h1><p>其实有很多种方式来实现，包括 LD_PRELOAD 等。其中LD_PRELOAD就是将自己的库加载到目标程序的前面，从而实现函数的替换。这种方法非常简单，但是有一些限制，比如只能替换动态链接库中的函数，其次，如何保证自己编译的库和目标程序的库功能一致，不出问题呢？</p>\n<p>这里提供一个比较简单的思路，通过修改目标函数的前几个字节，将其跳转到我们自己的函数，然后在自己的函数中调用原始函数，从而实现函数钩子。此时要精心判断，如何跳转回原始函数，以及如何处理参数等问题。下面这段代码（仅仅适用于X86_64架构），只能处理一个int参数的函数或者无参数，如果有多个参数，需要看汇编进行修改。</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdint.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdlib.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;string.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/mman.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">target_function</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"target receive：</span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, a);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> a * </span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> (*trampoline_func)();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">hook_function</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"hooked: </span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, a);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> ret = </span><span style=\"color: #DCDCAA\">trampoline_func</span><span style=\"color: #D4D4D4\">(a * </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"target return: </span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, ret);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> ret;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">install_hook</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">target</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">hook</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">trampoline</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *trampline = </span><span style=\"color: #DCDCAA\">malloc</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">install_hook</span><span style=\"color: #D4D4D4\">(target_function, hook_function, trampline);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  trampoline_func = trampline;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> v = </span><span style=\"color: #DCDCAA\">target_function</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">7</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">//虽然调用的是target_function，但是实际上调用的是hook_function</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"result: </span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, v);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">install_hook</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">target</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">hook</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">trampoline</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">long</span><span style=\"color: #D4D4D4\"> pagesize = </span><span style=\"color: #DCDCAA\">sysconf</span><span style=\"color: #D4D4D4\">(_SC_PAGE_SIZE);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">uintptr_t</span><span style=\"color: #D4D4D4\"> target_func_addr = (</span><span style=\"color: #569CD6\">uintptr_t</span><span style=\"color: #D4D4D4\">)target;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">memcpy</span><span style=\"color: #D4D4D4\">(trampoline, target,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">         </span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\"> // 复制原始函数的前 5 个字节 (假设 只传了一个int参数)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 为 trampoline 函数添加 jmp 指令</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">uintptr_t</span><span style=\"color: #D4D4D4\"> trampoline_jump = target_func_addr - (</span><span style=\"color: #569CD6\">uintptr_t</span><span style=\"color: #D4D4D4\">)trampoline - </span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">unsigned</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">jump_instr</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">] = {</span><span style=\"color: #B5CEA8\">0xE9</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">0x00</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">0x00</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">0x00</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">0x00</span><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">memcpy</span><span style=\"color: #D4D4D4\">(jump_instr + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, &amp;trampoline_jump, </span><span style=\"color: #B5CEA8\">4</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">memcpy</span><span style=\"color: #D4D4D4\">((</span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *)((</span><span style=\"color: #569CD6\">uintptr_t</span><span style=\"color: #D4D4D4\">)trampoline + </span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">), jump_instr, </span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 使其可执行</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">uintptr_t</span><span style=\"color: #D4D4D4\"> trampoline_func_addr = (</span><span style=\"color: #569CD6\">uintptr_t</span><span style=\"color: #D4D4D4\">)trampoline;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">uintptr_t</span><span style=\"color: #D4D4D4\"> trampoline_page_start = trampoline_func_addr &amp; ~(pagesize - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">mprotect</span><span style=\"color: #D4D4D4\">((</span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *)trampoline_page_start, pagesize,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">               PROT_READ | PROT_WRITE | PROT_EXEC) == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"mprotect for trampoline 失败\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">uintptr_t</span><span style=\"color: #D4D4D4\"> hook_func_addr = (</span><span style=\"color: #569CD6\">uintptr_t</span><span style=\"color: #D4D4D4\">)hook;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">intptr_t</span><span style=\"color: #D4D4D4\"> rel_jump =</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      hook_func_addr - target_func_addr - </span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\"> // 5 是 jmp 指令的长度</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">uintptr_t</span><span style=\"color: #D4D4D4\"> page_start =</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      target_func_addr &amp; ~(pagesize - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\"> // mprotect 的参数需要对齐到页</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">mprotect</span><span style=\"color: #D4D4D4\">((</span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *)page_start, pagesize,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">               PROT_READ | PROT_WRITE | PROT_EXEC) == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"mprotect 失败\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">memcpy</span><span style=\"color: #D4D4D4\">(jump_instr + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, &amp;rel_jump, </span><span style=\"color: #B5CEA8\">4</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">memcpy</span><span style=\"color: #D4D4D4\">(target, jump_instr, </span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div>","feature":true,"text":"什么是函数钩子在Windows操作系统中，似乎可以通过一些方法，将某个进程的函数调用替换掉，从而实现破解或者内容修改等功能。这种技术就是函数钩子。在Linux中...","permalink":"/post/函数钩子原理初探","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"C++","slug":"C","count":6,"path":"api/categories/C.json"}],"tags":[{"name":"函数钩子","slug":"函数钩子","count":1,"path":"api/tags/函数钩子.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E5%87%BD%E6%95%B0%E9%92%A9%E5%AD%90\"><span class=\"toc-text\">什么是函数钩子</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E9%92%A9%E5%AD%90%E7%9A%84%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">函数钩子的原理</span></a></li></ol>","author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"FreeRTOS源码学习","uid":"b7792344e86e32daf60ff27b68b40109","slug":"FreeRTOS源码学习","date":"2025-02-25T02:17:00.000Z","updated":"2025-03-01T07:18:15.566Z","comments":true,"path":"api/articles/FreeRTOS源码学习.json","keywords":"C++,Pyhton,Java,算法","cover":"img/freertos.png","text":"如何移植FreeRTOS到开发版上FreeRTOS的目录结构txt. └── FreeRTOS └── Source # FreeRTOS源码 ├── CMSI...","permalink":"/post/FreeRTOS源码学习","photos":[],"count_time":{"symbolsCount":"55k","symbolsTime":"50 mins."},"categories":[{"name":"C++","slug":"C","count":6,"path":"api/categories/C.json"},{"name":"操作系统","slug":"C/操作系统","count":1,"path":"api/categories/C/操作系统.json"},{"name":"嵌入式","slug":"C/操作系统/嵌入式","count":1,"path":"api/categories/C/操作系统/嵌入式.json"}],"tags":[{"name":"freeRTOS","slug":"freeRTOS","count":1,"path":"api/tags/freeRTOS.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true},"next_post":{"title":"Git 三剑客","uid":"47014b2a64ef7e5afe1be143d6d13723","slug":"Git-三剑客","date":"2024-11-02T14:34:00.000Z","updated":"2025-02-25T02:14:28.930Z","comments":true,"path":"api/articles/Git-三剑客.json","keywords":"C++,Pyhton,Java,算法","cover":"img/git.jpeg","text":"Git基础配置GitGit希望每个变更都能找到对应的人，因此在使用之前，要求配置用户名和邮箱，否则会一直提示。 bashgit config --global ...","permalink":"/post/Git-三剑客","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"Git","slug":"Git","count":1,"path":"api/categories/Git.json"}],"tags":[{"name":"Git","slug":"Git","count":1,"path":"api/tags/Git.json"},{"name":"GitLab","slug":"GitLab","count":1,"path":"api/tags/GitLab.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true}}