{"title":"Servlet详解","uid":"00373d310aa46142930357ce33d9554f","slug":"Servlet详解","date":"2023-09-29T09:42:00.000Z","updated":"2023-10-30T11:16:25.061Z","comments":true,"path":"api/articles/Servlet详解.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/web开发.jpeg","content":"<p>在Browser-Server架构的Web应用中，浏览器根据URL请求服务器的资源，浏览器则返回对应的资源给浏览器。这些资源可包括HTML文本，二进制文件等等。而其所用的传输协议即是HTTP协议。</p>\n<p>在网页请求的过程中，浏览器要做的是：</p>\n<ol>\n<li>与服务器建立TCP连接；</li>\n<li>发送HTTP请求；</li>\n<li>收取HTTP响应，然后把网页在浏览器中显示出来。</li>\n</ol>\n<p>服务器要做的是：</p>\n<ol>\n<li>与浏览器建立TCP连接</li>\n<li>等待接收HTTP请求</li>\n<li>返回HTTP响应</li>\n</ol>\n<p>HTTP是一个非常简单的协议。它的请求由4部分组成：</p>\n<ol>\n<li>请求行：指定了请求的方法，路径和协议版本；</li>\n<li>请求头：由key-value形式的字符串组成，表示对请求的补充说明；服务器可以根据这些信息做出不同的响应；</li>\n<li>空行</li>\n<li>请求体：GET请求没有请求体，POST请求有请求体,包含浏览器上传给服务器的数据。</li>\n</ol>\n<p>这是一个HTTP GET请求的例子：</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">GET /api/users/1 HTTP/1.1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">Accept: application/json, text/plain, */*</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">Accept-Encoding: gzip, deflate, br, zsdch</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">Connection: keep-alive</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">Host: localhost:9443</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">Referer: https://localhost:9443/</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1722.48</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"></span></span></code></pre></div><p>第一行是请求行，有三个用单个空格分隔的部分：</p>\n<ol>\n<li>请求方法：GET表示一个读取请求；</li>\n<li>请求路径：/api/users/1表示请求的路径；对应服务器的一个资源路径</li>\n<li>HTTP协议版本：HTTP/1.1表示使用的是HTTP协议版本1.1。</li>\n</ol>\n<p>第二行开始是请求头，每个请求头都是一个key: value形式的字符串，表示对请求的额外描述，请求头的个数是不限的。常见的请求头有：</p>\n<ul>\n<li>Accept：浏览器支持的数据类型；</li>\n<li>Accept-Encoding：浏览器支持的压缩格式；</li>\n<li>Accept-Language：浏览器当前设置的语言；</li>\n<li>Connection：浏览器与服务器之间连接的类型；</li>\n<li>Host：请求的域名；</li>\n<li>Referer：请求的来源页面；</li>\n<li>User-Agent：浏览器的用户代理字符串。</li>\n</ul>\n<p>由于是GET请求，规定上GET请求没有请求体，但是，仍然有一行空行，表示请求结束。</p>\n<p>下面来一个POST请求的例子：</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">POST /login.action HTTP/1.1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">Accept-Encoding: gzip, deflate</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">Connection: keep-alive</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">Content-Length: 27</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">Content-Type: application/x-www-form-urlencoded</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">Host: localhost:8080</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">Origin: http://localhost:8080</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">Referer: http://localhost:8080/</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1722.48</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"></span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">username=admin&amp;password=abc</span></span></code></pre></div><p>第一行仍然是请求行，可见请求方法为POST。</p>\n<p>这个例子可以看到其他的一些请求头：</p>\n<ul>\n<li>Content-Type：请求的数据类型；</li>\n<li>Content-Length：请求的数据长度；在这种情况下，正好等于请求体的长度</li>\n</ul>\n<p>正常情况下请求体的格式和Content-Type指定的格式要保持一致，因为服务器根据Content-Type来决定如何解读请求体。上例中Content-Type的值是application/x-www-form-urlencoded，表示请求体是key-value的形式发送的，如果有多个key-value对则用&amp;连接。其他的格式有application/json，表示请求体是JSON格式，application/octet-stream表示请求体是一个字节流，可以用来上传文件。等等。</p>\n<p>除了GET和POST外，常用的HTTP请求还有PUT，DELETE，HEAD，OPTIONS等，但是基本不常用，用法自搜。</p>\n<p>HTTP响应也由4部分组成：</p>\n<ol>\n<li>状态行：指定了协议版本，状态码和状态描述；</li>\n<li>响应头：由key-value形式的字符串组成，表示对响应的补充说明；浏览器可以根据这些信息做出不同的处理；</li>\n<li>空行</li>\n<li>响应正文：服务器返回给浏览器的数据。</li>\n</ol>\n<p>这是一个HTTP响应的例子：</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">HTTP/1.1 200 OK</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">Server: Apache-Coyote/1.1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">Content-Type: text/html;charset=ISO-8859-1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">Content-Length: 154</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">Date: Fri, 29 Sep 2023 10:39:00 GMT</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"></span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXNzd29yZCI6ImFiYyIsImV4cCI6MTY5NjE2Mzk0MCwidXNlcm5hbWUiOiJhZG1pbiJ9.i1QiBVjO_nPXDudpPWJmiMWsQROekYCmozQAzreOcrE</span></span></code></pre></div><p>这里值得注意的是状态代码，其中2xx表示成功，3xx表示重定向，4xx表示客户端引发的错误，5xx表示服务器端引发的错误。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">关于GET和POST的参数传递</p>\n<p>这两个方法都能够传递请求参数，一般来说POST请求的参数是在请求体中传递的，而GET请求的参数是在URL中传递的，例如在bing上搜索github：<br><code>https://www.bing.com/search?q=github&amp;form=ANNNB1</code><br>这个即是一个GET请求，其请求行为：</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">GET /search?q=github&amp;form=ANNNB1 HTTP/1.1</span></span></code></pre></div><p>其中，<code>/search</code>是请求路径，<code>？</code>是分隔符，<code>q=github&amp;form=ANNNB1</code>是请求参数，多个参数用<code>&amp;</code>连接。其传参格式仅能是application/x-www-form-urlencoded。如果传入参数有中文，需要进行URL编码。所以我们在搜索引擎搜索中文时会看到URL中有一些奇怪的字符。这是因为浏览器会对URL进行编码，由ASCII字符转义中文字符，再发送给服务器。</p>\n\n</div>\n<p>虽然HTTP协议非常简单，但是要手动编写一个完善的HTTP服务器依然十分复杂，要考虑的东西很多。所以，我们需要一个能够帮助我们处理HTTP协议的框架！</p>\n<h2 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h2><p>Servlet的全称是Server Applet，即服务器端小程序。它是JavaEE规范中定义的一种用来处理HTTP请求的规范。在Java实现中作为一个接口（interface）类存在。</p>\n<p>Servlet类（实现Servlet接口的类）运行在Servlet容器中（如Tomcat），Servlet容器负责与客户端建立连接，解析HTTP请求，调用Servlet接口的方法，将HTTP响应返回给客户端。一个Web App就是由一个或多个Servlet组成的。</p>\n<p>我们编写的Servlet类需要实现Servlet接口，然后将其打包成一个war包，放入Servlet容器中，Servlet容器在接收到对应请求时会调用Servlet接口的方法，进而完成 我们编写的Servlet类 的功能。</p>\n<p>在使用Servlet时，我们需要在maven中引入相关的包，示例版本是8.0.1，注意加上&lt;scope&gt;provided&lt;/scope&gt;，表示在部署打包的时候不应该引入这个类（因为运行这个类的Servlet容器已经包含了这个类了，再引入就会发生错误）：</p>\n<div class=\"language-xml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">xml</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">dependency</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">groupId</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">javax</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">groupId</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">artifactId</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">javaee-web-api</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">artifactId</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">version</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">8.0.1</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">version</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">scope</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">provided</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">scope</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">dependency</span><span style=\"color: #808080\">&gt;</span></span></code></pre></div><p>关于打包的格式在pom.xml中配置为war（这对servlet很重要）：</p>\n<div class=\"language-xml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">xml</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">packaging</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">war</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">packaging</span><span style=\"color: #808080\">&gt;</span></span></code></pre></div><h4 id=\"Servlet接口\"><a href=\"#Servlet接口\" class=\"headerlink\" title=\"Servlet接口\"></a>Servlet接口</h4><p>Servlet接口定义了5个方法，分别是：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">interface</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Servlet</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">init</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">ServletConfig</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">var1</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #569CD6\">throws</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">ServletException</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">ServletConfig</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">getServletConfig</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">service</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">ServletRequest</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">var1</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">ServletResponse</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">var2</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #569CD6\">throws</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">ServletException</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">IOException</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">getServletInfo</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">destroy</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>其中，<code>init</code>方法是在Servlet服务器首次将Servlet类加载到内存时调用的，由于Servlet类是单例模式（<strong>因此如果Servlet中定义了字段，要注意多线程并发访问的问题</strong>），所以init方法也只会被调用一次。Servlet容器会将一个ServletConfig对象传入init方法，这个对象包含了Servlet的配置信息，例如Servlet的名称，Servlet的初始化参数等等。</p>\n<p>配置 Servlet 的初始化参数有 2 种方式：</p>\n<ol>\n<li>使用web.xml配置初始化参数；（deprecated）</li>\n<li>使用@WebServlet注解配置初始化参数。</li>\n</ol>\n<p><code>getServletConfig</code>方法用于获取Servlet的配置信息。在很多实现中，返回值和init方法的参数是同一个对象。而一般来说，我们也不会用到这个方法，因此覆写为空也行。</p>\n<p><code>service</code>方法是在接收到请求时调用的，Servlet容器收到请求后，根据请求创建ServletRequest和ServletResponse对象，然后调用service方法，将这两个对象传入，由service方法处理请求。因此<code>service</code>函数是用于处理请求的核心函数，通过实现该方法即可处理请求。</p>\n<p><code>getServletInfo</code>方法用于获取Servlet的信息，很多实现也直接返回空字符串。一般来说，我们也不会用到这个方法，因此覆写为空也行。</p>\n<p><code>destroy</code>方法是在Servlet容器关闭时调用的，用于释放资源。</p>\n<p>这里定义了一个Servlet类作为参考：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">package</span><span style=\"color: #D4D4D4\"> com.neuq.demo;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">import</span><span style=\"color: #D4D4D4\"> javax.servlet.*;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">import</span><span style=\"color: #D4D4D4\"> java.io.IOException;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">WebServlet</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"/ServletClass\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">ServletClass</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">implements</span><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">Servlet</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">str</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #569CD6\">null</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Override</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">init</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">ServletConfig</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">servletConfig</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #569CD6\">throws</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">ServletException</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        str = </span><span style=\"color: #CE9178\">\"Hello, world!\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Override</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">ServletConfig</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">getServletConfig</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">null</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Override</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">service</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">ServletRequest</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">servletRequest</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">ServletResponse</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">servletResponse</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #569CD6\">throws</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">ServletException</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">IOException</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(str);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Override</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">getServletInfo</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">null</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Override</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">destroy</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>可见实现该类的重点在于实现<code>service</code>方法。</p>\n<p>注意到给类添加了一个注解<code>@WebServlet(\"/ServletClass\")</code>，即使用了@WebServlet注解的方式配置初始化参数。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">关于注解</p>\n<p><p>注解可以理解为：可以在任何代码中加入的程序可读的注释，这个注释可以用也可以不用，用的时候就拿出来看看这个注释里定义了什么东西可以用。</p>\n<p>更加深入的来说，在这个例子中，我们在这个Servlet类上使用了javax.servlet.annotation包中定义的一个注解（注解在编译之后会被编译器实现为一个接口类），Servlet容器在使用该Servlet类时，会通过反射机制读取这个注解，进而获取到Servlet的配置信息，然后进行初始化。</p>\n</p>\n</div>\n<p>这是这个注解的定义：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">Target</span><span style=\"color: #D4D4D4\">({</span><span style=\"color: #9CDCFE\">ElementType</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">TYPE</span><span style=\"color: #D4D4D4\">})</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">Retention</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">RetentionPolicy</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">RUNTIME</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">Documented</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> @</span><span style=\"color: #569CD6\">interface</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">WebServlet</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">name</span><span style=\"color: #D4D4D4\">() </span><span style=\"color: #C586C0\">default</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\">[] </span><span style=\"color: #DCDCAA\">value</span><span style=\"color: #D4D4D4\">() </span><span style=\"color: #C586C0\">default</span><span style=\"color: #D4D4D4\"> {};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\">[] </span><span style=\"color: #DCDCAA\">urlPatterns</span><span style=\"color: #D4D4D4\">() </span><span style=\"color: #C586C0\">default</span><span style=\"color: #D4D4D4\"> {};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">loadOnStartup</span><span style=\"color: #D4D4D4\">() </span><span style=\"color: #C586C0\">default</span><span style=\"color: #D4D4D4\"> -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">WebInitParam</span><span style=\"color: #D4D4D4\">[] </span><span style=\"color: #DCDCAA\">initParams</span><span style=\"color: #D4D4D4\">() </span><span style=\"color: #C586C0\">default</span><span style=\"color: #D4D4D4\"> {};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">boolean</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">asyncSupported</span><span style=\"color: #D4D4D4\">() </span><span style=\"color: #C586C0\">default</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">false</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">smallIcon</span><span style=\"color: #D4D4D4\">() </span><span style=\"color: #C586C0\">default</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">largeIcon</span><span style=\"color: #D4D4D4\">() </span><span style=\"color: #C586C0\">default</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">description</span><span style=\"color: #D4D4D4\">() </span><span style=\"color: #C586C0\">default</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">displayName</span><span style=\"color: #D4D4D4\">() </span><span style=\"color: #C586C0\">default</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p><code>@Target</code>注解表示该注解可以用在哪些地方，这里的<code>ElementType.TYPE</code>表示可以用在类上。</p>\n<p><code>@Retention</code>注解表示该注解的生命周期，这里的<code>RetentionPolicy.RUNTIME</code>表示该注解会被保留到运行时，即可以通过反射机制读取该注解。</p>\n<p>关于这里注解的具体内容，可以看到有很多属性，这些属性就是Servlet的配置信息。例如<code>name</code>属性表示Servlet的名称，<code>urlPatterns</code>属性表示Servlet的URL路径。</p>\n<p>那上面的例子中，<code>@WebServlet(\"/ServletClass\")</code>又该如何解读呢？</p>\n<p><code>@WebServlet(\"/ServletClass\")</code>其实是<code>@WebServlet(value = \"/ServletClass\")</code>的简写，因为<code>value</code>属性是<code>@WebServlet</code>注解的默认属性，所以可以省略不写<code>value =</code>。而对于一个<code>@WebServlet</code>注解来说，<code>value</code>属性就是<code>urlPatterns</code>属性，即<code>@WebServlet(value = \"/ServletClass\")</code>等价于<code>@WebServlet(urlPatterns = \"/ServletClass\")</code>。因此上述写法的含义就是：将Servlet的URL路径设置为<code>/ServletClass</code>。</p>\n<p>其他的属性也可以通过这种方式设置。如<code>@WebServlet(urlPatterns = {\"/ServletClass\", \"/ServletClass2\"},loadOnStartup = 1)</code>。则表示将Servlet的URL路径设置为<code>/ServletClass</code>和<code>/ServletClass2</code>，并且设置Servlet在部署的时候启动，而不是默认的在第一次请求时启动。urlPatterns也支持类似<code>/*</code>的通配符。</p>\n<h2 id=\"抽象类HttpServlet\"><a href=\"#抽象类HttpServlet\" class=\"headerlink\" title=\"抽象类HttpServlet\"></a>抽象类HttpServlet</h2><p>在javax.servlet包中，实现了一个Servlet抽象类GenericServlet，它将Servlet接口中的其他方法都做了空实现，只保留了service方法作为抽象方法。因此，定义Servlet类时，我们可以继承GenericServlet类，只需要实现service方法即可。</p>\n<p>而在javax.servlet.http包中，又从抽象类GenericServlet中继承了一个抽象类HttpServlet，对HTTP协议进行了进一步的封装，使得我们可以更加方便的处理HTTP请求。</p>\n<p>HttpServlet类定义了多个处理HTTP请求的方法，其中最常用的是doGet和doPost方法，如果我们需要实现自己的业务请求，可以继承HttpServlet类，然后覆写对应的方法即可。</p>\n<p>这是一个<em>继承了抽象类HttpServlet的类</em>的定义：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">import</span><span style=\"color: #D4D4D4\"> javax.servlet.http.*;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">import</span><span style=\"color: #D4D4D4\"> javax.servlet.annotation.*;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">WebServlet</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"/HandleRequest\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">HandleRequest</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">extends</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">HttpServlet</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Override</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">doPost</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">HttpServletRequest</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">request</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">HttpServletResponse</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">response</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// 处理POST请求</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Override</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">doGet</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">HttpServletRequest</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">request</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">HttpServletResponse</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">response</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// 处理GET请求</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">具体生效的原理</p>\n<p>Servlet容器收到请求后，根据请求创建ServletRequest和ServletResponse对象，并调用了类中的<code>public void service(ServletRequest req, ServletResponse res)</code>方法，这个方法会将ServletRequest和ServletResponse对象转换为HttpServletRequest和HttpServletResponse对象，这个方法之后会调用<code>protected void service(HttpServletRequest req, HttpServletResponse resp)</code>方法，这个方法会根据请求的方法调用对应的doXXX方法，例如GET请求会调用doGet方法，POST请求会调用doPost方法。</p>\n\n</div>\n<p>注意到HttpServletRequest对象是用来获取请求信息的，而HttpServletResponse对象是用来设置响应信息的。</p>\n<h3 id=\"ServletRequest\"><a href=\"#ServletRequest\" class=\"headerlink\" title=\"ServletRequest\"></a>ServletRequest</h3><p>这个类用来获取请求信息。如：</p>\n<ol>\n<li>获取请求行信息<ul>\n<li>获取请求方法：<code>getMethod()</code>方法</li>\n<li>获取虚拟路径：<code>getContextPath()</code>方法</li>\n<li>获取Servlet路径：<code>getServletPath()</code>方法</li>\n<li>获取请求参数：<code>getQueryString()</code>方法</li>\n<li>获取请求URI：<code>getRequestURI()</code>方法和<code>getRequestURL()</code>方法（URL是带有http://前缀的那种）</li>\n<li>获取协议版本：<code>getProtocol()</code>方法</li>\n<li>获取客户端IP：<code>getRemoteAddr()</code>方法</li>\n</ul>\n</li>\n<li>获取请求头信息<ul>\n<li>根据请求头名称获取请求头：<code>getHeader(String name)</code>方法（大小写不敏感）</li>\n<li>获取所有请求头：<code>getHeaderNames()</code>方法</li>\n<li>返回请求携带的所有Cookie：<code>getCookies()</code></li>\n</ul>\n</li>\n<li>获取请求体信息<ul>\n<li>获取请求体：<code>getInputStream()</code>方法</li>\n<li>获取请求体的字符流：<code>getReader()</code>方法</li>\n</ul>\n</li>\n</ol>\n<p>也可以用于其他功能，例如：</p>\n<ol>\n<li>获取请求参数（post和get都能用！）<ul>\n<li>根据参数名获取单个请求参数：<code>getParameter(String name)</code>方法</li>\n<li>获取所有请求参数：<code>getParameterNames()</code>方法</li>\n<li>根据参数名获取请求参数的值的数组：<code>getParameterValues(String name)</code>方法（因为存在abc=123&amp;abc=456这种情况啦）</li>\n<li>获取所有请求参数的Map：<code>getParameterMap()</code>方法</li>\n</ul>\n</li>\n<li>请求转发（将请求转发给另一个Servlet类处理）<ul>\n<li>根据要转发的路径获取一个RequestDispatcher对象用于请求转发<code>getRequestDispatcher(String path)</code>方法。</li>\n<li>转发请求：<strong>用RequestDispatcher对象的方法</strong><code>forward(ServletRequest request, ServletResponse response)</code>转发请求。</li>\n</ul>\n</li>\n<li>数据共享（在请求转发的时候可以通过这个功能让不同的Servlet类共享数据）<ul>\n<li>通过setAttribute方法设置共享数据：<code>setAttribute(String name, Object value)</code>方法</li>\n</ul>\n</li>\n<li>获取ServletContext对象<ul>\n<li><code>getServletContext()</code>方法</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"ServletResponse\"><a href=\"#ServletResponse\" class=\"headerlink\" title=\"ServletResponse\"></a>ServletResponse</h3><p>这个类用来设置响应信息。由于HTTP响应必须先发送Header，再发送Body，所以，操作HttpServletResponse对象时，必须先调用设置Header的方法，最后调用发送Body的方法。</p>\n<ol>\n<li>设置响应头信息<ul>\n<li>设置响应头：<code>setHeader(String name, String value)</code>方法</li>\n<li>设置响应状态码：<code>setStatus(int sc)</code>方法</li>\n<li>设置响应体的字符编码：<code>setCharacterEncoding(String charset)</code>方法</li>\n<li>设置响应体的内容类型：<code>setContentType(String type)</code>方法</li>\n<li>设置响应体的内容长度：<code>setContentLength(int len)</code>方法（底层会自动设置，最好不要手动指定。如果写入的数据量很小，实际上会先写入缓冲区，如果写入的数据量很大，服务器会自动采用Chunked编码让浏览器能识别数据结束符而不需要设置Content-Length头。）</li>\n<li>添加Cookie：<code>addCookie(Cookie cookie)</code>方法</li>\n<li>添加Header：<code>addHeader(String name, String value)</code>方法</li>\n<li>设置Cookie过期时间：<code>setMaxAge(int expiry)</code>方法</li>\n</ul>\n</li>\n<li>设置响应体信息<ul>\n<li>获取输出流：<code>getOutputStream()</code>方法(只能二选一)</li>\n<li>获取输出字符流：<code>getWriter()</code>方法(只能二选一)</li>\n</ul>\n</li>\n<li>刷新<ul>\n<li><code>flush()</code>方法</li>\n</ul>\n</li>\n</ol>\n<div class=\"custom-quote danger\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M19.76 5.23C15.84 5.23 12 2 12 2C12 2 8.15996 5.23 4.23996 5.23C4.23996 5.23 1.86996 16.99 12 22C22.13 16.99 19.76 5.23 19.76 5.23Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 16H12\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">特别注意</p>\n<p><p>大部分Web服务器都基于HTTP/1.1协议，会复用TCP连接。如果没有调用flush()，将导致缓冲区的内容无法及时发送到客户端。此外，写入完毕后千万不要调用close()，原因同样是因为会复用TCP连接，如果关闭写入流，将关闭TCP连接，使得Web服务器无法复用此TCP连接。</p>\n</p>\n</div>\n<h3 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h3><p>在HTTP中，每个请求都是无状态的，即服务器无法区分两个请求是否来自同一个浏览器。而很多WEB应用需要区分用户。这就需要在HTTP通信中携带一些信息，因此诞生了Cookie和Session。</p>\n<p>Cookie是保存在浏览器端的一小段文本，在每次请求时，浏览器都会将Cookie放在请求头中发送给服务器，作为标识用户的信息。而Session是保存在服务器端的一小段数据，在Java Web中是存储在WEB服务器端的java对象，用来保存用户的信息。</p>\n<p>Cooket和Session是这样配合的：当客户端第一次访问服务器的时候，此时客户端的请求中不携带任何标识给服务器，此时服务器无法找到与之对应的session，就会新建session对象（每个Session对象有个唯一标识符），并在响应的时候，将该唯一标识符放到响应头的Set-Cookie中，以key-value的形式返回给客户端（意思是在Cookie中加上这段键值对）形式如：JSESSIONID=XXXXXXXXXXXXXXXXXX；其中JSESSIONID是key，而后面的value值是给该用户新创建的session的唯一标识符，之后浏览器再次进行服务器访问的时候，客户端会将此key-value放到cookie中一并请求服务器，服务器就会从Cookie中查找JSESSIONID，并根据此唯一标识符寻找对应的session对象，通过对session对象获得用户的信息。</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Override</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">doGet</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">HttpServletRequest</span><span style=\"color: #D4D4D4\"> request, </span><span style=\"color: #4EC9B0\">HttpServletResponse</span><span style=\"color: #D4D4D4\"> response) throws ServletException, IOException {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// 根据Cookie获取session对象，如果没有则会创建</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">HttpSession</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">session</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">request</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">getSession</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// 设置session的最大存活时间</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">session</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">setMaxInactiveInterval</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">60</span><span style=\"color: #D4D4D4\"> * </span><span style=\"color: #B5CEA8\">60</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// 设置session的属性，保存用户信息，注意这里的value是Object类型</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">session</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">setAttribute</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"username\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">\"admin\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// 获取session的属性，注意返回值是Object类型</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// String username = (String) session.getAttribute(\"username\");</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// 删除session的属性</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// session.removeAttribute(\"username\");</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// 销毁session</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// session.invalidate();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span></code></pre></div><p>关于Cookie的使用</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Override</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">doGet</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">HttpServletRequest</span><span style=\"color: #D4D4D4\"> request, </span><span style=\"color: #4EC9B0\">HttpServletResponse</span><span style=\"color: #D4D4D4\"> response) throws ServletException, IOException {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// 获取Cookie</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">Cookie</span><span style=\"color: #D4D4D4\">[] </span><span style=\"color: #9CDCFE\">cookies</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">request</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">getCookies</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// 遍历Cookie</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #4EC9B0\">Cookie</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">cookie</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">:</span><span style=\"color: #D4D4D4\"> cookies) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #6A9955\">// 获取Cookie的名称</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">name</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">cookie</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">getName</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #6A9955\">// 获取Cookie的值</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">value</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">cookie</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">getValue</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// 创建Cookie</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">Cookie</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">cookie</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Cookie</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"username\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">\"admin\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// 设置Cookie的最大存活时间</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">cookie</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">setMaxAge</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">60</span><span style=\"color: #D4D4D4\"> * </span><span style=\"color: #B5CEA8\">60</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// 设置Cookie生效的路径，浏览器只有在这个路径下才能发送这个Cookie</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">cookie</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">setPath</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"/\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// 设置Cookie的域名，浏览器只有在这个域名下才能发送这个Cookie</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">cookie</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">setDomain</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"localhost\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// 设置Cookie的安全属性，为true时，浏览器只有在HTTPS协议下才能发送这个Cookie</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">cookie</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">setSecure</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">true</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// 设置Cookie的HttpOnly属性</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">cookie</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">setHttpOnly</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">true</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// 添加Cookie</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">response</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">addCookie</span><span style=\"color: #D4D4D4\">(cookie);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// 删除Cookie</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// cookie.setMaxAge(0);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// response.addCookie(cookie);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span></code></pre></div><div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">Cookie的名称</p>\n<p>由于Cookie是以key-value的形式存储的，因此Cookie的名称不能重复，否则会覆盖。因此，像JSESSIONID这种被Session使用的Cookie的名称不应该被手动管理。</p>\n\n</div>\n","feature":true,"text":"在Browser-Server架构的Web应用中，浏览器根据URL请求服务器的资源，浏览器则返回对应的资源给浏览器。这些资源可包括HTML文本，二进制文件等等。...","permalink":"/post/Servlet详解","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"11 mins."},"categories":[{"name":"Java","slug":"Java","count":6,"path":"api/categories/Java.json"}],"tags":[{"name":"Web开发","slug":"Web开发","count":3,"path":"api/tags/Web开发.json"},{"name":"Java","slug":"Java","count":6,"path":"api/tags/Java.json"},{"name":"Servlet","slug":"Servlet","count":1,"path":"api/tags/Servlet.json"},{"name":"Tomcat","slug":"Tomcat","count":1,"path":"api/tags/Tomcat.json"},{"name":"HTTP","slug":"HTTP","count":1,"path":"api/tags/HTTP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Servlet\"><span class=\"toc-text\">Servlet</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Servlet%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">Servlet接口</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8A%BD%E8%B1%A1%E7%B1%BBHttpServlet\"><span class=\"toc-text\">抽象类HttpServlet</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ServletRequest\"><span class=\"toc-text\">ServletRequest</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ServletResponse\"><span class=\"toc-text\">ServletResponse</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Session\"><span class=\"toc-text\">Session</span></a></li></ol></li></ol>","author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/74120250?spm_id_from=333.1007.0.0"},"rss":{"icon":"/svg/rss.svg","link":"atom.xml"},"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Java Spring","uid":"2131252b43aa75d3feeb9162c4eec1e2","slug":"Java-Spring","date":"2023-10-05T08:13:00.000Z","updated":"2023-11-01T14:28:50.010Z","comments":true,"path":"api/articles/Java-Spring.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/spring.jpeg","text":"什么是SpringSpring是一个开发的生态圈，它提供了若干个项目，每个项目可以完成独立的功能。开发者可以选择其中的一个或多个项目来使用其提供的功能，以完成开...","permalink":"/post/Java-Spring","photos":[],"count_time":{"symbolsCount":"34k","symbolsTime":"31 mins."},"categories":[{"name":"Java","slug":"Java","count":6,"path":"api/categories/Java.json"}],"tags":[{"name":"Web开发","slug":"Web开发","count":3,"path":"api/tags/Web开发.json"},{"name":"Spring","slug":"Spring","count":2,"path":"api/tags/Spring.json"},{"name":"Java","slug":"Java","count":6,"path":"api/tags/Java.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/74120250?spm_id_from=333.1007.0.0"},"rss":{"icon":"/svg/rss.svg","link":"atom.xml"},"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true},"next_post":{"title":"STM32入门（八）：定时器","uid":"3255a3c7fdb01a732e78ce23940a0d52","slug":"STM32入门（八）：定时器","date":"2023-09-17T09:22:52.000Z","updated":"2023-09-29T09:35:05.370Z","comments":true,"path":"api/articles/STM32入门（八）：定时器.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/STM32cover.png","text":"有时会在单片机中需要等待一段时间再执行的命令。我们有两种方式实现，一种是让CPU空转，另一种是使用定时器。空转的方式会浪费CPU资源，且时间准确度很低（由于AR...","permalink":"/post/STM32入门（八）：定时器","photos":[],"count_time":{"symbolsCount":"24k","symbolsTime":"22 mins."},"categories":[{"name":"嵌入式","slug":"嵌入式","count":8,"path":"api/categories/嵌入式.json"}],"tags":[{"name":"STM32","slug":"STM32","count":8,"path":"api/tags/STM32.json"},{"name":"单片机","slug":"单片机","count":8,"path":"api/tags/单片机.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/74120250?spm_id_from=333.1007.0.0"},"rss":{"icon":"/svg/rss.svg","link":"atom.xml"},"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true}}