{"title":"STM32入门（八）：定时器","uid":"3255a3c7fdb01a732e78ce23940a0d52","slug":"STM32入门（八）：定时器","date":"2023-09-17T09:22:52.000Z","updated":"2023-09-29T09:35:05.370Z","comments":true,"path":"api/articles/STM32入门（八）：定时器.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/STM32cover.png","content":"<p>有时会在单片机中需要等待一段时间再执行的命令。我们有两种方式实现，一种是让CPU空转，另一种是使用定时器。空转的方式会浪费CPU资源，且时间准确度很低（由于ARM使用流水线的原因），而定时器则不会。本文主要介绍定时器的使用。</p>\n<h2 id=\"定时器的基本原理\"><a href=\"#定时器的基本原理\" class=\"headerlink\" title=\"定时器的基本原理\"></a>定时器的基本原理</h2><p>基本上就是一个带有自动重装载的16位累加计数器，计数器的时钟通过一<br>个预分频器得到。当计数器的值达到设定值时，就会加载重装载值到计数器，并触发相应操作。</p>\n<h2 id=\"定时器的分类\"><a href=\"#定时器的分类\" class=\"headerlink\" title=\"定时器的分类\"></a>定时器的分类</h2><p>一共有三个大类：<strong>常规定时器</strong>、<strong>专用定时器</strong>和<strong>内核定时器</strong>。</p>\n<ul>\n<li>常规定时器<ul>\n<li>基本定时器</li>\n<li>通用定时器</li>\n<li>高级定时器</li>\n</ul>\n</li>\n<li>专用定时器<ul>\n<li>窗口看门狗</li>\n<li>独立看门狗</li>\n<li>实时时钟（RTC）</li>\n<li>低功耗定时器</li>\n</ul>\n</li>\n<li>内核定时器<ul>\n<li>系统定时器（SysTick）</li>\n</ul>\n</li>\n</ul>\n<p>本文介绍常规定时器。</p>\n<h2 id=\"定时器计数模式\"><a href=\"#定时器计数模式\" class=\"headerlink\" title=\"定时器计数模式\"></a>定时器计数模式</h2><h3 id=\"向上计数模式\"><a href=\"#向上计数模式\" class=\"headerlink\" title=\"向上计数模式\"></a>向上计数模式</h3><p>在向上计数模式中，计数器从0计数到自动加载值(TIMx_ARR计数器的内容)，然后重新从0开始计数并且产生一个计数器溢出事件。每次计数器溢出时可以产生更新事件（也可以不产生哦）。</p>\n<h3 id=\"向下计数模式\"><a href=\"#向下计数模式\" class=\"headerlink\" title=\"向下计数模式\"></a>向下计数模式</h3><p>在向下模式中，计数器从自动装入的值(TIMx_ARR计数器的值)开始向下计数到0，然后从自动装入的值重新开始并且产生一个计数器向下溢出事件。每次计数器溢出时可以产生更新事件（也可以不产生哦）。</p>\n<h3 id=\"中央对齐模式（向上-向下计数模式）\"><a href=\"#中央对齐模式（向上-向下计数模式）\" class=\"headerlink\" title=\"中央对齐模式（向上/向下计数模式）\"></a>中央对齐模式（向上/向下计数模式）</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在这个模式，不能写入TIMx_CR1中的DIR方向位。它由硬件更新并指示当前的计数方向。</p></blockquote>\n<p>在中央对齐模式，计数器从0开始计数到自动加载的值(TIMx_ARR寄存器)−1，产生一个计数器溢出事件，然后向下计数到1并且产生一个计数器下溢事件；然后再从0开始重新计数。可以在每次计数上溢和每次计数下溢时产生更新事件（也可以不产生哦）；</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>关于更新事件：</strong> <br>当发生一次更新事件时，所有寄存器会被更新：</p>\n<ol>\n<li>传送预装载值(TIMx_PSC寄存器的内容)至预分频器的缓冲区</li>\n<li>自动重装载影子寄存器被更新为预装载值(TIMx_ARR)。</li>\n</ol>\n<p>(通过软件或使用从模式控制器)设置TIMx_EGR寄存器的UG位也可以产生更新事件。设置TIMx_CR1中的UDIS位可以禁止产生更新事件。</p>\n<p><strong>关于中断/DMA请求：</strong><br>配置中断使能寄存器(TIMx_DIER)UDE位后，每次更新事件会产生一个DMA请求。配置UIE位后，每次更新事件会产生一个更新中断。另外，如果设置了TIMx_CR1寄存器中的URS(选择更新请求)（用来决定UG位产生的更新事件对中断/DMA请求有没有用的），设置UG位可以产生一次更新事件UEV，但不设置UIF标志(即没有中断或DMA请求)，此时上溢下溢仍然会设置UIF标志哦。</p></blockquote>\n<h2 id=\"常规定时器\"><a href=\"#常规定时器\" class=\"headerlink\" title=\"常规定时器\"></a>常规定时器</h2><p>不同的芯片的定时器个数等等都不一样，但是基本原理都是一样的。这里以STM32F103为例。</p>\n<p>常规定时器的共同点包括：</p>\n<ol>\n<li>都支持16位的计数器位数</li>\n<li>都支持向上计数</li>\n<li>分频系数都是1~65535</li>\n</ol>\n<p><strong>溢出时间计算</strong></p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"43.415ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 19189.4 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(617,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(485,0)\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1057,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(1947.5,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(3003.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(617,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(704,0)\"><path data-c=\"1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1208,0)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2259,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2831,0)\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3591,0)\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4272,0)\"><path data-c=\"1D43E\" d=\"M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(7541.8,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8542.1,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8931.1,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(9682.1,0)\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(10327.1,0)\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11309.3,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(12309.5,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(12809.5,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(13420.7,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(14420.9,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(14809.9,0)\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(15559.9,0)\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(16318.9,0)\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(17300.2,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(18300.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(18800.4,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></p>\n<p>其中 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.375ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.766ex\" height=\"1.906ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -677 4316.4 842.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(617,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(704,0)\"><path data-c=\"1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1208,0)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2259,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2831,0)\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3591,0)\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4272,0)\"><path data-c=\"1D43E\" d=\"M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z\"></path></g></g></g></g></g></svg></mjx-container> 是TIMxCLK的时钟间隔，单位为ms。</p>\n<h3 id=\"基本定时器\"><a href=\"#基本定时器\" class=\"headerlink\" title=\"基本定时器\"></a>基本定时器</h3><p><strong>TIM6、TIM7</strong></p>\n<p>用途：没有输入输出通道，常用做定时功能。</p>\n<h4 id=\"主要特性\"><a href=\"#主要特性\" class=\"headerlink\" title=\"主要特性\"></a>主要特性</h4><ol>\n<li>是一个16位的递增计数器</li>\n<li>16位的预分频器</li>\n<li>可用于触发DAC（数字模拟转换器）的转换</li>\n<li>在更新事件时产生中断/DMA请求</li>\n<li>挂载在APB1总线上</li>\n</ol>\n<img src=\"/img/基本定时器.png\">\n\n<p><strong>寄存器</strong>：</p>\n<ol>\n<li>TIMx_CNT：计数器寄存器</li>\n<li>TIMx_PSC：预分频器寄存器</li>\n<li>TIMx_ARR：自动重装载寄存器</li>\n<li>TIMx_CR1：控制寄存器1(包含计数器使能位CEN、自动重装载预加载使能位ARPE、更新请求源位URS、禁止更新位UDIS)</li>\n<li>TIMx_CR2：控制寄存器2(MMS主模式选择)</li>\n<li>TIMx_DIER：DMA/中断使能寄存器</li>\n<li>TIMx_SR：状态寄存器(UIF中断状态)</li>\n<li>TIMx_EGR：事件生成寄存器(UG位用于产生更新事件)</li>\n</ol>\n<p>计数模式仅仅支持<strong>向上计数模式</strong>。</p>\n<p>自动重装载寄存器是预加载的，每次读写自动重装载寄存器时，实际上是通过读写预加载寄存器实现。根据<strong>TIMx_CR1寄存器中的自动重装载预加载使能位(ARPE)<strong>（用来指示预加载寄存器内容是否立刻生效的啦），写入预加载寄存器的内容能够</strong>立即</strong>或在<strong>每次更新事件时</strong>，传送到它的影子寄存器。计数器<strong>由预分频输出CK_CNT驱动</strong>，设置TIMx_CR1寄存器中的计数器使能位(CEN)使能计数器计数。</p>\n<p>预分频可以以系数介于<strong>1至65536之间的任意数值</strong>对计数器时钟分频。它是通过一个16位寄存器(TIMx_PSC)的计数实现分频。因为TIMx_PSC控制寄存器具有缓冲，可以在运行过程中改变它的数值，新的预分频数值将在<strong>下一个更新事件</strong>时起作用。</p>\n<p><strong>TIMxCLK频率</strong>：由于其挂载在APB1总线上，所以其时钟（TIMxCLK）频率与APB1总线的时钟频率相关。具体频率需要查看时钟树的相关设置<a href=\"/post/STM32%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E6%97%B6%E9%92%9F%E9%85%8D%E7%BD%AE#%E6%97%B6%E9%92%9F%E7%B3%BB%E7%BB%9F%E5%88%9D%E5%A7%8B%E5%8C%96\">HAL_StatusTypeDef Stm32_Clock_Init();</a> 。</p>\n<h4 id=\"基本定时器配置步骤\"><a href=\"#基本定时器配置步骤\" class=\"headerlink\" title=\"基本定时器配置步骤\"></a>基本定时器配置步骤</h4><ol>\n<li>配置定时器基础工作参数：HAL_TIM_Base_Init()</li>\n<li>定时器基础MSP初始化：HAL_TIM_Base_MspInit()，配置NVIC和时钟</li>\n<li>使能更新中断并启动计数器：HAL_TIM_Base_Start_IT()</li>\n<li>设置优先级使能中断：HAL_NVIC_SetPriority()和HAL_NVIC_EnableIRQ()</li>\n<li>编写中断服务函数：TIMx_IRQHandler()→HAL_TIM_IRQHandler()</li>\n<li>编写定时器更新中断服务函数：HAL_TIM_PeriodElapsedCallback()</li>\n</ol>\n<h4 id=\"基本定时器的应用-延时\"><a href=\"#基本定时器的应用-延时\" class=\"headerlink\" title=\"基本定时器的应用:延时\"></a>基本定时器的应用:延时</h4><p><a href=\"/post/STM32%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E6%97%B6%E9%92%9F%E9%85%8D%E7%BD%AE#%E6%97%B6%E9%92%9F%E7%B3%BB%E7%BB%9F%E5%88%9D%E5%A7%8B%E5%8C%96\">HAL_StatusTypeDef Stm32_Clock_Init();</a><br><a href=\"/post/STM32%E5%85%A5%E9%97%A8%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9AGPIO#GPIO%E5%88%9D%E5%A7%8B%E5%8C%96\">void LED_Init();</a></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stm32f1xx_hal.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">HAL_StatusTypeDef</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Stm32_Clock_Init</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">LED_Init</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">BaseTim_Init</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">arr</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">psc</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">//基本定时器初始化函数</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> TIM_HandleTypeDef g_timx_handle;</span><span style=\"color: #6A9955\">//定时器句柄</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_Init</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">                     // 初始化HAL库</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">Stm32_Clock_Init</span><span style=\"color: #D4D4D4\">(RCC_PLL_MUL9);</span><span style=\"color: #6A9955\"> // 初始化时钟</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">LED_Init</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">                     // 初始化LED外设</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">BaseTim_Init</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">7199</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">4999</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">       // 初始化基本定时器，定时时间为500ms</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">LED1_OFF</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">BaseTim_Init</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">arr</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">psc</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">g_timx_handle</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Instance</span><span style=\"color: #D4D4D4\"> = TIM6;</span><span style=\"color: #6A9955\">      // 指定定时器为TIM6</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">g_timx_handle</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Init</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Prescaler</span><span style=\"color: #D4D4D4\"> = psc;</span><span style=\"color: #6A9955\"> // 设置预分频系数</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    // g_timx_handle.Init.CounterMode = TIM_COUNTERMODE_UP;//该项在基本定时器中无用，如果设置最好设置为TIM_COUNTERMODE_UP</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">g_timx_handle</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Init</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Period</span><span style=\"color: #D4D4D4\"> = arr;</span><span style=\"color: #6A9955\">       // 设置自动重装载寄存器周期的值</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_TIM_Base_Init</span><span style=\"color: #D4D4D4\">(&amp;g_timx_handle);</span><span style=\"color: #6A9955\">     // 初始化定时器</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_TIM_Base_Start_IT</span><span style=\"color: #D4D4D4\">(&amp;g_timx_handle);</span><span style=\"color: #6A9955\"> // 开启定时器中断并且启动定时器</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">HAL_TIM_Base_MspInit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">TIM_HandleTypeDef</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">htim</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\"> // 定时器硬件初始化：配置NVIC和时钟</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">htim</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">Instance</span><span style=\"color: #D4D4D4\"> == TIM6)</span><span style=\"color: #6A9955\"> /// 定时器判断，如果有多个定时器，这个判断很有必要</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">__HAL_RCC_TIM6_CLK_ENABLE</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">           // 使能TIM6时钟</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_NVIC_SetPriority</span><span style=\"color: #D4D4D4\">(TIM6_IRQn, </span><span style=\"color: #B5CEA8\">4</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\"> // 设置TIM6中断优先级</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_NVIC_EnableIRQ</span><span style=\"color: #D4D4D4\">(TIM6_IRQn);</span><span style=\"color: #6A9955\">         // 开启TIM6中断</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">TIM6_IRQHandler</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\"> // 定时器中断服务函数</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_TIM_IRQHandler</span><span style=\"color: #D4D4D4\">(&amp;g_timx_handle);</span><span style=\"color: #6A9955\"> // 调用HAL库中断处理公用函数</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">HAL_TIM_PeriodElapsedCallback</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">TIM_HandleTypeDef</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">htim</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\"> // 被HAL_TIM_IRQHandler()调用</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">htim</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">Instance</span><span style=\"color: #D4D4D4\"> == TIM6)</span><span style=\"color: #6A9955\"> // 定时器判断，如果有多个定时器，这个判断很有必要</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">LED0_TOGGLE</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\"> // 一些功能</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h3 id=\"通用定时器\"><a href=\"#通用定时器\" class=\"headerlink\" title=\"通用定时器\"></a>通用定时器</h3><p><strong>TIM2、TIM3、TIM4、TIM5</strong></p>\n<p>用途：有输入输出通道，可用于输入捕获、输出比较。也可用作定时。</p>\n<h4 id=\"主要特性-1\"><a href=\"#主要特性-1\" class=\"headerlink\" title=\"主要特性\"></a>主要特性</h4><ol>\n<li>是一个16位的递增、递减、中心对齐计数器</li>\n<li>16位的预分频器</li>\n<li>有4个独立的通道，可用于输入捕获、输出比较、PWM输出、单脉冲模式输出</li>\n<li>可用于触发ADC（模数转换器）/DAC（数字模拟转换器）的转换</li>\n<li>在更新事件、触发事件、捕获/比较事件时产生中断/DMA请求</li>\n<li>使用外部信号定时器且可实现多个定时器互联的同步电路（级联）</li>\n<li>支持编码器和霍尔传感器电路</li>\n<li>挂载在APB1总线上</li>\n</ol>\n<img src=\"/img/通用定时器.png\">\n\n<p><strong>寄存器</strong>：</p>\n<ol>\n<li>TIMx_CNT：计数器寄存器</li>\n<li>TIMx_PSC：预分频器寄存器</li>\n<li>TIMx_ARR：自动重装载寄存器</li>\n<li>TIMx_CR1：控制寄存器1(包含计数器使能位CEN、自动重装载预加载使能位ARPE、更新请求源位URS、禁止更新位UDIS、方向位DIR、中央对齐模式选择位CMS、单脉冲模式选择位OPM)</li>\n<li>TIMx_CR2：控制寄存器2(MMS主模式选择)</li>\n<li>TIMx_SMCR：从模式控制寄存器</li>\n<li>TIMx_DIER：DMA/中断使能寄存器</li>\n<li>TIMx_SR：状态寄存器(UIF中断状态)</li>\n<li>TIMx_EGR：事件生成寄存器(UG位用于产生更新事件)</li>\n<li>TIMx_CCMRx：捕获/比较模式寄存器</li>\n<li>TIMx_CCER：捕获/比较使能寄存器</li>\n<li>TIMx_CCRx：捕获/比较寄存器</li>\n<li>TIMx_DCR：DMA控制寄存器</li>\n<li>TIMx_DMAR：连续模式的DMA地址</li>\n</ol>\n<p>计数模式支持<strong>向上计数模式</strong>、<strong>向下计数模式</strong>、<strong>中央对齐模式</strong>。</p>\n<p>自动重装载寄存器是预加载的，每次读写自动重装载寄存器时，实际上是通过读写预加载寄存器实现。根据<strong>TIMx_CR1寄存器中的自动重装载预加载使能位(ARPE)<strong>（用来指示预加载寄存器内容是否立刻生效的啦），写入预加载寄存器的内容能够</strong>立即</strong>或在<strong>每次更新事件时</strong>，传送到它的影子寄存器。计数器<strong>由预分频输出CK_CNT驱动</strong>，设置TIMx_CR1寄存器中的计数器使能位(CEN)使能计数器计数。</p>\n<p>预分频可以以系数介于<strong>1至65536之间的任意数值</strong>对计数器时钟分频。它是通过一个16位寄存器(TIMx_PSC)的计数实现分频。因为TIMx_PSC控制寄存器具有缓冲，可以在运行过程中改变它的数值，新的预分频数值将在<strong>下一个更新事件</strong>时起作用。</p>\n<p><strong>TIMxCLK频率</strong>：由于其挂载在APB1总线上，所以其时钟（TIMxCLK）频率与APB1总线的时钟频率相关。具体频率需要查看时钟树的相关设置<a href=\"/post/STM32%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E6%97%B6%E9%92%9F%E9%85%8D%E7%BD%AE#%E6%97%B6%E9%92%9F%E7%B3%BB%E7%BB%9F%E5%88%9D%E5%A7%8B%E5%8C%96\">HAL_StatusTypeDef Stm32_Clock_Init();</a> 。</p>\n<h4 id=\"时钟选择\"><a href=\"#时钟选择\" class=\"headerlink\" title=\"时钟选择\"></a>时钟选择</h4><p>计数器时钟可由下列时钟源提供：</p>\n<ol>\n<li>内部时钟(CK_INT)</li>\n<li>外部时钟模式1：外部输入脚(TIx)</li>\n<li>外部时钟模式2：外部触发输入(ETR)</li>\n<li>内部触发输入(ITRx)：使用一个定时器作为另一个定时器的预分频器，如可以配置一个定时<br>器Timer1而作为另一个定时器Timer2的预分频器。</li>\n</ol>\n<p><strong>内部时钟</strong>：预分频器的时钟就由内部时钟CK_INT提供。(TIMx_SMCR寄存器的SMS=000,ECE=0)</p>\n<p><strong>外部时钟模式1</strong>：计数器可以在选定输入端的每个上升沿或下降沿计数。(TIMx_SMCR寄存器的SMS=111)</p>\n<img src=\"/img/外部时钟模式1.png\">\n\n<p><strong>外部时钟模式2</strong>：计数器能够在外部触发ETR的每一个上升沿或下降沿计数。(TIMx_SMCR寄存器中的ECE=1)</p>\n<img src=\"/img/外部时钟模式2.png\">\n\n<p><strong>内部触发输入</strong>：</p>\n<img src=\"/img/内部触发输入.png\">\n\n\n<h4 id=\"输入捕获模式\"><a href=\"#输入捕获模式\" class=\"headerlink\" title=\"输入捕获模式\"></a>输入捕获模式</h4><p>在输入捕获模式下，当检测到ICx信号上相应的边沿后，计数器的当前值被锁存到捕获/比较寄存器(TIMx_CCRx)中。当捕获事件发生时，相应的CCxIF标志(TIMx_SR寄存器)被置’1’，如果使能了中断或者DMA操作，则将产生中断或者DMA操作。如果捕获事件发生时CCxIF标志已经为高，那么重复捕获标志CCxOF(TIMx_SR寄存器)被置’1’。写CCxIF=0可清除CCxIF，或读取存储在TIMx_CCRx寄存器中的捕获数据也可清除CCxIF。写CCxOF=0可清除CCxOF。</p>\n<img src=\"/img/捕获比较通道输入.png\">\n\n<p><img src=\"/img/捕获比较通道主电路1.png\"><img src=\"/img/捕获比较通道主电路2.png\"></p>\n<p>以下例子说明如何在TI1输入的上升沿时捕获计数器的值到TIMx_CCR1寄存器中，步骤如下：</p>\n<ol>\n<li>选择有效输入端：TIMx_CCR1必须连接到TI1输入，所以写入TIMx_CCR1寄存器中的CC1S=01，只要CC1S不为’00’，通道被配置为输入，并且TM1_CCR1寄存器变为只读。</li>\n<li>根据输入信号的特点，配置输入滤波器为所需的带宽(即输入为TIx时，输入滤波器控制位是TIMx_CCMRx寄存器中的ICxF位)。假设输入信号在最多5个内部时钟周期的时间内抖动，我们须配置滤波器的带宽长于5个时钟周期。因此我们可以(以fDTS频率)连续采样8次，以确认在TI1上一次真实的边沿变换，即在TIMx_CCMR1寄存器中写入IC1F=0011。</li>\n<li>选择TI1通道的有效转换边沿，在TIMx_CCER寄存器中写入CC1P=0(上升沿)。</li>\n<li>配置输入预分频器。在本例中，我们希望捕获发生在每一个有效的电平转换时刻，因此预分频器被禁止(写TIMx_CCMR1寄存器的IC1PS=00)。</li>\n<li>设置TIMx_CCER寄存器的CC1E=1，允许捕获计数器的值到捕获寄存器中。</li>\n<li>如果需要，通过设置TIMx_DIER寄存器中的CC1IE位允许相关中断请求，通过设置TIMx_DIER寄存器中的CC1DE位允许DMA请求。</li>\n</ol>\n<p>当发生一个输入捕获时：</p>\n<ol>\n<li>产生有效的电平转换时，计数器的值被传送到TIMx_CCR1寄存器。</li>\n<li>CC1IF标志被设置(中断标志)。当发生至少2个连续的捕获时，而CC1IF未曾被清除，CC1OF也被置’1’。</li>\n<li>如设置了CC1IE位，则会产生一个中断。</li>\n<li>如设置了CC1DE位，则还会产生一个DMA请求。</li>\n</ol>\n<p>为了处理捕获溢出，建议在读出捕获溢出标志之前读取数据，这是为了避免丢失在读出捕获溢<br>出标志之后和读取数据之前可能产生的捕获溢出信息。</p>\n<p>输入捕获模式配置步骤：</p>\n<ol>\n<li>配置定时器基础工作参数：HAL_TIM_IC_Init()</li>\n<li>定时器输入捕获MSP初始化：HAL_TIM_IC_MspInit()，配置NVIC和时钟、GPIO</li>\n<li>配置输入通道映射、捕获边沿等：HAL_TIM_IC_ConfigChannel()</li>\n<li>设置优先级使能中断：HAL_NVIC_SetPriority()和HAL_NVIC_EnableIRQ()</li>\n<li>使能定时器更新中断：__HAL_TIM_ENABLE_IT()</li>\n<li>使能捕获、捕获中断以及计数器：HAL_TIM_IC_START_IT()</li>\n<li>编写中断服务函数：TIMx_IRQHandler()→HAL_TIM_IRQHandler()</li>\n<li>编写更新中断和捕获回调函数：HAL_TIM_PeriodElapsedCallback()和HAL_TIM_IC_CaptureCallback()</li>\n</ol>\n<p><strong>测量脉冲宽度</strong>：</p>\n<p><a href=\"/post/STM32%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E6%97%B6%E9%92%9F%E9%85%8D%E7%BD%AE#%E6%97%B6%E9%92%9F%E7%B3%BB%E7%BB%9F%E5%88%9D%E5%A7%8B%E5%8C%96\">HAL_StatusTypeDef Stm32_Clock_Init();</a><br><a href=\"/post/STM32%E5%85%A5%E9%97%A8%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9AGPIO#GPIO%E5%88%9D%E5%A7%8B%E5%8C%96\">void LED_Init();</a><br><a href=\"/post/STM32%E5%85%A5%E9%97%A8%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9AGPIO#GPIO%E5%88%9D%E5%A7%8B%E5%8C%96\">void LED0_TOGGLE();</a><br><a href=\"/post/STM32%E5%85%A5%E9%97%A8%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1\">void UART_Init(uint32_t bound);</a><br><a href=\"/post/STM32%E5%85%A5%E9%97%A8%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1\">void print(char *str);</a><br><a href=\"/post/STM32%E5%85%A5%E9%97%A8%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1\">void printn(char *str, uint32_t n);</a></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stm32f1xx_hal.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">HAL_StatusTypeDef</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Stm32_Clock_Init</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">UART_Init</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">bound</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">LED_Init</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">print</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">str</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">printn</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">str</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">n</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">LED0_TOGGLE</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">extern</span><span style=\"color: #D4D4D4\"> TIM_HandleTypeDef htimx;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">extern</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">uint16_t</span><span style=\"color: #D4D4D4\"> capture;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">extern</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> status ;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">GeneralTim_Init</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">arr</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">psc</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">//通用定时器初始化函数</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_Init</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">                     // 初始化HAL库</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">Stm32_Clock_Init</span><span style=\"color: #D4D4D4\">(RCC_PLL_MUL9);</span><span style=\"color: #6A9955\"> // 初始化时钟</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">LED_Init</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">                     // 初始化LED</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">UART_Init</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">115200</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">              // 初始化串口波特率为115200</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">GeneralTim_Init</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">0XFFFF</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">71</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">    // 初始化定时器5，自动重装值为0XFFFF，预分频系数为71</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> time = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (status &amp; (</span><span style=\"color: #B5CEA8\">1U</span><span style=\"color: #D4D4D4\"> &lt;&lt; </span><span style=\"color: #B5CEA8\">31U</span><span style=\"color: #D4D4D4\">))</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #DCDCAA\">print</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"capture:\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> temp = (status &amp; </span><span style=\"color: #B5CEA8\">0X3FFFFFFF</span><span style=\"color: #D4D4D4\">) * </span><span style=\"color: #B5CEA8\">0XFFFF</span><span style=\"color: #D4D4D4\"> + capture;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">str</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">16</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #569CD6\">uint8_t</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (temp)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #9CDCFE\">str</span><span style=\"color: #D4D4D4\">[i] = temp % </span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\"> + </span><span style=\"color: #CE9178\">'0'</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                ++i;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                temp /= </span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (i)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                --i;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #DCDCAA\">printn</span><span style=\"color: #D4D4D4\">(&amp;</span><span style=\"color: #9CDCFE\">str</span><span style=\"color: #D4D4D4\">[i], </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #DCDCAA\">print</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D7BA7D\">\\r\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            status = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        time++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (time % </span><span style=\"color: #B5CEA8\">20</span><span style=\"color: #D4D4D4\"> == </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #DCDCAA\">LED0_TOGGLE</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (time % </span><span style=\"color: #B5CEA8\">500</span><span style=\"color: #D4D4D4\"> == </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #DCDCAA\">print</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Hello World!</span><span style=\"color: #D7BA7D\">\\r\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_Delay</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">TIM_HandleTypeDef htimx;</span><span style=\"color: #6A9955\">//定时器句柄</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">uint16_t</span><span style=\"color: #D4D4D4\"> capture = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\"> // 捕获值</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> status = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">  // 捕获状态,bit31:捕获完成标志，bit30:捕获到高电平标志</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">GeneralTim_Init</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">arr</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">psc</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\"> // arr为自动重装值，psc为预分频值</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">htimx</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Instance</span><span style=\"color: #D4D4D4\"> = TIM5;</span><span style=\"color: #6A9955\">                       // 定时器5</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">htimx</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Init</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Prescaler</span><span style=\"color: #D4D4D4\"> = psc;</span><span style=\"color: #6A9955\">                  // 预分频值</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">htimx</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Init</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Period</span><span style=\"color: #D4D4D4\"> = arr;</span><span style=\"color: #6A9955\">                     // 自动重装值</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">htimx</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Init</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">CounterMode</span><span style=\"color: #D4D4D4\"> = TIM_COUNTERMODE_UP;</span><span style=\"color: #6A9955\"> // 向上计数</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_TIM_IC_Init</span><span style=\"color: #D4D4D4\">(&amp;htimx);</span><span style=\"color: #6A9955\">                     // 初始化输入捕获</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    TIM_IC_InitTypeDef sConfigIC = {</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">};</span><span style=\"color: #6A9955\">                          // 定义输入捕获初始化结构体</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">sConfigIC</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">ICPolarity</span><span style=\"color: #D4D4D4\"> = TIM_ICPOLARITY_RISING;</span><span style=\"color: #6A9955\">                // 上升沿捕获</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">sConfigIC</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">ICSelection</span><span style=\"color: #D4D4D4\"> = TIM_ICSELECTION_DIRECTTI;</span><span style=\"color: #6A9955\">            // 映射到TI1上</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">sConfigIC</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">ICPrescaler</span><span style=\"color: #D4D4D4\"> = TIM_ICPSC_DIV1;</span><span style=\"color: #6A9955\">                      // 不分频</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">sConfigIC</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">ICFilter</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">                                      // 不滤波</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_TIM_IC_ConfigChannel</span><span style=\"color: #D4D4D4\">(&amp;htimx, &amp;sConfigIC, TIM_CHANNEL_1);</span><span style=\"color: #6A9955\"> // 配置通道1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">__HAL_TIM_ENABLE_IT</span><span style=\"color: #D4D4D4\">(&amp;htimx, TIM_IT_UPDATE);</span><span style=\"color: #6A9955\"> // 使能更新中断</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_TIM_IC_Start_IT</span><span style=\"color: #D4D4D4\">(&amp;htimx, TIM_CHANNEL_1);</span><span style=\"color: #6A9955\"> // 开启输入捕获中断</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">HAL_TIM_IC_MspInit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">TIM_HandleTypeDef</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">htim</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">htim</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">Instance</span><span style=\"color: #D4D4D4\"> == TIM5)</span><span style=\"color: #6A9955\"> // TIM5</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        GPIO_InitTypeDef GPIO_InitStruct = {</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">};</span><span style=\"color: #6A9955\">       // 定义GPIO初始化结构体</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">GPIO_InitStruct</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Pin</span><span style=\"color: #D4D4D4\"> = GPIO_PIN_0;</span><span style=\"color: #6A9955\">             // PA0</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">GPIO_InitStruct</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Mode</span><span style=\"color: #D4D4D4\"> = GPIO_MODE_AF_PP;</span><span style=\"color: #6A9955\">       // 复用推挽输出</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">GPIO_InitStruct</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Pull</span><span style=\"color: #D4D4D4\"> = GPIO_PULLDOWN;</span><span style=\"color: #6A9955\">         // 下拉</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">GPIO_InitStruct</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Speed</span><span style=\"color: #D4D4D4\"> = GPIO_SPEED_FREQ_HIGH;</span><span style=\"color: #6A9955\"> // 速度可以不设置</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">__HAL_RCC_GPIOA_CLK_ENABLE</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">                 // 使能GPIOA时钟</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">__HAL_RCC_TIM5_CLK_ENABLE</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">                  // 使能TIM5时钟</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_GPIO_Init</span><span style=\"color: #D4D4D4\">(GPIOA, &amp;GPIO_InitStruct);</span><span style=\"color: #6A9955\">       // 初始化GPIOA0</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_NVIC_SetPriority</span><span style=\"color: #D4D4D4\">(TIM5_IRQn, </span><span style=\"color: #B5CEA8\">4</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">        // 设置TIM5中断优先级，注意要比SysTick_IRQn的优先级高</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_NVIC_EnableIRQ</span><span style=\"color: #D4D4D4\">(TIM5_IRQn);</span><span style=\"color: #6A9955\">                // 开启TIM5中断</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">TIM5_IRQHandler</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_TIM_IRQHandler</span><span style=\"color: #D4D4D4\">(&amp;htimx);</span><span style=\"color: #6A9955\"> // 调用HAL库TIM中断处理公用函数</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">HAL_TIM_IC_CaptureCallback</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">TIM_HandleTypeDef</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">htim</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">htim</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">Instance</span><span style=\"color: #D4D4D4\"> == TIM5)</span><span style=\"color: #6A9955\"> // TIM5</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">htim</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">Channel</span><span style=\"color: #D4D4D4\"> == HAL_TIM_ACTIVE_CHANNEL_1)</span><span style=\"color: #6A9955\"> // 通道1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (status &amp; (</span><span style=\"color: #B5CEA8\">1U</span><span style=\"color: #D4D4D4\"> &lt;&lt; </span><span style=\"color: #B5CEA8\">31U</span><span style=\"color: #D4D4D4\">))</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">else</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (status &amp; (</span><span style=\"color: #B5CEA8\">1U</span><span style=\"color: #D4D4D4\"> &lt;&lt; </span><span style=\"color: #B5CEA8\">30U</span><span style=\"color: #D4D4D4\">))</span><span style=\"color: #6A9955\"> // 捕获过上升沿，捕获到了下降沿</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                    status |= (</span><span style=\"color: #B5CEA8\">1U</span><span style=\"color: #D4D4D4\"> &lt;&lt; </span><span style=\"color: #B5CEA8\">31U</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">                                               // 标记成功捕获到下降沿</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                    capture = </span><span style=\"color: #DCDCAA\">HAL_TIM_ReadCapturedValue</span><span style=\"color: #D4D4D4\">(htim, TIM_CHANNEL_1);</span><span style=\"color: #6A9955\">            // 读取捕获值</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                    </span><span style=\"color: #DCDCAA\">TIM_RESET_CAPTUREPOLARITY</span><span style=\"color: #D4D4D4\">(htim, TIM_CHANNEL_1);</span><span style=\"color: #6A9955\">                      // 重置捕获极性</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                    </span><span style=\"color: #DCDCAA\">TIM_SET_CAPTUREPOLARITY</span><span style=\"color: #D4D4D4\">(htim, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);</span><span style=\"color: #6A9955\"> // 设置为上升沿捕获</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #C586C0\">else</span><span style=\"color: #6A9955\"> // 首次捕获上升沿</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                    status = (</span><span style=\"color: #B5CEA8\">1U</span><span style=\"color: #D4D4D4\"> &lt;&lt; </span><span style=\"color: #B5CEA8\">30U</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                    capture = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                    </span><span style=\"color: #DCDCAA\">__HAL_TIM_DISABLE</span><span style=\"color: #D4D4D4\">(htim);</span><span style=\"color: #6A9955\">                                              // 关闭定时器</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                    </span><span style=\"color: #DCDCAA\">__HAL_TIM_SET_COUNTER</span><span style=\"color: #D4D4D4\">(htim, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">                                       // 计数器清零</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                    </span><span style=\"color: #DCDCAA\">TIM_RESET_CAPTUREPOLARITY</span><span style=\"color: #D4D4D4\">(htim, TIM_CHANNEL_1);</span><span style=\"color: #6A9955\">                       // 重置捕获极性</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                    </span><span style=\"color: #DCDCAA\">TIM_SET_CAPTUREPOLARITY</span><span style=\"color: #D4D4D4\">(htim, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);</span><span style=\"color: #6A9955\"> // 设置为下降沿捕获</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                    </span><span style=\"color: #DCDCAA\">__HAL_TIM_ENABLE</span><span style=\"color: #D4D4D4\">(htim);</span><span style=\"color: #6A9955\">                                               // 使能定时器</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">                    //其实这样写有一个问题，从捕获到上升沿到重新启动定时器，这段时间内的脉宽会被忽略，可以采用更好的方式解决，在这里就不做更改了。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">HAL_TIM_PeriodElapsedCallback</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">TIM_HandleTypeDef</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">htim</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">htim</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">Instance</span><span style=\"color: #D4D4D4\"> == TIM5)</span><span style=\"color: #6A9955\"> // TIM5</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (status &amp; (</span><span style=\"color: #B5CEA8\">1U</span><span style=\"color: #D4D4D4\"> &lt;&lt; </span><span style=\"color: #B5CEA8\">31U</span><span style=\"color: #D4D4D4\">))</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            ;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">else</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            status++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h4 id=\"输出比较模式\"><a href=\"#输出比较模式\" class=\"headerlink\" title=\"输出比较模式\"></a>输出比较模式</h4><p>此项功能是用来控制一个输出波形，或者指示一段给定的的时间已经到时。</p>\n<img src=\"/img/捕获比较通道输出.png\">\n\n<p>当计数器与捕获/比较寄存器的内容相同时，输出比较功能做如下操作：</p>\n<ol>\n<li>将输出比较模式(TIMx_CCMRx寄存器中的OCxM位)和输出极性(TIMx_CCER寄存器中的CCxP位)定义的值输出到对应的引脚上。在比较匹配时，输出引脚可以保持它的电平(OCxM=000)、被设置成有效电平(OCxM=001)、被设置成无效电平(OCxM=010)或进行翻转(OCxM=011)。</li>\n<li>设置中断状态寄存器中的标志位(TIMx_SR寄存器中的CCxIF位)。</li>\n<li>若设置了相应的中断屏蔽(TIMx_DIER寄存器中的CCxIE位)，则产生一个中断。</li>\n<li>若设置了相应的使能位(TIMx_DIER寄存器中的CCxDE位，TIMx_CR2寄存器中的CCDS位选择DMA请求功能)，则产生一个DMA请求。</li>\n</ol>\n<p>TIMx_CCMRx中的OCxPE位选择TIMx_CCRx寄存器是否需要使用预装载寄存器。在输出比较模式下，更新事件UEV对OCxREF和OCx输出没有影响。同步的精度可以达到计数器的一个计数周期。输出比较模式(在单脉冲模式下)也能用来输出一个单脉冲。</p>\n<p>输出比较模式的配置步骤：</p>\n<ol>\n<li>选择计数器时钟(内部，外部，预分频器)</li>\n<li>将相应的数据写入TIMx_ARR和TIMx_CCRx寄存器中</li>\n<li>如果要产生一个中断请求和/或一个DMA请求，设置CCxIE位和/或CCxDE位。</li>\n<li>选择输出模式，例如当计数器CNT与CCRx匹配时翻转OCx的输出引脚，CCRx预装载未用，开启OCx输出且高电平有效，则必须设置OCxM=’011’、OCxPE=’0’、CCxP=’0’和CCxE=’1’。</li>\n<li>设置TIMx_CR1寄存器的CEN位启动计数器TIMx_CCRx寄存器能够在任何时候通过软件进行更新以控制输出波形，条件是未使用预装载寄存器(OCxPE=’0’，否则TIMx_CCRx影子寄存器只能在发生下一次更新事件时被更新)。</li>\n</ol>\n<h4 id=\"PWM输出模式\"><a href=\"#PWM输出模式\" class=\"headerlink\" title=\"PWM输出模式\"></a>PWM输出模式</h4><p>在TIMx_CCMRx寄存器中的OCxM位写入’110’(PWM模式1)或’111’(PWM模式2)，能够独立地设置每个OCx输出通道产生一路PWM。必须设置TIMx_CCMRx寄存器OCxPE位以使能相应的预装载寄存器，最后还要设置TIMx_CR1寄存器的ARPE位，(在向上计数或中心对称模式中)使能自动重装载的预装载寄存器。</p>\n<p>OCx的极性可以通过软件在TIMx_CCER寄存器中的CCxP位设置，它可以设置为高电平有效或低电平有效。TIMx_CCER寄存器中的CCxE位控制OCx输出使能。详见TIMx_CCERx寄存器的描述。</p>\n<p>PWM输出模式配置步骤：</p>\n<ol>\n<li>配置定时器基础工作参数：HAL_TIM_PWM_Init()</li>\n<li>定时器基础MSP初始化：HAL_TIM_PWM_MspInit()，配置NVIC和时钟、GPIO</li>\n<li>配置PWM模式/比较值：HAL_TIM_PWM_ConfigChannel()</li>\n<li>使能更新中断并启动计数器：HAL_TIM_PWM_Start()</li>\n<li>配置修改占空比（可选）： __HAL_TIM_SET_COMPARE()</li>\n<li>使能通道预装载（可选）：__HAL_TIM_ENABLE_OCx_PRELOAD()</li>\n</ol>\n<p><strong>呼吸灯</strong></p>\n<p><a href=\"/post/STM32%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E6%97%B6%E9%92%9F%E9%85%8D%E7%BD%AE#%E6%97%B6%E9%92%9F%E7%B3%BB%E7%BB%9F%E5%88%9D%E5%A7%8B%E5%8C%96\">HAL_StatusTypeDef Stm32_Clock_Init();</a></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stm32f1xx_hal.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">HAL_StatusTypeDef</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Stm32_Clock_Init</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">extern</span><span style=\"color: #D4D4D4\"> TIM_HandleTypeDef htimx;</span><span style=\"color: #6A9955\">//通用定时器句柄</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">GeneralTim_Init</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">arr</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">psc</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">//通用定时器初始化函数</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_Init</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">                     // 初始化HAL库</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">Stm32_Clock_Init</span><span style=\"color: #D4D4D4\">(RCC_PLL_MUL9);</span><span style=\"color: #6A9955\"> // 初始化时钟</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">GeneralTim_Init</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">499</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">71</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">       // 初始化通用定时器，周期为0.5ms</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    _Bool flag = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">unsigned</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> pwmval = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_Delay</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (flag)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            pwmval++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">else</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            pwmval--;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (pwmval == </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            flag = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (pwmval == </span><span style=\"color: #B5CEA8\">300</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            flag = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">__HAL_TIM_SET_COMPARE</span><span style=\"color: #D4D4D4\">(&amp;htimx, TIM_CHANNEL_2, pwmval);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">TIM_HandleTypeDef htimx;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">GeneralTim_Init</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">arr</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">psc</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\"> // arr为自动重装值，psc为预分频值</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    TIM_OC_InitTypeDef sConfigOC = {</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">};</span><span style=\"color: #6A9955\">                           // 定义输出比较结构体</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">htimx</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Instance</span><span style=\"color: #D4D4D4\"> = TIM3;</span><span style=\"color: #6A9955\">                                        // 定时器3</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">htimx</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Init</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Prescaler</span><span style=\"color: #D4D4D4\"> = psc;</span><span style=\"color: #6A9955\">                                   // 预分频值</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">htimx</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Init</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Period</span><span style=\"color: #D4D4D4\"> = arr;</span><span style=\"color: #6A9955\">                                      // 自动重装值</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">htimx</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Init</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">CounterMode</span><span style=\"color: #D4D4D4\"> = TIM_COUNTERMODE_UP;</span><span style=\"color: #6A9955\">                  // 向上计数</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_TIM_PWM_Init</span><span style=\"color: #D4D4D4\">(&amp;htimx);</span><span style=\"color: #6A9955\">                                     // 初始化PWM，调用HAL_TIM_PWM_MspInit()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">sConfigOC</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">OCMode</span><span style=\"color: #D4D4D4\"> = TIM_OCMODE_PWM1;</span><span style=\"color: #6A9955\">                           // PWM模式1，即向上计数时TIMx_CNT&lt;TIMx_CCRx时输出有效电平</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">sConfigOC</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Pulse</span><span style=\"color: #D4D4D4\"> = arr / </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">                                    // 占空比为50%，之后可用__HAL_TIM_SET_COMPARE()修改</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">sConfigOC</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">OCPolarity</span><span style=\"color: #D4D4D4\"> = TIM_OCPOLARITY_LOW;</span><span style=\"color: #6A9955\">                    // 配置CC1P为1，即有效电平为低电平</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_TIM_PWM_ConfigChannel</span><span style=\"color: #D4D4D4\">(&amp;htimx, &amp;sConfigOC, TIM_CHANNEL_2);</span><span style=\"color: #6A9955\"> // 配置PWM通道</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_TIM_PWM_Start</span><span style=\"color: #D4D4D4\">(&amp;htimx, TIM_CHANNEL_2);</span><span style=\"color: #6A9955\">                     // 开启PWM</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">HAL_TIM_PWM_MspInit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">TIM_HandleTypeDef</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">htim</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">//通用定时器硬件初始化：配置NVIC和时钟、GPIO</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">htim</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">Instance</span><span style=\"color: #D4D4D4\"> == TIM3)</span><span style=\"color: #6A9955\"> // TIM3</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">        // 因为TIM3_CH2可通过重映射连接到LED所在的PB5，所以配置GPIOB5重映射为TIM3_CH2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        GPIO_InitTypeDef GPIO_InitStruct = {</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">};</span><span style=\"color: #6A9955\">       // 定义GPIO初始化结构体</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">GPIO_InitStruct</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Pin</span><span style=\"color: #D4D4D4\"> = GPIO_PIN_5;</span><span style=\"color: #6A9955\">             // PB5</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">GPIO_InitStruct</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Mode</span><span style=\"color: #D4D4D4\"> = GPIO_MODE_AF_PP;</span><span style=\"color: #6A9955\">       // 推挽复用功能</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">GPIO_InitStruct</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Pull</span><span style=\"color: #D4D4D4\"> = GPIO_PULLUP;</span><span style=\"color: #6A9955\">           // 上拉</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">GPIO_InitStruct</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Speed</span><span style=\"color: #D4D4D4\"> = GPIO_SPEED_FREQ_HIGH;</span><span style=\"color: #6A9955\"> // 高速</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">__HAL_RCC_GPIOB_CLK_ENABLE</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">                 // 使能GPIOB时钟</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">__HAL_RCC_TIM3_CLK_ENABLE</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">                  // 使能TIM3时钟</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_GPIO_Init</span><span style=\"color: #D4D4D4\">(GPIOB, &amp;GPIO_InitStruct);</span><span style=\"color: #6A9955\">       // 初始化GPIOB5</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">__HAL_RCC_AFIO_CLK_ENABLE</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">                  // 使能AFIO时钟</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">__HAL_AFIO_REMAP_TIM3_PARTIAL</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">              // 重映射TIM3_CH2到PB5</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h4 id=\"计时\"><a href=\"#计时\" class=\"headerlink\" title=\"计时\"></a>计时</h4><p><strong>基本定时功能</strong>：和基本定时器的配置步骤类似，可以参考基本定时器的配置步骤。不同在于通用定时器的句柄（依然是 TIM_HandleType）可配置性更强，可配置的参数（可实现的功能）更多。</p>\n<p>由于通用定时器的时钟源可以来自内部也可以来自外部，因此比基本定时器的功能稍多，如果要使用外部时钟，还需要配置外部时钟源。如果不使用外部时钟，那么通用定时器的配置步骤和基本定时器的配置步骤是一样的（仅仅是名称里的数字如TIM2、TIM6这样的差别）。</p>\n<p><strong>如果使用的是外部时钟模式</strong>：</p>\n<ol>\n<li>配置定时器基础工作参数：HAL_TIM_IC_Init()</li>\n<li>定时器输入捕获MSP初始化：HAL_TIM_IC_MspInit()，配置NVIC和时钟、GPIO</li>\n<li>配置定时器从模式：HAL_TIM_SlaveConfigSynchro()</li>\n<li>使能输入捕获并启动计数器：HAL_TIM_IC_Start()</li>\n<li>获取计数器值：__HAL_TIM_GET_COUNTER()</li>\n<li>设置计数器值：__HAL_TIM_SET_COUNTER()</li>\n</ol>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">GeneralTim_Init</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">arr</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">psc</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">htimx</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Instance</span><span style=\"color: #D4D4D4\"> = TIM2;</span><span style=\"color: #6A9955\">                       // 定时器2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">htimx</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Init</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Prescaler</span><span style=\"color: #D4D4D4\"> = psc;</span><span style=\"color: #6A9955\">                  // 预分频系数</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">htimx</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Init</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">CounterMode</span><span style=\"color: #D4D4D4\"> = TIM_COUNTERMODE_UP;</span><span style=\"color: #6A9955\"> // 向上计数</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">htimx</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Init</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Period</span><span style=\"color: #D4D4D4\"> = arr;</span><span style=\"color: #6A9955\">                     // 自动重装载值</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_TIM_IC_Init</span><span style=\"color: #D4D4D4\">(&amp;htimx);</span><span style=\"color: #6A9955\">                     // 初始化定时器</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    TIM_SlaveConfigTypeDef sSlaveConfig = {</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">sSlaveConfig</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">SlaveMode</span><span style=\"color: #D4D4D4\"> = TIM_SLAVEMODE_EXTERNAL1;</span><span style=\"color: #6A9955\">          // 选择外部时钟模式</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">sSlaveConfig</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">InputTrigger</span><span style=\"color: #D4D4D4\"> = TIM_TS_TI1FP1;</span><span style=\"color: #6A9955\">                 // 选择TI1FP1作为输入触发源</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">sSlaveConfig</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">TriggerPolarity</span><span style=\"color: #D4D4D4\"> = TIM_TRIGGERPOLARITY_RISING;</span><span style=\"color: #6A9955\"> // 选择上升沿触发</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">sSlaveConfig</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">TriggerFilter</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">                            // 不滤波</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_TIM_SlaveConfigSynchronization</span><span style=\"color: #D4D4D4\">(&amp;htimx, &amp;sSlaveConfig);</span><span style=\"color: #6A9955\"> // 配置定时器2为从模式</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_TIM_IC_Start</span><span style=\"color: #D4D4D4\">(&amp;htimx, TIM_CHANNEL_1);</span><span style=\"color: #6A9955\"> // 开启通道1的输入捕获</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">HAL_TIM_IC_MspInit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">TIM_HandleTypeDef</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">htim</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">htim</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">Instance</span><span style=\"color: #D4D4D4\"> == TIM2)</span><span style=\"color: #6A9955\"> // 如果是定时器2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">__HAL_RCC_TIM2_CLK_ENABLE</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">  // 使能定时器2时钟</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">__HAL_RCC_GPIOA_CLK_ENABLE</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\"> // 使能GPIOA时钟</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        GPIO_InitTypeDef GPIO_InitStruct = {</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">GPIO_InitStruct</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Pin</span><span style=\"color: #D4D4D4\"> = GPIO_PIN_0;</span><span style=\"color: #6A9955\">             // 指定要初始化的引脚</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">GPIO_InitStruct</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Mode</span><span style=\"color: #D4D4D4\"> = GPIO_MODE_AF_PP;</span><span style=\"color: #6A9955\">       // 指定引脚模式为复用推挽输出</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">GPIO_InitStruct</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Pull</span><span style=\"color: #D4D4D4\"> = GPIO_PULLDOWN;</span><span style=\"color: #6A9955\">         // 指定引脚上下拉为下拉</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">GPIO_InitStruct</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Speed</span><span style=\"color: #D4D4D4\"> = GPIO_SPEED_FREQ_HIGH;</span><span style=\"color: #6A9955\"> // 指定引脚速度为高速</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_GPIO_Init</span><span style=\"color: #D4D4D4\">(GPIOA, &amp;GPIO_InitStruct);</span><span style=\"color: #6A9955\">       // 初始化PA0引脚</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span></code></pre></div><h3 id=\"高级定时器\"><a href=\"#高级定时器\" class=\"headerlink\" title=\"高级定时器\"></a>高级定时器</h3><p><strong>TIM1、TIM8</strong></p>\n<p>用途：有输入输出通道，可用于输入捕获、输出比较。可用于带死区控制的互补信号输出、刹车输入。也可用于定时。（电机控制、数字电源控制）</p>\n<h4 id=\"主要特性-2\"><a href=\"#主要特性-2\" class=\"headerlink\" title=\"主要特性\"></a>主要特性</h4><ol>\n<li>是一个16位的递增、递减、中心对齐计数器</li>\n<li>16位的预分频器</li>\n<li>有4个独立的通道，可用于输入捕获、输出比较、PWM输出、单脉冲模式输出</li>\n<li>可用于触发ADC（模数转换器）/DAC（数字模拟转换器）的转换</li>\n<li>在更新事件、触发事件、捕获/比较事件时产生中断/DMA请求</li>\n<li>使用外部信号定时器且可实现多个定时器互联的同步电路（级联）</li>\n<li>支持编码器和霍尔传感器电路</li>\n<li>挂载在APB2总线上</li>\n<li>带有重复计数器</li>\n<li>死区时间带可编程的互补输出</li>\n<li>断路输入，用于将定时器的输出信号置于用户可选的安全配置中。</li>\n</ol>\n<img src=\"/img/高级定时器1.png\">\n<img src=\"/img/高级定时器2.png\">\n<img src=\"/img/高级定时器3.png\">\n<img src=\"/img/高级定时器4.png\">\n\n<p><strong>寄存器</strong>：</p>\n<ol>\n<li>TIMx_CNT：计数器寄存器</li>\n<li>TIMx_PSC：预分频器寄存器 </li>\n<li>TIMx_ARR：自动装载寄存器 </li>\n<li>TIMx_RCR：重复次数寄存器 </li>\n<li>TIMx_CR1：控制寄存器1</li>\n<li>TIMx_CR2：控制寄存器2</li>\n<li>TIMx_SMCR：从模式控制寄存器</li>\n<li>TIMx_DIER：DMA/中断使能寄存器</li>\n<li>TIMx_SR：状态寄存器</li>\n<li>TIMx_EGR：事件生成寄存器</li>\n<li>TIMx_CCMR1：通道1和通道2的捕获/比较模式寄存器</li>\n<li>TIMx_CCMR2：通道3和通道4的捕获/比较模式寄存器</li>\n<li>TIMx_CCER：捕获/比较使能寄存器</li>\n<li>TIMx_CCR1：捕获/比较寄存器1</li>\n<li>TIMx_CCR2：捕获/比较寄存器2</li>\n<li>TIMx_CCR3：捕获/比较寄存器3</li>\n<li>TIMx_CCR4：捕获/比较寄存器4</li>\n<li>TIMx_BDTR：断路器寄存器</li>\n<li>TIMx_DCR：DMA控制寄存器</li>\n<li>TIMx_DMAR：DMA地址寄存器</li>\n</ol>\n<p>计数模式支持<strong>向上计数模式</strong>、<strong>向下计数模式</strong>、<strong>中央对齐模式</strong>。</p>\n<p>自动重装载寄存器是预加载的，每次读写自动重装载寄存器时，实际上是通过读写预加载寄存器实现。根据<strong>TIMx_CR1寄存器中的自动重装载预加载使能位(ARPE)<strong>（用来指示预加载寄存器内容是否立刻生效的啦），写入预加载寄存器的内容能够</strong>立即</strong>或在<strong>每次更新事件时</strong>，传送到它的影子寄存器。计数器<strong>由预分频输出CK_CNT驱动</strong>，设置TIMx_CR1寄存器中的计数器使能位(CEN)使能计数器计数。</p>\n<p>预分频可以以系数介于<strong>1至65536之间的任意数值</strong>对计数器时钟分频。它是通过一个16位寄存器(TIMx_PSC)的计数实现分频。因为TIMx_PSC控制寄存器具有缓冲，可以在运行过程中改变它的数值，新的预分频数值将在<strong>下一个更新事件</strong>时起作用。</p>\n<p>在高级计数器中，计数器上溢/下溢时更新事件(UEV)<strong>只能在重复计数达到0的时候产生</strong>。重复计数器在下述任一条件成立时递减：</p>\n<ol>\n<li><strong>向上计数模式下每次计数器溢出时</strong> </li>\n<li><strong>向下计数模式下每次计数器下溢时</strong></li>\n<li><strong>中央对齐模式下每次上溢和每次下溢时</strong>。虽然这样限制了PWM的最大循环周期为128，但它能够在每个PWM周期2次更新占空比。在中央对齐模式下，因为波形是对称的，如果每个PWM周期中仅刷新一次比较寄存器，则最大的分辨率为2xTck。</li>\n</ol>\n<p><strong>重复计数器是自动加载的</strong>，重复速率是由TIMx_RCR寄存器的值定义。当更新事件由软件产生(通过设置TIMx_EGR 中的UG位)或者通过硬件的从模式控制器产生，则无论重复计数器的值是多少，立即发生更新事件，并且TIMx_RCR寄存器中的内容被重载入到重复计数器。</p>\n<p><strong>TIMxCLK频率</strong>：由于其挂载在APB2总线上，所以其时钟（TIMxCLK）频率与APB1总线的时钟频率相关。具体频率需要查看时钟树的相关设置<a href=\"/post/STM32%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E6%97%B6%E9%92%9F%E9%85%8D%E7%BD%AE#%E6%97%B6%E9%92%9F%E7%B3%BB%E7%BB%9F%E5%88%9D%E5%A7%8B%E5%8C%96\">HAL_StatusTypeDef Stm32_Clock_Init();</a>。</p>\n<p>高级定时器输出指定个数PWM波形的配置步骤：</p>\n<ol>\n<li>配置定时器基础工作参数：HAL_TIM_PWM_Init()</li>\n<li>定时器基础MSP初始化：HAL_TIM_PWM_MspInit()，配置NVIC和时钟、GPIO</li>\n<li>配置PWM模式/比较值：HAL_TIM_PWM_ConfigChannel()</li>\n<li>设置优先级使能中断：HAL_NVIC_SetPriority()和HAL_NVIC_EnableIRQ()</li>\n<li>使能定时器更新中断：__HAL_TIM_ENABLE_IT()</li>\n<li>使能输出、主输出和计数器：HAL_TIM_PWM_Start()</li>\n<li>编写中断服务函数：TIMx_IRQHandler()→HAL_TIM_IRQHandler()</li>\n<li>编写更新中断函数：HAL_TIM_PeriodElapsedCallback()</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>高级定时器输出必须把MOE位设置为1，否则无法输出。</p></blockquote>\n<p><a href=\"/post/STM32%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E6%97%B6%E9%92%9F%E9%85%8D%E7%BD%AE#%E6%97%B6%E9%92%9F%E7%B3%BB%E7%BB%9F%E5%88%9D%E5%A7%8B%E5%8C%96\">HAL_StatusTypeDef Stm32_Clock_Init();</a><br><a href=\"/post/STM32%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E4%B8%AD%E6%96%AD\">void KEY_Init();</a></p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stm32f1xx_hal.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">HAL_StatusTypeDef </span><span style=\"color: #DCDCAA\">Stm32_Clock_Init</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">KEY_Init</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">AdvancedTim_Init</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">arr</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">psc</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">update_pwm_num</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">uint8_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">num</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_Init</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">                   // 初始化HAL库</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">Stm32_Clock_Init</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">           // 初始化时钟</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">KEY_Init</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">                   // 初始化按键</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">AdvancedTim_Init</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">4999</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">7199</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\"> // 初始化定时器8，自动重装值为4999，预分频系数为7199</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 配置PE5为输入引脚，避免冲突</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    GPIO_InitTypeDef GPIO_InitStruct = {</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">GPIO_InitStruct</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Pin</span><span style=\"color: #D4D4D4\"> = GPIO_PIN_5;</span><span style=\"color: #6A9955\">       // 指定要初始化的引脚</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">GPIO_InitStruct</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Pull</span><span style=\"color: #D4D4D4\"> = GPIO_PULLUP;</span><span style=\"color: #6A9955\">     // 上拉输入</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">GPIO_InitStruct</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Mode</span><span style=\"color: #D4D4D4\"> = GPIO_MODE_INPUT;</span><span style=\"color: #6A9955\"> // 指定引脚模式为推挽输出</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">__HAL_RCC_GPIOE_CLK_ENABLE</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">           // 使能GPIOE时钟</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_GPIO_Init</span><span style=\"color: #D4D4D4\">(GPIOE, &amp;GPIO_InitStruct);</span><span style=\"color: #6A9955\"> // 初始化PE5引脚</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_Delay</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">TIM_HandleTypeDef htimx;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">uint8_t</span><span style=\"color: #D4D4D4\"> num_pwm = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">AdvancedTim_Init</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">arr</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">psc</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">htimx</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Instance</span><span style=\"color: #D4D4D4\"> = TIM8;</span><span style=\"color: #6A9955\"> // TIM8</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">htimx</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Init</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Prescaler</span><span style=\"color: #D4D4D4\"> = psc;</span><span style=\"color: #6A9955\">//</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">htimx</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Init</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">CounterMode</span><span style=\"color: #D4D4D4\"> = TIM_COUNTERMODE_UP;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">htimx</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Init</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Period</span><span style=\"color: #D4D4D4\"> = arr;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">htimx</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Init</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">RepetitionCounter</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_TIM_PWM_Init</span><span style=\"color: #D4D4D4\">(&amp;htimx);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    TIM_OC_InitTypeDef TIM_OCInitStructure;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">TIM_OCInitStructure</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">OCMode</span><span style=\"color: #D4D4D4\"> = TIM_OCMODE_PWM1;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">TIM_OCInitStructure</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Pulse</span><span style=\"color: #D4D4D4\"> = arr / </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">TIM_OCInitStructure</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">OCPolarity</span><span style=\"color: #D4D4D4\"> = TIM_OCPOLARITY_HIGH;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_TIM_PWM_ConfigChannel</span><span style=\"color: #D4D4D4\">(&amp;htimx, &amp;TIM_OCInitStructure, TIM_CHANNEL_1);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">__HAL_TIM_ENABLE_IT</span><span style=\"color: #D4D4D4\">(&amp;htimx, TIM_IT_UPDATE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_TIM_PWM_Start</span><span style=\"color: #D4D4D4\">(&amp;htimx, TIM_CHANNEL_1);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">HAL_TIM_PWM_MspInit</span><span style=\"color: #D4D4D4\">(TIM_HandleTypeDef *</span><span style=\"color: #9CDCFE\">htim</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">htim</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">Instance</span><span style=\"color: #D4D4D4\"> == TIM8)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        GPIO_InitTypeDef GPIO_Initure;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">__HAL_RCC_TIM8_CLK_ENABLE</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">  // 使能TIM8时钟</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">__HAL_RCC_GPIOC_CLK_ENABLE</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\"> // 开启GPIOC时钟</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">GPIO_Initure</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Pin</span><span style=\"color: #D4D4D4\"> = GPIO_PIN_6;</span><span style=\"color: #6A9955\">        // PC6</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">GPIO_Initure</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Mode</span><span style=\"color: #D4D4D4\"> = GPIO_MODE_AF_PP;</span><span style=\"color: #6A9955\">  // 复用推挽输出</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">GPIO_Initure</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Pull</span><span style=\"color: #D4D4D4\"> = GPIO_PULLUP;</span><span style=\"color: #6A9955\">      // 上拉</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">GPIO_Initure</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Speed</span><span style=\"color: #D4D4D4\"> = GPIO_SPEED_HIGH;</span><span style=\"color: #6A9955\"> // 高速</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_GPIO_Init</span><span style=\"color: #D4D4D4\">(GPIOC, &amp;GPIO_Initure);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_NVIC_SetPriority</span><span style=\"color: #D4D4D4\">(TIM8_UP_IRQn, </span><span style=\"color: #B5CEA8\">4</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\"> // 设置中断优先级，抢占优先级4，子优先级0</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_NVIC_EnableIRQ</span><span style=\"color: #D4D4D4\">(TIM8_UP_IRQn);</span><span style=\"color: #6A9955\">         // 开启TIM8_UP_IRQn中断</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">update_pwm_num</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">uint8_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">num</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (num == </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    num_pwm = num;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_TIM_GenerateEvent</span><span style=\"color: #D4D4D4\">(&amp;htimx, TIM_EVENTSOURCE_UPDATE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">__HAL_TIM_ENABLE</span><span style=\"color: #D4D4D4\">(&amp;htimx);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">TIM8_UP_IRQHandler</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_TIM_IRQHandler</span><span style=\"color: #D4D4D4\">(&amp;htimx);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">HAL_TIM_PeriodElapsedCallback</span><span style=\"color: #D4D4D4\">(TIM_HandleTypeDef *</span><span style=\"color: #9CDCFE\">htim</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">htim</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">Instance</span><span style=\"color: #D4D4D4\"> == TIM8)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (num_pwm)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">TIM8</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">RCR</span><span style=\"color: #D4D4D4\"> = num_pwm - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #DCDCAA\">HAL_TIM_GenerateEvent</span><span style=\"color: #D4D4D4\">(&amp;htimx, TIM_EVENTSOURCE_UPDATE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #DCDCAA\">__HAL_TIM_ENABLE</span><span style=\"color: #D4D4D4\">(&amp;htimx);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            num_pwm = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">else</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #6A9955\">// __HAL_TIM_DISABLE(&amp;htimx);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">TIM8</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">CR1</span><span style=\"color: #D4D4D4\"> &amp;= ~(TIM_CR1_CEN);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>记一个奇怪的问题：我本来想使用串口通信来实现改变PWM波形个数，但是发现串口通信会导致定时器不能输出PWM。具体原因完全没有找到。以下是具体情况：</p>\n<ol>\n<li>上述代码在正常情况下：复位后仅仅输出一个PWM波形就会被关闭，按下按键后会开启并输出指定数量的PWM波形后关闭。不输出PWM的时候引脚为高电平。</li>\n<li>如果删除KEY_Init();，即不初始化按键，则复位后不会输出PWM波形，引脚为低电平❓。</li>\n<li>如果添加UART_Init(115200);，即初始化串口通信，则复位后不会输出PWM波形，引脚为低电平，按下按键也不会有任何反应❓。</li>\n<li>如果在删除KEY_Init();的情况下，添加UART_Init(115200);，则复位后不会输出PWM波形，引脚为低电平❓。</li>\n<li>在KEY_Init()函数中，如果仅仅初始化PE3一个引脚，设置对应中断，则复位后仅仅输出一个PWM波形就会被关闭，在按下与PE3相连的按键时会产生对应数量的PWM波形，不输出PWM的时候引脚为高电平。</li>\n<li>在KEY_Init()函数中，如果仅仅初始化PA0一个引脚，不设置任何中断，则复位后不会输出PWM波形，引脚为低电平❓。</li>\n<li>在KEY_Init()函数中，如果仅仅初始化PE3一个引脚，不设置任何中断，则复位后仅仅输出一个PWM波形就会被关闭，不输出PWM的时候引脚为高电平。</li>\n</ol>\n<p>目前仍未找到原因。</p></blockquote>\n<h4 id=\"死区控制\"><a href=\"#死区控制\" class=\"headerlink\" title=\"死区控制\"></a>死区控制</h4><p>死区时间是指在两个互补输出之间的时间间隔。死区时间的作用是防止两个互补输出同时处于有效状态，从而导致电流短路。死区时间的大小由TIMx_BDTR寄存器中的DTG[7:0]位和LOCK[1:0]位决定。死区时间的计算公式如下：</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"44.482ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 19661 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(828,0)\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1532,0)\"><path data-c=\"1D43A\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2318,0)\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2596,0)\"><path data-c=\"37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3373.8,0)\"><path data-c=\"3A\" d=\"M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3929.6,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4429.6,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4985.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6041.1,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(6430.1,0)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(7258.1,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(7724.1,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8253.1,0)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8773.1,0)\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(9477.1,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(9822.1,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(10700.1,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11388.3,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(12388.6,0)\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(13092.6,0)\"><path data-c=\"1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(13596.6,0)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(14647.6,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(15219.6,0)\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(15979.6,0)\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(16660.6,0)\"><path data-c=\"1D43E\" d=\"M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(17549.6,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(18160.8,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(19161,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container></p>\n<p>其中，TIMxCLK是定时器的时钟频率，DeadTime是死区时间。死区时间的最大值为255个TIMxCLK周期。死区时间的最小值由LOCK[1:0]位决定.</p>\n<p>死区控制通常用于控制电机的驱动，防止电机的两个相同时刻都处于有效状态，导致电流短路。</p>\n<h4 id=\"断路输入\"><a href=\"#断路输入\" class=\"headerlink\" title=\"断路输入\"></a>断路输入</h4><p>断路输入可以使得定时器的输出信号置于用户可选的安全配置中。断路输入的作用是在定时器输出信号的有效期间，当断路输入信号有效时，立即将定时器输出信号置为无效。断路输入信号可以是外部信号或者内部信号。外部信号可以是TIMx_ETR引脚上的信号或者TIMx_CHx引脚上的信号。内部信号可以是TIMx_TRGO引脚上的信号或者TIMx_ITRy引脚上的信号。</p>\n","feature":true,"text":"有时会在单片机中需要等待一段时间再执行的命令。我们有两种方式实现，一种是让CPU空转，另一种是使用定时器。空转的方式会浪费CPU资源，且时间准确度很低（由于AR...","permalink":"/post/STM32入门（八）：定时器","photos":[],"count_time":{"symbolsCount":"24k","symbolsTime":"22 mins."},"categories":[{"name":"嵌入式","slug":"嵌入式","count":8,"path":"api/categories/嵌入式.json"}],"tags":[{"name":"STM32","slug":"STM32","count":8,"path":"api/tags/STM32.json"},{"name":"单片机","slug":"单片机","count":8,"path":"api/tags/单片机.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">定时器的基本原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">定时器的分类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E6%97%B6%E5%99%A8%E8%AE%A1%E6%95%B0%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">定时器计数模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%91%E4%B8%8A%E8%AE%A1%E6%95%B0%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">向上计数模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%91%E4%B8%8B%E8%AE%A1%E6%95%B0%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">向下计数模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E5%A4%AE%E5%AF%B9%E9%BD%90%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%90%91%E4%B8%8A-%E5%90%91%E4%B8%8B%E8%AE%A1%E6%95%B0%E6%A8%A1%E5%BC%8F%EF%BC%89\"><span class=\"toc-text\">中央对齐模式（向上&#x2F;向下计数模式）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%84%E5%AE%9A%E6%97%B6%E5%99%A8\"><span class=\"toc-text\">常规定时器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E5%AE%9A%E6%97%B6%E5%99%A8\"><span class=\"toc-text\">基本定时器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">主要特性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E5%AE%9A%E6%97%B6%E5%99%A8%E9%85%8D%E7%BD%AE%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">基本定时器配置步骤</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E5%BA%94%E7%94%A8-%E5%BB%B6%E6%97%B6\"><span class=\"toc-text\">基本定时器的应用:延时</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%9A%E7%94%A8%E5%AE%9A%E6%97%B6%E5%99%A8\"><span class=\"toc-text\">通用定时器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7-1\"><span class=\"toc-text\">主要特性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%97%B6%E9%92%9F%E9%80%89%E6%8B%A9\"><span class=\"toc-text\">时钟选择</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%8D%95%E8%8E%B7%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">输入捕获模式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%AF%94%E8%BE%83%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">输出比较模式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#PWM%E8%BE%93%E5%87%BA%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">PWM输出模式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E6%97%B6\"><span class=\"toc-text\">计时</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%AB%98%E7%BA%A7%E5%AE%9A%E6%97%B6%E5%99%A8\"><span class=\"toc-text\">高级定时器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7-2\"><span class=\"toc-text\">主要特性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AD%BB%E5%8C%BA%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">死区控制</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%AD%E8%B7%AF%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">断路输入</span></a></li></ol></li></ol></li></ol>","author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Servlet详解","uid":"00373d310aa46142930357ce33d9554f","slug":"Servlet详解","date":"2023-09-29T09:42:00.000Z","updated":"2023-10-30T11:16:25.061Z","comments":true,"path":"api/articles/Servlet详解.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/web开发.jpeg","text":"在Browser-Server架构的Web应用中，浏览器根据URL请求服务器的资源，浏览器则返回对应的资源给浏览器。这些资源可包括HTML文本，二进制文件等等。...","permalink":"/post/Servlet详解","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"11 mins."},"categories":[{"name":"Java","slug":"Java","count":6,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":6,"path":"api/tags/Java.json"},{"name":"Web开发","slug":"Web开发","count":3,"path":"api/tags/Web开发.json"},{"name":"Servlet","slug":"Servlet","count":1,"path":"api/tags/Servlet.json"},{"name":"Tomcat","slug":"Tomcat","count":1,"path":"api/tags/Tomcat.json"},{"name":"HTTP","slug":"HTTP","count":1,"path":"api/tags/HTTP.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true},"next_post":{"title":"STM32入门（七）：IWDG&WWDG","uid":"66ba1c7d8be31c9521741b1f3e971a8c","slug":"STM32入门（七）：IWDG&WWDG","date":"2023-07-20T10:24:54.000Z","updated":"2023-09-25T16:37:41.401Z","comments":true,"path":"api/articles/STM32入门（七）：IWDG&WWDG.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/STM32cover.png","text":"单片机在运行过程中，由于受到外界干扰或者程序出现错误，导致程序陷入死循环，这时候就需要复位单片机，使其重新运行。单片机复位的方式有多种，比如手动复位、软件复位、...","permalink":"/post/STM32入门（七）：IWDG&WWDG","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"嵌入式","slug":"嵌入式","count":8,"path":"api/categories/嵌入式.json"}],"tags":[{"name":"STM32","slug":"STM32","count":8,"path":"api/tags/STM32.json"},{"name":"单片机","slug":"单片机","count":8,"path":"api/tags/单片机.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true}}