{"title":"Java Spring","uid":"2131252b43aa75d3feeb9162c4eec1e2","slug":"Java-Spring","date":"2023-10-05T08:13:00.000Z","updated":"2023-11-01T14:28:50.010Z","comments":true,"path":"api/articles/Java-Spring.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/spring.jpeg","content":"<h2 id=\"什么是Spring\"><a href=\"#什么是Spring\" class=\"headerlink\" title=\"什么是Spring\"></a>什么是Spring</h2><p>Spring是一个开发的生态圈，它提供了若干个项目，每个项目可以完成独立的功能。开发者可以选择其中的一个或多个项目来使用其提供的功能，以完成开发任务。（即完全在Spring提供的解决方案下，把项目构建出来，并设计开发完成），因此Spring可以简化开发。并提供很高的灵活性和安全性。</p>\n<p>从<a href=\"https://spring.io/projects\">这个页面</a>可以看到Spring生态圈中的各个项目，其中Spring有3个十分重要的项目：Spring Framework、Spring Boot、Spring Cloud：</p>\n<ol>\n<li>Spring Framework，一个底层的，设计型的框架，其他的所有的项目都是依赖Spring Framework执行的。</li>\n<li>Spring Boot，它是一个快速构建项目的框架，让开发者可以在简化开发的基础上更进一步加速开发。在原有的基础上使开发更加简单，写更少的代码。</li>\n<li>Spring Cloud，它是一个分布式开发的框架。</li>\n</ol>\n<h2 id=\"Spring-Framework\"><a href=\"#Spring-Framework\" class=\"headerlink\" title=\"Spring Framework\"></a>Spring Framework</h2><p><img src=\"/img/spring-overview-architecture.png\" alt=\"Spring Framework 架构图\"></p>\n<ul>\n<li>Test：单元测试与集成测试</li>\n<li>Core Container：核心容器</li>\n<li>AOP：面向切面编程</li>\n<li>Aspects：AOP思想实现</li>\n<li>Web：Web开发</li>\n<li>Data Access/Integration：数据访问与集成</li>\n</ul>\n<p>知道Spring Framework是一个项目，想要使用它，就需要引入它的库。将对应的坐标添加到pom.xml中即可，该坐标可在maven中央仓库中复制（带有RELEASE的是稳定版）：</p>\n<div class=\"language-xml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">xml</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">dependency</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">groupId</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">org.springframework</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">groupId</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">artifactId</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">spring-context</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">artifactId</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">version</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">5.2.25.RELEASE</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">version</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">dependency</span><span style=\"color: #808080\">&gt;</span></span></code></pre></div><h3 id=\"Core-Container\"><a href=\"#Core-Container\" class=\"headerlink\" title=\"Core Container\"></a>Core Container</h3><p>Core Container是做什么的呢？在回答这个问题之前需要先了解一个概念：<strong>IoC</strong>。</p>\n<p>试想这样一个场景：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Service</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">final</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">url</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #CE9178\">\"jdbc:mysql://localhost:3306/permission?useSSL=true&amp;serverTimezone=UTC\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">final</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">username</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #CE9178\">\"root\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">final</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">password</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #CE9178\">\"123456\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    ...</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">MyServlet1</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">extends</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">HttpServlet</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">private</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Service</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">service</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Service</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">doGet</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">HttpServletRequest</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">req</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">HttpServletResponse</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">resp</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #569CD6\">throws</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">ServletException</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">IOException</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">long</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">id</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">getFromCookie</span><span style=\"color: #D4D4D4\">(req);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">password</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">service</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">searchPassword</span><span style=\"color: #D4D4D4\">(req);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">MyServlet2</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">extends</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">HttpServlet</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">private</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Service</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">service</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Service</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">doPost</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">HttpServletRequest</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">req</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">HttpServletResponse</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">resp</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #569CD6\">throws</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">ServletException</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">IOException</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">password</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">service</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">searchUsername</span><span style=\"color: #D4D4D4\">(req);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>上述代码中，两个MyServlet类都使用了new来初始化一个Service对象来使用其方法，这样会导致代码的耦合性变高，因为如果该Service类的构造函数被修改了，那么这两个MyServlet类也需要进行修改。而且这两个MyServlet类明明可以使用同一个Service对象啊，每次都new一个系统效率低，但如果一个Service对象被多个组件共享，销毁释放资源又是一个难题。随着更多的组件被引入，组件的依赖关系会越来越复杂，系统效率会不断降低。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>如果一个系统有大量的组件，其生命周期和相互之间的依赖关系如果由组件自身来维护，不但大大增加了系统的复杂度，而且会导致组件之间极为紧密的耦合，继而给测试和维护带来了极大的困难。</p>\n<p><strong>如何解决呢？</strong></p>\n<p><strong>不要使用new产生对象，转而由外部容器产生对象并注入到需要使用的组件中。以此完成解耦！</strong></p>\n</p>\n</div>\n<p><em>IoC：控制反转，把对象的创建交给<strong>外部</strong>，由外部来创建并管理对象。</em></p>\n<p>Spring对IoC进行了实现。其Core Container就是一个IoC容器，也就是IoC思想中的<strong>外部</strong>。被Spring管理的对象称为<strong>Bean</strong>。在Bean和Bean之间建立依赖关系的行为称为<strong>依赖注入</strong>。最终使得在使用对象的时候，不仅可以直接从IoC容器中获取，而且获取到的对象已经自动绑定了所有的依赖。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">哪些Bean适合交给Spring管理？哪些不适合？</p>\n<p>适合适合交给Spring管理：</p>\n<ul>\n<li>表现层对象</li>\n<li>业务层对象</li>\n<li>数据层对象</li>\n<li>工具对象</li>\n</ul>\n<p>不适合交给Spring管理：</p>\n<ul>\n<li>封装实体的域对象</li>\n</ul>\n\n</div>\n<p>了解了上述概念之后，接下来的问题是，在编写了一个类后，如何让Spring来管理它呢？</p>\n<ol>\n<li>在类上添加注解<code>@Component</code>，表示该类是一个Bean，需要被Spring管理。（常用）</li>\n<li>使用xml配置文件，将类的全限定名添加到xml文件中，表示该类是一个Bean，需要被Spring管理。（最原始最底层）</li>\n</ol>\n<p>本文介绍的是第一种方式，即使用注解的方式。</p>\n<p>这是案例的项目结构：</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">├── pom.xml</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">└── src</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    └── main</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        ├── java</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        │   └── org</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        │       └── example</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        │           ├── App.java</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        │           ├── config</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        │           │   └── AppConfiguration.java</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        │           ├── dao</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        │           │   ├── impl</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        │           │   │   └── UserDaoImpl.java</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        │           │   └── UserDao.java</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        │           └── service</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        │               ├── impl</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        │               │   └── UserServiceImpl.java</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        │               └── UserService.java</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        └── resources</span></span></code></pre></div><p>其中：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">//AppConfiguration.java</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">Configuration</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">ComponentScan</span><span style=\"color: #D4D4D4\">({</span><span style=\"color: #CE9178\">\"org.example\"</span><span style=\"color: #D4D4D4\">})</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">//@Import({JdbcConfig.class})</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">//@PropertySource({\"classpath:db.properties\"})</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">AppConfiguration</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Bean</span><span style=\"color: #D4D4D4\">(name = {</span><span style=\"color: #CE9178\">\"UserDao1\"</span><span style=\"color: #D4D4D4\">})</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">UserDao</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">createUserDao1</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">UserDaoImpl</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Bean</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">UserDao</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">createUserDao2</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">UserDaoImpl</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Bean</span><span style=\"color: #D4D4D4\">(name = </span><span style=\"color: #CE9178\">\"UserDao3\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">UserDao</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">createUserDao3</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">UserService</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">userService</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(userService);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">UserDaoImpl</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">//UserDao.java</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">interface</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">UserDao</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">save</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">//UserDaoImpl.java</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">Repository</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"UserDao\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">UserDaoImpl</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">implements</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">UserDao</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">//    @Value(\"${name}\")</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Value</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"AC_ACCELERATOR\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">name</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Value</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"18\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">age</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">save</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"save running...UserDao:\"</span><span style=\"color: #D4D4D4\"> + name + age);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">//UserService.java</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">interface</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">UserService</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">save</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">//UserServiceImpl.java</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">Service</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">Scope</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"singleton\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">UserServiceImpl</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">implements</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">UserService</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Autowired</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Qualifier</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"UserDao1\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">private</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">UserDao</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">userDao</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">save</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">userDao</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">save</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"save running...UserService\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">PostConstruct</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">init</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"init UserService\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">PreDestroy</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">delete</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"delete UserService\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">//App.java</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">App</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\">[] </span><span style=\"color: #9CDCFE\">args</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">AnnotationConfigApplicationContext</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">context</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">AnnotationConfigApplicationContext</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">AppConfiguration</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">class</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">context</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">registerShutdownHook</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">UserService</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">us1</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">context</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">getBean</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">UserService</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">class</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">UserService</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">us2</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">context</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">getBean</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">UserService</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">class</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(us1 == us2);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">UserDao</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">ud1</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">context</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">getBean</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"UserDao1\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">UserDao</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">class</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">UserDao</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">ud2</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">context</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">getBean</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"createUserDao2\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">UserDao</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">class</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">UserDao</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">ud3</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">context</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">getBean</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"UserDao3\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">UserDao</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">class</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(ud1 == ud2);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">us1</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">save</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>运行结果：</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">init UserService</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">org.example.service.impl.UserServiceImpl@145f66e3</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">true</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">false</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">true</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">save running...UserDao:AC_ACCELERATOR18</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">save running...UserService</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">delete UserService</span></span></code></pre></div><p>如何解读这一份代码呢？</p>\n<p>首先先看AppConfiguration.java文件，其中使用了<code>@Configuration</code>注解（这个注解有点复杂最好看<a href=\"https://juejin.cn/post/7189145749618163768\">这篇文章</a>），表示这是一个<strong>全配置类</strong>，这个类与其他类的区别是：在该类中，<code>@Bean</code>注解的工厂方法返回的对象，在IoC容器中仅存在一个，即如果重复调用该工厂方法，则只有第一次会新建对象，后面只会返回第一次生成的那个对象。<code>@ComponentScan({\"org.example\"})</code>表示扫描org.example包下的所有类，如果类上有<code>@Component</code>注解，那么就会被Spring管理（由此，在该包下的所有类就可以通过编写注解来标识自己为bean，让spring管理哦。而且可以看到：”org.example”只是列表中的一项哦，还可以添加很多包哦），如果类上有<code>@Configuration</code>，则会引入该配置类。<code>@Bean</code>注解表示这是一个Bean（手动指定并添加的bean都用这种形式哦，和用<code>@Component</code>标识被自动扫描并添加的bean相对应），Spring会根据这个方法的返回值来生成一个Bean（可以看到在这个例子中，同一个类产生了3个不同的bean哦。其他的第三方库的bean也要通过这种方式加载哦，毕竟大部分第三方库可没有<code>@Component</code>注解给Spring扫描哦），其中<code>name</code>属性表示Bean的id，如果不写，那么默认为方法名（可以看到传入的是一个列表哦，因此一个bean是可以有多个名字的）。<code>@Import</code>注解表示导入其他的类作为配置（可以不被<code>@Configuration</code>注解）（把不同功能的配置分开成一个个文件有利于管理捏），<code>@PropertySource</code>注解表示导入属性文件（之后会介绍具体用途）。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">在配置类中定义的bean要依赖其他的bean怎么办？</p>\n<p><p>UserDao3中，可以看到要依赖一个UserService的bean，因此在参数中写上UserService userService，Spring会自动从IoC容器中，通过类型找到UserService的bean并注入到这个参数中。这种在定义第三方库的bean的时候经常会用到。</p>\n</p>\n</div>\n<p>UserDao.java文件，这个文件是一个接口，其中没有任何注解，表示这个接口不是一个Bean，不需要被Spring管理。实际上任何接口都不需要被Spring管理，只有实现类才需要被Spring管理。同理UserService.java也是一个接口，也不需要任何注解。</p>\n<p>UserDaoImpl.java文件，这个文件是UserDao接口的实现类，其中使用了<code>@Repository(\"UserDao\")</code>注解，表示这是一个Bean，且指定了bean的id为UserDao。<code>@Repository</code>注解和<code>@Component</code>注解是完全一样的，只是换了个写法，能够让人对目前所标识的类的作用有更好的理解。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><code>@Component</code>注解是一个通用的注解，表示这是一个Bean，但是不能够让人对目前所标识的类的作用有更好的理解。因此Spring提供了和<code>@Component</code>注解功能完全一样的注解，但是名字不同。这些注解分别是：</p>\n<ul>\n<li><code>@Repository</code>：表示这是一个数据访问层的Bean</li>\n<li><code>@Service</code>：表示这是一个业务层的Bean</li>\n<li><code>@Controller</code>：表示这是一个表现层的Bean</li>\n</ul>\n\n</div>\n<p><code>@Value</code>注解表示给属性注入<strong>简单类型</strong>的值，其中可以写一个<strong>字符串</strong>表示要注入的值（不论要注入的是数字还是字符串，注解里面都是字符串形式哦）。不过为什么要通过这种方式赋值呢？为什么不直接用<code>=</code>赋值呢？这就要提到配置类中的<code>@PropertySource</code>注解了，有的时候，需要在属性文件中写一些配置信息，然后在代码中读取这些配置信息（包括读取一些第三方jar包内部的属性文件的配置信息），这个时候就可以<em>在配置类中</em>使用<code>@PropertySource</code>注解来导入属性文件，然后<em>在bean中</em>使用<code>@Value</code>注解来读取配置文件中的信息并注入（如被注释掉的那行<code>@Value(\"${name}\") </code>可以读取配置文件中名称为name的那一项）。这样做的好处是，如果配置文件中的信息需要修改，那么只需要修改配置文件，而不需要修改代码，这样就提高了代码的灵活性。</p>\n<p>UserServiceImpl.java文件，这个文件是UserService接口的实现类，其中使用了<code>@Service</code>注解，表示这是一个Bean，没有指定bean的id，则默认为<code>userServiceImpl</code>（注意第一个字母小写）。<code>@Scope(\"singleton\")</code>注解表示这个Bean是单例的，即在IoC容器中只有一个实例（如果换成<code>\"prototype\"</code>则是多例的，从IoC容器中每获得一次该bean都会是不同的实例，这些实例的生命周期也不归IoC容器管。目前不推荐这样使用），不写该注解默认为单例。<code>@Autowired</code>注解表示自动装配（和<code>@Value</code>相对应，不过那个是用来装配常量值的，这个是用来装配引用的），即自动将依赖的Bean注入到当前Bean中，默认通过属性类型自动装配，但如果一个属性类型有多个bean可以采用（如一个接口有多个实现类，亦或是一个类有多个bean），则要加<code>@Qualifier</code>进行指定。由于本例中有多个UserDao的bean可以采用，因此<code>@Qualifier(\"UserDao1\")</code>注解表示 指定Bean的id进行注入。接下来是两个与生命周期有关的两个注解，<code>@PostConstruct</code>注解表示在Bean初始化之后执行的方法，<code>@PreDestroy</code>注解表示在Bean销毁之前执行的方法。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>不论是<code>@Value</code>还是<code>@Autowired</code>，都可以用在属性上，也可以用在setter方法上。<br>而且他们的原理都是通过反射来实现的，因此即使是private也能够注入成功的。</p>\n<p><code>@Autowired</code>不但可以直接写在属性上，还可以写在setter方法上、写在构造方法中</p>\n<p>前两者是setter注入，最后一个是构造器注入。</p>\n</p>\n</div>\n<p><strong>使用setter注入时</strong>：spring构造bean的时候使用反射来调用其无参构造函数（不论是public还是private都能调用），如果没有<strong>无参</strong>构造函数，则会报错。</p>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">依赖注入的方式选择</p>\n<ul>\n<li>必须要有的依赖使用构造器注入，因为<strong>setter注入有可能会导致null对象出现</strong>。</li>\n<li>可选依赖使用setter注入，灵活性强</li>\n<li>spring框架倡导使用构造器注入（更严谨），第三方框架大部分采用构造器注入。</li>\n<li>构造器注入和setter注入可以混合使用。</li>\n<li>如果没有提供setter方法只能使用构造器注入</li>\n<li>自己开发的模块使用setter注入。</li>\n</ul>\n\n</div>\n<p>最后，来看App.java文件，这是这个应用程序的主函数入口。在其中：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">//App.java</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">App</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\">[] </span><span style=\"color: #9CDCFE\">args</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">//传入配置类，并根据配置类创建IoC容器</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">AnnotationConfigApplicationContext</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">context</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">AnnotationConfigApplicationContext</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">AppConfiguration</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">class</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">//注册一个钩子，当程序退出时，自动关闭IoC容器，如果没有这一行`@PreDestroy`注解标识的方法则不会执行，可以不写</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">context</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">registerShutdownHook</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">//从IoC容器中获取Bean，参数是Bean的类型（通过类型获得bean，但如果一个属性类型有多个bean可以采用，则不能使用这种方法）</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">UserService</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">us1</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">context</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">getBean</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">UserService</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">class</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">UserService</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">us2</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">context</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">getBean</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">UserService</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">class</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">//由于UserService是单例的bean，因此us1和us2是同一个对象</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(us1 == us2);</span><span style=\"color: #6A9955\">//true</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">//从IoC容器中获取Bean，参数是Bean的id（通过id获得bean）</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">UserDao</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">ud1</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">context</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">getBean</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"UserDao1\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">UserDao</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">class</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">UserDao</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">ud2</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">context</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">getBean</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"createUserDao2\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">UserDao</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">class</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">UserDao</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">ud3</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">context</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">getBean</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"UserDao3\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">UserDao</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">class</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">UserDao</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">ud4</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">context</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">getBean</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"UserDao1\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">UserDao</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">class</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">//由于UserDao1和UserDao2不是同一个bean，因此ud1和ud2不是同一个对象，但是ud1和ud4是同一个对象，因为UserDao1是单例的bean。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(ud1 == ud2);</span><span style=\"color: #6A9955\">//false</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(ud1 == ud4);</span><span style=\"color: #6A9955\">//true</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">us1</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">save</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">spring的报错信息如何看？</p>\n<p><p>从最后一个Caused by开始看，一般最后一个Caused by是最重要的错误信息。如果最后一个不能明确指明问题，才往前看。</p>\n</p>\n</div>\n<p><strong>如何和JUNIT整合？</strong></p>\n<p>首先在pom.xml中添加依赖，例如：</p>\n<div class=\"language-xml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">xml</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">dependency</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">groupId</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">org.springframework</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">groupId</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">artifactId</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">spring-test</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">artifactId</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">version</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">5.2.25.RELEASE</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">version</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">scope</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">test</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">scope</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">dependency</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">dependency</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">groupId</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">junit</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">groupId</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">artifactId</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">junit</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">artifactId</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">version</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">RELEASE</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">version</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">scope</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">test</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">scope</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">dependency</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">    </span></span></code></pre></div><p>然后在测试类中添加注解：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">RunWith</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">SpringJUnit4ClassRunner</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">class</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">ContextConfiguration</span><span style=\"color: #D4D4D4\">(classes = </span><span style=\"color: #9CDCFE\">AppConfiguration</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">class</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">AppTest</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Autowired</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">private</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">UserService</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">userService</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Test</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">test</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">userService</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">save</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>其中，<code>@RunWith(SpringJUnit4ClassRunner.class)</code>表示使用Spring的单元测试框架，<code>@ContextConfiguration(classes = AppConfiguration.class)</code>表示使用AppConfiguration类作为配置类（特别注意参数使用的是classes）。将要测试的组件通过<code>@Autowired</code>注入到测试类中，然后进行测试。</p>\n<h3 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h3><p>AOP（Aspect Oriented Programming）即面向切面编程。什么是面向切面编程？Spring又是如何实现的呢？</p>\n<h4 id=\"什么是面向切面编程\"><a href=\"#什么是面向切面编程\" class=\"headerlink\" title=\"什么是面向切面编程\"></a>什么是面向切面编程</h4><p>一般来说，编写的代码有两个原则，基于这些原则能让程序结构更加清晰（和AOP无关，只是一种编程建议）：</p>\n<ul>\n<li>职责清晰：一个类只负责一件事；</li>\n<li>易于测试：一次只测一个功能。</li>\n</ul>\n<p>开发者都应该遵循这两个原则来编写代码，使其项目结构清晰更好维护。因此，每一个类都应该被设计为专注完成自己核心的业务逻辑。</p>\n<p>但是整个系统还可能还会要求关注安全检查、日志、事务等功能，比如说在执行业务逻辑前进行安全检查，在业务逻辑执行出现异常的时候进行记录。这样就不得不在每一个业务逻辑片段中都加上几乎重复的代码，还打破了上述的原则：一个类做了不属于自己核心逻辑的事。</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">UserService</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">createUser</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">User</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">user</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">SecurityCheck</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">//安全检查</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">UserManager</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">usermanager</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">GetUserManager</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">try</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">usermanager</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">create</span><span style=\"color: #D4D4D4\">(user);</span><span style=\"color: #6A9955\">//核心业务逻辑</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        } </span><span style=\"color: #C586C0\">catch</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #4EC9B0\">RuntimeException</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">e</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">usermanager</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">rollback</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">//异常处理</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">throw</span><span style=\"color: #D4D4D4\"> e;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">log</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"created user success: \"</span><span style=\"color: #D4D4D4\"> + user);</span><span style=\"color: #6A9955\">//日志</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">deleteUser</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">User</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">user</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">SecurityCheck</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">//安全检查</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">UserManager</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">usermanager</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">GetUserManager</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">try</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">usermanager</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">delete</span><span style=\"color: #D4D4D4\">(user);</span><span style=\"color: #6A9955\">//核心业务逻辑</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        } </span><span style=\"color: #C586C0\">catch</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #4EC9B0\">RuntimeException</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">e</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">usermanager</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">rollback</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">//异常处理</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">throw</span><span style=\"color: #D4D4D4\"> e;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">log</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"deleted user success: \"</span><span style=\"color: #D4D4D4\"> + user);</span><span style=\"color: #6A9955\">//日志</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>如何解决？</p>\n<p>把程序中的共性功能抽取出来：如安全检查、日志等，写成<strong>通知类</strong>，在通知类中，将前面提到的共性功能定义为方法，这些方法称为<strong>通知</strong>。程序中所有的执行方法都被称为<strong>连接点</strong>（能与通知进行连接的入口），但是程序中并不是所有的方法都要执行通知，因此需要定义哪些连接点需要执行通知，即定义<strong>切入点</strong>。<strong>切面</strong>则定义了在哪个切入点执行哪个通知。这就是面向切面编程的思想。</p>\n<p>重新梳理一下概念：</p>\n<ul>\n<li>连接点：程序执行过程中的<strong>任意位置</strong>，在SpringAOP中，连接点是方法执行的位置。</li>\n<li>切入点：匹配连接点的式子（一个切入点可匹配任意个数的连接点）</li>\n<li>通知：在切入点执行的操作（共性功能）</li>\n<li>通知类：定义了通知的类</li>\n<li>切面：描述通知与切入点的对应关系</li>\n</ul>\n<h4 id=\"Spring的AOP\"><a href=\"#Spring的AOP\" class=\"headerlink\" title=\"Spring的AOP\"></a>Spring的AOP</h4><p>要实现AOP，则要解决以下问题：如果获得了UserService的引用，当调用UserService.create()时，如何对调用方法进行拦截，并在拦截前后进行安全检查、日志、事务等处理？</p>\n<p>Spring的AOP实现是基于JVM的动态<strong>代理</strong>。由于JVM的动态代理要求必须实现接口，如果一个普通类没有业务接口，就需要通过CGLIB或者Javassist这些第三方库实现。</p>\n<p>Spring对AOP的实现如下：</p>\n<ol>\n<li>启动IoC容器</li>\n<li>扫描所有的bean（并检查这个bean是不是<strong>切面</strong>）<ul>\n<li>如果是切面，则解析切面，获得切面的通知和切入点</li>\n<li>如果不是切面，则跳过</li>\n</ul>\n</li>\n<li>初始化所有bean，检查bean对应的类中是否有方法匹配到任意切入点。<ul>\n<li>如果没有，则创建对象</li>\n<li>如果有，则创建原始对象的<strong>代理对象</strong>（com.sun.proxy类型）。</li>\n</ul>\n</li>\n</ol>\n<p>这是一个简单的代理模式的案例：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">AProxy</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">implements</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">A</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">private</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">A</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">AProxy</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">A</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">this</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\"> = a;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">a</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">//放置前置通知</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">this</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">a</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">//这里并不是递归哦，而是调用的原始对象的方法。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">//后置通知</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>可以看到，通过代理模式，可以在原始对象的方法执行前后进行一些操作，甚至进行异常处理，这就是Spring AOP的原理。同时也可以说，Spring AOP是实现代理模式的一种方式。</p>\n<p>那如何在Spring中进行AOP开发呢？</p>\n<p>除了之前引入的spring-context（已经包含spring-aop）外，还要引入下面这个spring-aspects。</p>\n<div class=\"language-xml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">xml</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">dependency</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">groupId</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">org.springframework</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">groupId</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">artifactId</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">spring-aspects</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">artifactId</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">version</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">5.2.25.RELEASE</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">version</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">dependency</span><span style=\"color: #808080\">&gt;</span></span></code></pre></div><p>由于spring是个IOC框架，因此也要通过bean来表示AOP的概念，这是一个简单的bean：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">Component</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">Aspect</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">ExampleAOP</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">   @</span><span style=\"color: #4EC9B0\">Pointcut</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"execution(* org.example.service.UserService.save())\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">   </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">pointcut1</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">   }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Before</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"pointcut1()\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">before</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"before\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span></code></pre></div><p>除了<code>@Component</code>注解表示这是一个bean外，还有一个<code>@Aspect</code>注解表示这是一个切面。但要注意，<strong>要使spring能够识别<code>@Aspect</code>注解，还需要给配置类添加<code>@EnableAspectJAutoProxy</code>注解，表示启用AOP。</strong>当spring检查到一个bean有<code>@Aspect</code>注解的时候，就会去检查这个类里面的，与AOP有关的注解。</p>\n<p>在此例中，与AOP有关的注解是<code>@Pointcut</code>，<code>@Before</code>。<code>@Pointcut</code>注解表示定义一个切入点，其中的参数是一个<strong>切点表达式</strong>，表示<strong>匹配哪些连接点</strong>，被修饰的方法没有限制，感觉仅仅是个形式，所以随便写了一个空方法，而且就算这个方法里有代码，也<strong>不会被执行</strong>。</p>\n<p><code>@Before</code>注解的参数也是<strong>切点表达式</strong>，用于指定在切入点执行前执行的通知，在这个例子中，我希望它能在切入点执行前，打印一些东西。</p>\n<p>执行一下，可以发现在执行<code>us1.save()</code>的时候，会先打印出<code>before</code>，然后再执行<code>save()</code>方法里的内容。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>尽管上述例子中，采用了<code>@Pointcut</code>注解来实现切入点的概念，但是别忘了<code>@Before</code>注解的参数也是<strong>切点表达式</strong>，因此可以直接使用<code>@Before</code>注解为<strong>连接点或切入点绑定通知</strong>。但在有的时候，使用<code>@Pointcut</code>注解来定义切入点可以使得代码的耦合性降低。</p></blockquote>\n<p>切点表达式可以匹配连接点，功能强大且复杂，这里详细介绍了<a href=\"https://docs.spring.io/spring-framework/docs/5.2.25.RELEASE/spring-framework-reference/core.html#aop-pointcuts\">切点表达式</a></p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">关于切点表达式该写什么</p>\n<ul>\n<li>一般匹配接口不匹配实现类（降耦合）</li>\n<li>接口大多是<code>public</code>，和切点表达式默认值相同，因此可以省略访问控制修饰符描述</li>\n<li>返回值类型对于增删改类使用精准类型加速匹配，对于查询类则使用<code>*</code>通配快速描述</li>\n<li>包名不要使用<code>..</code>进行匹配，效率太低，可使用<code>*</code>通配符来描述</li>\n<li>接口名/类名书写，与模块相关的采用<code>*</code>匹配，如<code>UserService</code>写成<code>*Service</code></li>\n<li>方法名书写，以动词进行精确匹配，名词采用<code>*</code>匹配</li>\n<li>不使用异常作为匹配规则</li>\n</ul>\n\n</div>\n<p><strong>AOP通知类型</strong></p>\n<ul>\n<li>前置通知：在切入点执行前执行<code>@Before</code></li>\n<li>后置通知：在切入点执行后执行（无论是否抛出异常）<code>@After</code></li>\n<li>环绕通知：在切入点执行前后执行<code>@Around</code></li>\n<li>异常通知：在切入点抛出异常时执行<code>@AfterThrowing</code></li>\n<li>返回后通知：在切入点正常返回后执行（抛异常不执行）<code>@AfterReturning</code></li>\n</ul>\n<p>前置通知和后置通知用法相似，前面已经描述过前置通知，后置通知同理，只不过是在切入点执行后执行。</p>\n<p>返回后通知和后置通知的不同的地方在于，返回后通知只在切入点正常返回后执行，抛异常不执行，而后置通知无论切入点是否抛异常都会执行。</p>\n<p>异常通知的作用是字面意思：在切入点抛出异常时执行。不抛异常不执行。</p>\n<p>重点是环绕通知，这是功能最强大的通知类型。前置通知和后置通知都可以用环绕通知来实现。</p>\n<p>对于这样一个通知类：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">Component</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">Aspect</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">ExampleAOP</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Pointcut</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"execution(void org.example.service.UserService.save())\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">pointcut</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Around</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"pointcut()\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">around</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">ProceedingJoinPoint</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">joinPoint</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #569CD6\">throws</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Throwable</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"before\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">joinPoint</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">proceed</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"after\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>可以看到，被<code>@Around</code>注解的函数的参数是<code>ProceedingJoinPoint</code>类型，这是一个接口，表示连接点。<code>ProceedingJoinPoint</code>接口有一个<code>proceed()</code>方法，表示执行连接点的方法。由于AOP不负责异常处理，因此需要在方法上声明<code>throws Throwable</code>。</p>\n<p>连接点执行是在<code>proceed()</code>方法执行的时候，在<code>proceed()</code>方法之前的代码是前置通知的代码，在<code>proceed()</code>方法之后的代码是后置通知的代码。</p>\n<p><strong>但是</strong>，这是在连接点没有返回值的情况下，如果连接点有返回值，比如这里返回一个int：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">Component</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">Aspect</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">ExampleAOP</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Pointcut</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"execution(int org.example.service.UserService.count())\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">pointcut</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Around</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"pointcut()\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">around</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">ProceedingJoinPoint</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">joinPoint</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #569CD6\">throws</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Throwable</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"before\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">joinPoint</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">proceed</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"after\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>则抛出异常：</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">Exception in thread \"main\" org.springframework.aop.AopInvocationException: Null return value from advice does not match primitive return type for: public abstract int org.example.service.UserService.count()</span></span></code></pre></div><p>根据异常信息，可以看到，通知方法的返回值类型和连接点的返回值类型不匹配，抛出异常。因为<strong>在Spring AOP中，连接点的返回值应该被通知获取，由通知代为返回</strong>。因此，如果连接点有返回值，那么通知方法的返回值类型必须和连接点的返回值类型一致。在这个例子中，通知方法的返回值类型应该是<code>int</code>或者<code>Integer</code>或者<code>Object</code>。<strong>返回值类型和连接点匹配之后，便不会抛异常了</strong>。不仅如此，通知需要获取连接点的返回值，将连接点的返回值返回出去（在通知中可以对返回值进行修改哦），修改后的代码如下：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Around</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"pointcut()\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Object</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">around</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">ProceedingJoinPoint</span><span style=\"color: #D4D4D4\"> joinPoint) throws Throwable {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"before\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">Object</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">ret</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">joinPoint</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">proceed</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">//在这里可以对返回值ret进行处理哦！！！</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"after\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> ret;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span></code></pre></div><div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>在这个例子中，尽管通知的返回值类型是<code>Object</code>类型，但是实际在代理对象中，<code>count()</code>方法的返回类型依然是<code>int</code>没变。</p>\n<p>由于<code>proceed()</code>返回对象的只能是<code>Object</code>类型，而对于大多数应用场景来说，一般都将连接点返回值直接返回，因此通知方法的返回值类型一般都选择<code>Object</code>类型比较好。</p>\n<p>即使连接点返回值是<code>void</code>，通知方法的返回值也可以设置成<code>Object</code>类型。</p>\n</p>\n</div>\n<p>在上个例子中，在通知中获得了连接点的返回值。在这个例子中，还可以获取连接点的参数(并进行处理,第一个参数改为100)，也可以获得异常：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Around</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"pointcut()\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Object</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">around</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">ProceedingJoinPoint</span><span style=\"color: #D4D4D4\"> joinPoint){</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"before\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">Object</span><span style=\"color: #D4D4D4\">[] </span><span style=\"color: #9CDCFE\">args</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">joinPoint</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">getArgs</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        args[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">100</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">Object</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">ret</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #569CD6\">null</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">try</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            ret = </span><span style=\"color: #9CDCFE\">joinPoint</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">proceed</span><span style=\"color: #D4D4D4\">(args);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        } </span><span style=\"color: #C586C0\">catch</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #4EC9B0\">Throwable</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">e</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">throw</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">RuntimeException</span><span style=\"color: #D4D4D4\">(e);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"after\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> ret;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span></code></pre></div><p>这里看到，由于在通知中对异常进行了处理，因此通知方法的返回值类型可以不用声明<code>throws Throwable</code>了。注意，<strong>如果修改了连接点的参数，则使用<code>proceed(Object[] args)</code>方法</strong>，用以传入修改后的参数；如果不修改连接点参数，则直接使用<code>proceed()</code>方法即可。</p>\n<p>关于获取连接点的参数和返回值或者异常，其他通知类型各有不同：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Before</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"pointcut()\"</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">//能获得：参数</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">//通知参数是JoinPoint类型！是ProceedingJoinPoint的父接口</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">before</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">JoinPoint</span><span style=\"color: #D4D4D4\"> joinPoint) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">//通过getArgs()方法获取连接点的参数，但是不能修改后再传入连接点</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"get args at before \"</span><span style=\"color: #D4D4D4\">+</span><span style=\"color: #9CDCFE\">joinPoint</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">getArgs</span><span style=\"color: #D4D4D4\">()[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">].</span><span style=\"color: #DCDCAA\">toString</span><span style=\"color: #D4D4D4\">());</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">After</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"pointcut()\"</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">//能获得：参数</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">//通知参数是JoinPoint类型！是ProceedingJoinPoint的父接口</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">after</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">JoinPoint</span><span style=\"color: #D4D4D4\"> joinPoint) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">//通过getArgs()方法获取连接点的参数，但是不能修改后再传入连接点</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"get args at after \"</span><span style=\"color: #D4D4D4\">+</span><span style=\"color: #9CDCFE\">joinPoint</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">getArgs</span><span style=\"color: #D4D4D4\">()[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">].</span><span style=\"color: #DCDCAA\">toString</span><span style=\"color: #D4D4D4\">());</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">AfterReturning</span><span style=\"color: #D4D4D4\">(value = </span><span style=\"color: #CE9178\">\"pointcut()\"</span><span style=\"color: #D4D4D4\">, returning = </span><span style=\"color: #CE9178\">\"ret\"</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">//能获得：参数、返回值</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">//通过Object类型的参数获取连接点的返回值，注意注解中的参数名要和方法参数名一致，这里都是ret。如果要获取连接点的参数，则要使用JoinPoint类型的参数，且必须是第一个参数。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">afterReturning</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">JoinPoint</span><span style=\"color: #D4D4D4\"> joinPoint, </span><span style=\"color: #4EC9B0\">Object</span><span style=\"color: #D4D4D4\"> ret) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"get args at afterReturning \"</span><span style=\"color: #D4D4D4\">+</span><span style=\"color: #9CDCFE\">joinPoint</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">getArgs</span><span style=\"color: #D4D4D4\">()[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">].</span><span style=\"color: #DCDCAA\">toString</span><span style=\"color: #D4D4D4\">());</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"get ret at afterReturning \"</span><span style=\"color: #D4D4D4\">+</span><span style=\"color: #9CDCFE\">ret</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">toString</span><span style=\"color: #D4D4D4\">());</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">AfterThrowing</span><span style=\"color: #D4D4D4\">(value = </span><span style=\"color: #CE9178\">\"pointcut()\"</span><span style=\"color: #D4D4D4\">, throwing = </span><span style=\"color: #CE9178\">\"e\"</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">//能获得：参数、异常</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">//通过Exception类型的参数获取连接点的异常，注意注解中的参数名要和方法参数名一致，这里都是e。如果要获取连接点的参数，则要使用JoinPoint类型的参数，且必须是第一个参数。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">afterThrowing</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">JoinPoint</span><span style=\"color: #D4D4D4\"> joinPoint, </span><span style=\"color: #4EC9B0\">Exception</span><span style=\"color: #D4D4D4\"> e) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"get args at afterThrowing \"</span><span style=\"color: #D4D4D4\">+</span><span style=\"color: #9CDCFE\">joinPoint</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">getArgs</span><span style=\"color: #D4D4D4\">()[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">].</span><span style=\"color: #DCDCAA\">toString</span><span style=\"color: #D4D4D4\">());</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"get exception at afterThrowing \"</span><span style=\"color: #D4D4D4\">+</span><span style=\"color: #9CDCFE\">e</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">toString</span><span style=\"color: #D4D4D4\">());</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span></code></pre></div><div class=\"custom-quote danger\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M19.76 5.23C15.84 5.23 12 2 12 2C12 2 8.15996 5.23 4.23996 5.23C4.23996 5.23 1.86996 16.99 12 22C22.13 16.99 19.76 5.23 19.76 5.23Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 16H12\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">在AOP编程中要遵循的原则</p>\n<p>有以下两点非常重要，必须遵守，否则会出现问题：</p>\n<ol>\n<li>访问被注入的Bean时，必须调用方法而不是直接访问字段；</li>\n<li>编写Bean时，如果可能会被代理，就不要编写public final方法。</li>\n</ol>\n<p>关于第一点，原因如下：<strong>Spring通过CGLIB创建的代理类，不会初始化代理类自身继承的任何成员变量，包括final类型的成员变量！（因为是毕竟代理类嘛）</strong>，因此如果直接访问字段，会出现空指针异常。因此，如果要访问被注入的Bean的成员变量，必须调用返回该成员变量的方法，而不是直接访问字段。</p>\n<p>关于第二点：虽然CGLIB创建的代理类不会初始化代理类自身继承的任何成员变量，但是会覆写代理类自身继承的所有方法。<strong>如果一个方法被声明为final，那么CGLIB就无法覆写并绑定该方法。</strong>因此，如果该方法又直接访问了成员变量，就会导致：其他Bean如果调用此方法，将访问到代理类的成员变量，发生空指针异常。</p>\n\n</div>\n<h3 id=\"Transaction\"><a href=\"#Transaction\" class=\"headerlink\" title=\"Transaction\"></a>Transaction</h3><h4 id=\"什么是事务\"><a href=\"#什么是事务\" class=\"headerlink\" title=\"什么是事务\"></a>什么是事务</h4><p>最经典的例子莫过于银行转账了，假设A账户有1000元，B账户有2000元，A账户向B账户转账100元，那么这个过程中，A账户的钱减少100元，B账户的钱增加100元，这两个操作必须同时成功或者同时失败，如果其中一个操作失败了，那么另一个操作也必须回滚。银行转账的操作就是一个事务（同时成功，同时失败）。</p>\n<h4 id=\"Spring的事务\"><a href=\"#Spring的事务\" class=\"headerlink\" title=\"Spring的事务\"></a>Spring的事务</h4><p>事务的底层原理依然是由AOP实现的。对于开启事务的类/接口/方法，Spring会创建其对应的代理对象，该代理对象会有一个<code>PlatformTransactionManager</code>成员，作为事务管理员管理事务。</p>\n<p>在Spring中，会有事务协调类<code>TransactionInterceptor</code>来拦截执行方法体，判断是否开启事务，然后执行事务方法体，方法体中catch住异常，接着判断是否需要回滚，如果需要回滚就委托真正的<code>TransactionManager</code>进行处理。</p>\n<p>要在Spring上使用声明式事务，首先给配置类加上<code>@EnableTransactionManagement</code>注解，表示开启与事务有关的AOP，并开启和事务管理有关的注解：<code>@Transactional</code>（可为方法注解，也可为类/接口注解。为类/接口注解即对该类/接口下所有的方法开启事务管理）。</p>\n<p>还记得代理对象有个的<code>PlatformTransactionManager</code>成员吗？这个成员从那来呢？这个成员是要在配置类中进行手动配置的，这里使用了JDBC的一个事务管理器，它为JDBC的操作提供事务管理：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Bean</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">PlatformTransactionManager</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">PTM</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">DataSource</span><span style=\"color: #D4D4D4\"> dataSource) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">DataSourceTransactionManager</span><span style=\"color: #D4D4D4\">(dataSource);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span></code></pre></div><p>接着给对应的，有数据库操作的方法加上<code>@Transactional</code>注解，即可声明该方法为事务。在一个事务方法中，如果程序判断需要回滚事务，只需抛出RuntimeException。</p>\n<p>相关的，事务还有传播级别的概念，但是大部分情况下，默认的REQUIRED就够用了，其他的自搜。REQUIRED的意思是：在执行到事务方法时，如果当前没有事务，就创建一个新事务，如果当前有事务，就加入到当前事务中执行。比如说，A方法调用B方法，A方法是事务，B方法也是事务。执行B方法时，已经看到有A方法的事务了，那么B方法的事务会合并到A方法的事务中去。</p>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">事务如何传播</p>\n<p><p>事务能正确传播的前提是，方法调用是在一个线程内才行。因为Spring会把和事务有关的信息保存在线程中，如果不在一个线程内，则事务信息不同步，依照上文所述原则：如果当前没有事务，就创建一个新事务，如果当前有事务，就加入到当前事务中执行。因此，新的线程在REQUIRED级别中，总是会创建一个新事务，而不会合并，失去了传播功能。</p>\n</p>\n</div>\n<h3 id=\"Spring-MVC\"><a href=\"#Spring-MVC\" class=\"headerlink\" title=\"Spring MVC\"></a>Spring MVC</h3><h4 id=\"什么是MVC\"><a href=\"#什么是MVC\" class=\"headerlink\" title=\"什么是MVC\"></a>什么是MVC</h4><p>MVC是三个单词的首字母缩写，它们是Model（模型）、View（视图）和Controller（控制）。MVC是一种设计模式，常用于开发WEB应用。</p>\n<p>一个以MVC设计模式开发的WEB应用，具体工作流程如下：</p>\n<ol>\n<li>首先，用户通过浏览器发送HTTP请求，请求到达服务器的Controller；</li>\n<li>Controller根据用户请求，执行业务层逻辑，其处理结果作为Model传递给View；</li>\n<li>View根据Model渲染出HTML，通过HTTP响应返回给浏览器。</li>\n</ol>\n<p>这里的View指代JSP之类的，但是Web开发通常使用其他的前端框架，如Vue、React等，这些框架都是前后端分离的。</p>\n<h4 id=\"Spring-MVC-1\"><a href=\"#Spring-MVC-1\" class=\"headerlink\" title=\"Spring MVC\"></a>Spring MVC</h4><p>在Spring中，要使用MVC需要包含以下依赖，一个是spring-webmvc，这个则包含了spring-context在内的包（可以不用导入spring-context了）。另外，既然是Web应用，那就少不了servlet容器的使用了，因此要加上servlet-api依赖。另外，也可以加上jackson-databind依赖，这是一个JSON序列化/反序列化的库，用于将Java对象转换为JSON字符串，或者将JSON字符串转换为Java对象，这在Web开发中非常有用。（非必须）</p>\n<div class=\"language-xml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">xml</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">dependency</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">groupId</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">org.springframework</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">groupId</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">artifactId</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">spring-webmvc</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">artifactId</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">version</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">5.2.25.RELEASE</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">version</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">dependency</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">dependency</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">groupId</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">javax.servlet</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">groupId</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">artifactId</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">javax.servlet-api</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">artifactId</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">version</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">4.0.1</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">version</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">scope</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">provided</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">scope</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">dependency</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">dependency</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">groupId</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">com.fasterxml.jackson.core</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">groupId</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">artifactId</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">jackson-databind</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">artifactId</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">version</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">2.14.3</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">version</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">dependency</span><span style=\"color: #808080\">&gt;</span></span></code></pre></div><p>关于打包的格式在pom.xml中配置为war（这对servlet很重要）：</p>\n<div class=\"language-xml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">xml</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">packaging</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">war</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">packaging</span><span style=\"color: #808080\">&gt;</span></span></code></pre></div><p>关于Servlet容器，这里选择Tomcat。可以选择在IDEA中配置Tomcat，也可以选择在pom.xml中配置Tomcat。这里选择在pom.xml中添加<a href=\"https://tomcat.apache.org/maven-plugin.html\">Tomcat插件</a>，这样可以在其他IDE中也能运行。</p>\n<div class=\"language-xml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">xml</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">plugin</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">groupId</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">org.apache.tomcat.maven</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">groupId</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">artifactId</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">tomcat7-maven-plugin</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">artifactId</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">version</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">2.2</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">version</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">plugin</span><span style=\"color: #808080\">&gt;</span></span></code></pre></div><p>至此，前置条件已经完成，接下来开始编写Java代码。</p>\n<p>在前面的所有例子中，通过在主函数中创建IoC容器，然后从IoC容器中获取Bean，然后调用Bean的方法，但这样的方式是不适合Web应用的，因为Web应用是由Servlet容器来管理的，那IoC容器如何与Servlet容器进行配合协作呢？</p>\n<p>解决方法是：需要将IoC容器交给Servlet容器来管理。</p>\n<p>这就要介绍一下<code>ServletContainerInitializer</code>接口了：ServletContainerInitializer是 Servlet 3.0 新增的一个接口，主要用于在容器启动阶段通过编程风格注册Filter, Servlet以及Listener，以取代通过web.xml配置注册。这样就利于开发内聚的web应用框架，<em>为第三方组件的初始化提供了简单的方法</em>。<code>ServletContainerInitializer</code>接口的实现类通过Java SPI声明自己是<code>ServletContainerInitializer</code>的provider，容器启动阶段依据Java SPI获取到所有<code>ServletContainerInitializer的</code>实现类，然后执行其onStartup方法，完成初始化工作。</p>\n<p>在包spring-webmvc中的一个类：<code>org.springframework.web.SpringServletContainerInitializer</code>实现了这个接口，Servlet容器启动时会调用这个类的<code>onStartup()</code>方法。这是这个方法的定义：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Override</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">onStartup</span><span style=\"color: #D4D4D4\">(@</span><span style=\"color: #4EC9B0\">Nullable</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Set</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">Class</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #C586C0\">?</span><span style=\"color: #D4D4D4\">&gt;&gt; webAppInitializerClasses, </span><span style=\"color: #4EC9B0\">ServletContext</span><span style=\"color: #D4D4D4\"> servletContext)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            throws ServletException {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">List</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">WebApplicationInitializer</span><span style=\"color: #D4D4D4\">&gt; </span><span style=\"color: #9CDCFE\">initializers</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">LinkedList</span><span style=\"color: #D4D4D4\">&lt;&gt;();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (webAppInitializerClasses != </span><span style=\"color: #569CD6\">null</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #4EC9B0\">Class</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #569CD6\">?</span><span style=\"color: #D4D4D4\">&gt; </span><span style=\"color: #9CDCFE\">waiClass</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">:</span><span style=\"color: #D4D4D4\"> webAppInitializerClasses) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #6A9955\">//这里，Spring扫描所有的WebApplicationInitializer的实现类，然后将其实例化，放入initializers中</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!</span><span style=\"color: #9CDCFE\">waiClass</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">isInterface</span><span style=\"color: #D4D4D4\">() &amp;&amp; !</span><span style=\"color: #9CDCFE\">Modifier</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">isAbstract</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">waiClass</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">getModifiers</span><span style=\"color: #D4D4D4\">()) &amp;&amp;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                        </span><span style=\"color: #9CDCFE\">WebApplicationInitializer</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">class</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">isAssignableFrom</span><span style=\"color: #D4D4D4\">(waiClass)) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                    </span><span style=\"color: #C586C0\">try</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                        </span><span style=\"color: #9CDCFE\">initializers</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">add</span><span style=\"color: #D4D4D4\">((WebApplicationInitializer)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                                </span><span style=\"color: #9CDCFE\">ReflectionUtils</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">accessibleConstructor</span><span style=\"color: #D4D4D4\">(waiClass).</span><span style=\"color: #DCDCAA\">newInstance</span><span style=\"color: #D4D4D4\">());</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                    </span><span style=\"color: #C586C0\">catch</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #4EC9B0\">Throwable</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">ex</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                        </span><span style=\"color: #C586C0\">throw</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">ServletException</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Failed to instantiate WebApplicationInitializer class\"</span><span style=\"color: #D4D4D4\">, ex);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">initializers</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">isEmpty</span><span style=\"color: #D4D4D4\">()) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">servletContext</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">log</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"No Spring WebApplicationInitializer types detected on classpath\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">servletContext</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">log</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">initializers</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">() + </span><span style=\"color: #CE9178\">\" Spring WebApplicationInitializers detected on classpath\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">AnnotationAwareOrderComparator</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">sort</span><span style=\"color: #D4D4D4\">(initializers);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #4EC9B0\">WebApplicationInitializer</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">initializer</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">:</span><span style=\"color: #D4D4D4\"> initializers) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #6A9955\">//这里，Spring调用所有的WebApplicationInitializer的实现类的onStartup方法，并将ServletContext传入</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">initializer</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">onStartup</span><span style=\"color: #D4D4D4\">(servletContext);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span></code></pre></div><p>上述代码意思是，Spring扫描会所有的<code>WebApplicationInitializer</code>的实现类，然后将其实例化，并调用所有的<code>WebApplicationInitializer</code>的实现类的<code>onStartup</code>方法，并将ServletContext传入。因此，我们只需要实现<code>WebApplicationInitializer</code>接口，然后在<code>onStartup</code>方法中创建IoC容器，将IoC容器交给Servlet容器管理即可。</p>\n<p>听起来很麻烦，但是由于Spring的封装，提供了一个简便的方法：继承抽象类<code>AbstractDispatcherServletInitializer</code>，并实现其抽象方法即可。原因是：这个抽象类实现了<code>WebApplicationInitializer</code>接口，并且在<code>onStartup</code>方法中调用<code>registerDispatcherServlet</code>方法，<code>registerDispatcherServlet</code>方法又会调用<code>createServletApplicationContext</code>抽象方法，创建IoC容器，并将其交给Servlet容器管理。</p>\n<p>其抽象方法有3个：</p>\n<ol>\n<li>createServletApplicationContext</li>\n<li>getServletMappings</li>\n<li>createRootApplicationContext</li>\n</ol>\n<p>下面是一个例子：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">//ServletContainerInit.java</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">//也可以继承AbstractAnnotationConfigDispatcherServletInitializer更加简洁</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">ServletContainerInit</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">extends</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">AbstractDispatcherServletInitializer</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">//加载spring-mvc配置</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Override</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">protected</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">WebApplicationContext</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">createServletApplicationContext</span><span style=\"color: #D4D4D4\">() {</span><span style=\"color: #6A9955\">//这个函数被registerDispatcherServlet方法调用</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">AnnotationConfigWebApplicationContext</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">context</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">AnnotationConfigWebApplicationContext</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">context</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">register</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">SpringMVCConfiguration</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">class</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> context;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">//哪些请求路径交给SpringMVC处理</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Override</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">protected</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\">[] </span><span style=\"color: #DCDCAA\">getServletMappings</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\">[]{</span><span style=\"color: #CE9178\">\"/\"</span><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">//加载Spring容器配置</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Override</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">protected</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">WebApplicationContext</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">createRootApplicationContext</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">AnnotationConfigWebApplicationContext</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">context</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">AnnotationConfigWebApplicationContext</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">context</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">register</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">SpringConfiguration</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">class</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> context;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">Override</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">protected</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Filter</span><span style=\"color: #D4D4D4\">[] </span><span style=\"color: #DCDCAA\">getServletFilters</span><span style=\"color: #D4D4D4\">() {</span><span style=\"color: #6A9955\">//Tomcat7以下版本则需要配置，仅解决post请求乱码,高版本不会有中文乱码问题（可选）</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">CharacterEncodingFilter</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">filter</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">CharacterEncodingFilter</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">filter</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">setEncoding</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"UTF-8\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Filter</span><span style=\"color: #D4D4D4\">[]{filter};</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span></code></pre></div><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">//SpringMVCConfiguration.java</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">ComponentScan</span><span style=\"color: #D4D4D4\">({</span><span style=\"color: #CE9178\">\"org.example.controller\"</span><span style=\"color: #D4D4D4\">})</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">EnableWebMvc</span><span style=\"color: #6A9955\">// 这个注解会打开许许多多方便的功能</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">SpringMVCConfiguration</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">//SpringConfiguration.java</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">Configuration</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">ComponentScan</span><span style=\"color: #D4D4D4\">(value = {</span><span style=\"color: #CE9178\">\"org.example\"</span><span style=\"color: #D4D4D4\">}, excludeFilters = {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        @</span><span style=\"color: #4EC9B0\">ComponentScan.Filter</span><span style=\"color: #D4D4D4\">(type = </span><span style=\"color: #9CDCFE\">FilterType</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">ANNOTATION</span><span style=\"color: #D4D4D4\">, classes = {</span><span style=\"color: #9CDCFE\">Controller</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">class</span><span style=\"color: #D4D4D4\">})</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">})</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">SpringConfiguration</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">//Hello.java</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">Controller</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #6A9955\">//只被SpringMVCConfiguration扫描到（后面会解释）</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">RequestMapping</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"/hello\"</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">//路径映射</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Hello</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">RequestMapping</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"/save\"</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">//路径映射</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">ResponseBody</span><span style=\"color: #6A9955\">//返回内容作为响应体，不会被视图解析器解析</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">save</span><span style=\"color: #D4D4D4\">(@</span><span style=\"color: #4EC9B0\">RequestParam</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"int\"</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">i</span><span style=\"color: #D4D4D4\">,</span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">) {</span><span style=\"color: #6A9955\">//@RequestParam的简单使用例子</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(s);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"received\"</span><span style=\"color: #D4D4D4\">+i+</span><span style=\"color: #CE9178\">\"+\"</span><span style=\"color: #D4D4D4\">+s;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">RequestMapping</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"/hi\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">ResponseBody</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">hi</span><span style=\"color: #D4D4D4\">() {</span><span style=\"color: #6A9955\">//不接受请求参数</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"hi\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>在上述例子中，<code>createServletApplicationContext</code>方法通过加载<code>SpringMVCConfiguration</code>类来创建上下文，用于指定哪些类与Servlet有关（通常是表现层的类），在SpringConfiguration.java看到，该类会扫描包<code>org.example.controller</code>下的所有被<code>@Component</code>注解的类，创建为bean。</p>\n<p><code>getServletMappings</code>也会被抽象类调用，用于指定哪些请求路径交给SpringMVC处理。</p>\n<p><code>createRootApplicationContext</code>方法通过加载<code>SpringConfiguration</code>类来创建上下文，用于指定与Servlet<strong>无关</strong>的类（通常放业务和功能），在SpringConfiguration.java可以看到，该类会扫描包<code>org.example</code>下的所有被<code>@Component</code>注解的类，创建为bean，但是排除<code>@Controller</code>注解的类。</p>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">避免重复扫描</p>\n<p>为什么要过滤<code>@Controller</code>注解的类呢？因为<code>@Controller</code>注解的类会被<code>createServletApplicationContext</code>方法加载的<code>SpringMVCConfiguration</code>类扫描到，因此不需要再在<code>createRootApplicationContext</code>方法加载的<code>SpringConfiguration</code>类中扫描了。</p>\n<p>过滤的条件也不仅仅只有一种，还有其他的过滤条件，比如按照类名过滤，按照注解过滤等等。</p>\n<p>如果SpringMVCConfiguration.java放在包org.example下，为了正确实现过滤功能，注意这个时候不能将其用<code>@Configuration</code>修饰。因为<code>@Controller</code>也是属于<code>@Component</code>的一种，如果被<code>SpringConfiguration</code>扫描到，则会引入<code>SpringMVCConfiguration</code>的<code>@ComponentScan</code>，这样的话，好不容易排除的<code>@Controller</code>注解的类又被扫描进来了！</p>\n<p>除了设置过滤避免重复加载，还有一个方法：究其原因，就是因为org.example所包含的范围太大了，所以最简单的解决方法就是<strong>更加细致的指定扫描范围</strong>。</p>\n\n</div>\n<p>再看到Hello.java文件，这个文件就是一个Controller，它位于org.example.controller包下，且被<code>@Controller</code>修饰，因此会被<code>SpringMVCConfiguration</code>扫描到，但是不会被<code>SpringConfiguration</code>扫描到。类注解<code>@RequestMapping(\"/hello\")</code>表明，该类下的所有方法都会被映射到/hello路径下。方法<code>save</code>被<code>@RequestMapping(\"/save\")</code>修饰，表明该方法会被映射到/hello/save路径下。<code>@ResponseBody</code>则表明，返回内容将作为响应体，不会被视图解析器解析。形参<code>@RequestParam(\"int\") int i</code>表示，请求参数中的int参数会被映射到形参i上，<code>@RequestParam</code>用于绑定请求参数与形参之间的关系，如果不指定value或者不进行注解，则形参名必须和请求参数名一致（如这里的形参s就会接收名为s的请求参数，而形参i会接收名为int的请求参数），形参列表为空则说明该方法不接收请求参数。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>域名大小写不敏感，路径和请求参数大小写敏感。</p>\n</p>\n</div>\n<p>以上是两个简单的例子，仅仅是简单的传参，其实还有更多的方式，来看下面这个例子：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">User</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">age</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">name</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">//getters and setters and toString</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Zone</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">url</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">id</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">User</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">user</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">//getters and setters and toString</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">RequestMapping</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"/pojo\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">ResponseBody</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">pojo</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">User</span><span style=\"color: #D4D4D4\"> user) {</span><span style=\"color: #6A9955\">//接受请求参数，自动封装成对象</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(user);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"received \"</span><span style=\"color: #D4D4D4\"> + user;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">RequestMapping</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"/pojo2\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">ResponseBody</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">pojo2</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">Zone</span><span style=\"color: #D4D4D4\"> zone) {</span><span style=\"color: #6A9955\">//接受请求参数，自动封装成对象</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(zone);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"received \"</span><span style=\"color: #D4D4D4\"> +  zone;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span></code></pre></div><p>首先有两个实体类，User和Zone，User的成员变量是基础类型，而Zone的成员变量则有引用类型。</p>\n<p>对于第一个方法，如果用get方法传参：/hello/pojo?name=ABC&amp;age=19，请求参数中的age和name会被自动封装成User对象。</p>\n<p>对于第二个方法，如果用get方法传参：/hello/pojo2?id=1&amp;url=example.com&amp;user.name=ac&amp;user.age=11，请求参数中的id和url会被自动封装成Zone对象，而user.name和user.age会被自动封装成User对象，然后将User对象赋值给Zone对象的user成员变量。非常的方便（尽管很少用就是了）</p>\n<p>另外对于列表数据则可以采用以下形式：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">RequestMapping</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"/array\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">ResponseBody</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">array</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\">[] s) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">Arrays</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">toString</span><span style=\"color: #D4D4D4\">(s));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"received \"</span><span style=\"color: #D4D4D4\"> + </span><span style=\"color: #9CDCFE\">Arrays</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">toString</span><span style=\"color: #D4D4D4\">(s);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">RequestMapping</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"stringlist\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">ResponseBody</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">ListString</span><span style=\"color: #D4D4D4\">(@</span><span style=\"color: #4EC9B0\">RequestParam</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">List</span><span style=\"color: #D4D4D4\">&lt;String&gt; s) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">toString</span><span style=\"color: #D4D4D4\">());</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"received \"</span><span style=\"color: #D4D4D4\"> + s;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span></code></pre></div><p>对于第一个方法，如果用get方法传参：/hello/array?s=hello&amp;s=i&amp;s=am&amp;s=spring-mvc，请求参数中的s会被自动封装成String数组。</p>\n<p>对于第二个方法，如果用get方法传参：/hello/stringlist?s=hello&amp;s=world，请求参数中的s会被自动封装成List。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>第二个方法如果形参不用<code>@RequestParam</code>修饰，则会报错。因为Spring会当作pojo传参处理，而不是列表传参。</p>\n\n</div>\n<p>这两种传参形参只能是基础类型如String，不能是自定义类型如User。如果为User，虽然不报错，但是显然请求参数无法正确描述User的数据结构。为此，介绍下面的json传参形式，在使用这种形式之前，需要在<code>SpringMVCConfiguration</code>中配置<code>@EnableWebMvc</code>，开启相关的功能。另外在maven中引入jackson-databind包。</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">RequestMapping</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"jsonlist\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">ResponseBody</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">jsonlist</span><span style=\"color: #D4D4D4\">(@</span><span style=\"color: #4EC9B0\">RequestBody</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">List</span><span style=\"color: #D4D4D4\">&lt;String&gt; s) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">toString</span><span style=\"color: #D4D4D4\">());</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"received \"</span><span style=\"color: #D4D4D4\"> + s;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span><span style=\"color: #6A9955\">//[\"hello\",\"world\",\"!!\"]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">RequestMapping</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"jsonpojo\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">ResponseBody</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">jsonpojo</span><span style=\"color: #D4D4D4\">(@</span><span style=\"color: #4EC9B0\">RequestBody</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Zone</span><span style=\"color: #D4D4D4\"> zone) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(zone);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"received \"</span><span style=\"color: #D4D4D4\"> + zone;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span><span style=\"color: #6A9955\">//{ \"url\": \"example.org\", \"id\": \"789\", \"user\": { \"name\": \"ac\", \"age\": \"12\" } }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">RequestMapping</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"jsonpojolist\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">ResponseBody</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">jsonpojolist</span><span style=\"color: #D4D4D4\">(@</span><span style=\"color: #4EC9B0\">RequestBody</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">List</span><span style=\"color: #D4D4D4\">&lt;Zone&gt; zone) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">System</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(zone);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"received \"</span><span style=\"color: #D4D4D4\"> + zone;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span><span style=\"color: #6A9955\">//[ { \"url\": \"example.com\", \"id\": \"12\", \"user\": { \"name\": \"ac\", \"age\": \"4\" } }, { \"url\": \"example.cn\", \"id\": \"34\", \"user\": { \"name\": \"xw\", \"age\": \"8\" } }]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">RequestMapping</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"getzone\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">ResponseBody</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Zone</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">getzone</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">Zone</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">zone</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Zone</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">zone</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">setId</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">zone</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">setUrl</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"zone1\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">User</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">user</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">User</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">user</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">setAge</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">18</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">user</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">setName</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"user1\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">zone</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">setUser</span><span style=\"color: #D4D4D4\">(user);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> zone;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span><span style=\"color: #6A9955\">//{\"url\":\"zone1\",\"id\":1,\"user\":{\"age\":18,\"name\":\"user1\"}}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">RequestMapping</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"getzonelist\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">ResponseBody</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">List</span><span style=\"color: #D4D4D4\">&lt;Zone&gt; </span><span style=\"color: #DCDCAA\">getzonelist</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">Zone</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">zone</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Zone</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">zone</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">setId</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">zone</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">setUrl</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"zone1\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">User</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">user</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">User</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">user</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">setAge</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">18</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">user</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">setName</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"user1\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">zone</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">setUser</span><span style=\"color: #D4D4D4\">(user);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">Zone</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">zone2</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Zone</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">zone2</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">setId</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">zone2</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">setUrl</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"zone2\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">User</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">user2</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">User</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">user2</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">setAge</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">19</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">user2</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">setName</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"user2\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">zone2</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">setUser</span><span style=\"color: #D4D4D4\">(user2);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">Arrays</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">asList</span><span style=\"color: #D4D4D4\">(zone, zone2);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span><span style=\"color: #6A9955\">//[{\"url\":\"zone1\",\"id\":1,\"user\":{\"age\":18,\"name\":\"user1\"}},{\"url\":\"zone2\",\"id\":2,\"user\":{\"age\":19,\"name\":\"user2\"}}]</span></span></code></pre></div><p>其中，对于前3个方法，<code>@RequestBody</code>注解表示请求参数在请求体里面，jackjson会自动将请求体中的json字符串转换为对应的对象。对于后2个方法，<code>@ResponseBody</code>注解会使jackjson会自动将对象转换为json字符串。这里留心一下参数的类型以及函数的返回类型。</p>\n<h4 id=\"REST\"><a href=\"#REST\" class=\"headerlink\" title=\"REST\"></a>REST</h4><p>RESTful风格是一种基于HTTP协议设计Web API的软件架构风格，它强调使用HTTP动词来表示对资源的操作（GET、POST、PUT、PATCH、DELETE等），并通过URI表示资源的唯一标识符。RESTful风格的Web API设计简单、易于扩展，因此被广泛应用于互联网公司的API设计。</p>\n<table>\n<thead>\n<tr>\n<th>路径</th>\n<th>行为</th>\n<th>请求方式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>localhost/users</td>\n<td>查询全部用户信息</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>localhost/users/1</td>\n<td>查询id为1的用户信息</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>localhost/users</td>\n<td>添加用户信息</td>\n<td>POST</td>\n</tr>\n<tr>\n<td>localhost/users/</td>\n<td>修改用户信息</td>\n<td>PUT</td>\n</tr>\n<tr>\n<td>localhost/users/1</td>\n<td>删除id为1的用户信息</td>\n<td>DELETE</td>\n</tr>\n</tbody></table>\n<p>这是一个简单的案例：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">Controller</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">ResponseBody</span><span style=\"color: #6A9955\">//写在类上，表示该类下的所有方法都被@ResponseBody修饰</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">RequestMapping</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"/rest\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Rest</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">RequestMapping</span><span style=\"color: #D4D4D4\">(value = </span><span style=\"color: #CE9178\">\"/users\"</span><span style=\"color: #D4D4D4\">, method = </span><span style=\"color: #9CDCFE\">RequestMethod</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">GET</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">get</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"get success\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">RequestMapping</span><span style=\"color: #D4D4D4\">(value = </span><span style=\"color: #CE9178\">\"/users/{id}\"</span><span style=\"color: #D4D4D4\">, method = </span><span style=\"color: #9CDCFE\">RequestMethod</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">GET</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">get</span><span style=\"color: #D4D4D4\">(@</span><span style=\"color: #4EC9B0\">PathVariable</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">id</span><span style=\"color: #D4D4D4\">){</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"get success \"</span><span style=\"color: #D4D4D4\">+id;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">RequestMapping</span><span style=\"color: #D4D4D4\">(value = </span><span style=\"color: #CE9178\">\"/users\"</span><span style=\"color: #D4D4D4\">, method = </span><span style=\"color: #9CDCFE\">RequestMethod</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">POST</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">post</span><span style=\"color: #D4D4D4\">(@</span><span style=\"color: #4EC9B0\">RequestBody</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">User</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">user</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"post success \"</span><span style=\"color: #D4D4D4\">+user;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">RequestMapping</span><span style=\"color: #D4D4D4\">(value = </span><span style=\"color: #CE9178\">\"/users\"</span><span style=\"color: #D4D4D4\">, method = </span><span style=\"color: #9CDCFE\">RequestMethod</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">PUT</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">put</span><span style=\"color: #D4D4D4\">(@</span><span style=\"color: #4EC9B0\">RequestBody</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">User</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">user</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"put success \"</span><span style=\"color: #D4D4D4\">+user;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">RequestMapping</span><span style=\"color: #D4D4D4\">(value = </span><span style=\"color: #CE9178\">\"/users/{number}\"</span><span style=\"color: #D4D4D4\">, method = </span><span style=\"color: #9CDCFE\">RequestMethod</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">DELETE</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">delete</span><span style=\"color: #D4D4D4\">(@</span><span style=\"color: #4EC9B0\">PathVariable</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"number\"</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">id</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"delete success \"</span><span style=\"color: #D4D4D4\"> + id;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>上述写法中，对于<code>@RequestMapping</code>注解添加了method限定参数，这样就可以根据请求方式来调用不同的方法。同时，由于这里<code>@RequestMapping</code>传入了两个参数，因此缺省的参数名<code>value</code>必须要写明。要使用路径变量的话，路径变量用大括号括起来（如<code>{id}</code>）。<code>@PathVariable</code>注解使路径变量自动映射到形参中（变量名必须相同，或者像最后一个方法那样进行指定）。</p>\n<p>像上面那样写，虽然能实现RESTful风格，但是代码量太大了。Spring提供了更加简单的写法：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">RestController</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">@</span><span style=\"color: #4EC9B0\">RequestMapping</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"/rest/users\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Rest</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">GetMapping</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">get</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"get success\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">GetMapping</span><span style=\"color: #D4D4D4\">(value = </span><span style=\"color: #CE9178\">\"/{id}\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">get</span><span style=\"color: #D4D4D4\">(@</span><span style=\"color: #4EC9B0\">PathVariable</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">id</span><span style=\"color: #D4D4D4\">){</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"get success \"</span><span style=\"color: #D4D4D4\">+id;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">PostMapping</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">post</span><span style=\"color: #D4D4D4\">(@</span><span style=\"color: #4EC9B0\">RequestBody</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">User</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">user</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"post success \"</span><span style=\"color: #D4D4D4\">+user;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">PutMapping</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">put</span><span style=\"color: #D4D4D4\">(@</span><span style=\"color: #4EC9B0\">RequestBody</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">User</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">user</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"put success \"</span><span style=\"color: #D4D4D4\">+user;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    @</span><span style=\"color: #4EC9B0\">DeleteMapping</span><span style=\"color: #D4D4D4\">(value = </span><span style=\"color: #CE9178\">\"/{number}\"</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">delete</span><span style=\"color: #D4D4D4\">(@</span><span style=\"color: #4EC9B0\">PathVariable</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"number\"</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">id</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"delete success \"</span><span style=\"color: #D4D4D4\"> + id;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>其中，<code>@RestController</code>注解相当于<code>@Controller</code>和<code>@ResponseBody</code>的组合。<code>@GetMapping</code>、<code>@PostMapping</code>、<code>@PutMapping</code>、<code>@DeleteMapping</code>也都同理。</p>\n<p>至此，Spring Framework的基础内容已经结束。</p>\n","feature":true,"text":"什么是SpringSpring是一个开发的生态圈，它提供了若干个项目，每个项目可以完成独立的功能。开发者可以选择其中的一个或多个项目来使用其提供的功能，以完成开...","permalink":"/post/Java-Spring","photos":[],"count_time":{"symbolsCount":"34k","symbolsTime":"31 mins."},"categories":[{"name":"Java","slug":"Java","count":6,"path":"api/categories/Java.json"}],"tags":[{"name":"Web开发","slug":"Web开发","count":3,"path":"api/tags/Web开发.json"},{"name":"Spring","slug":"Spring","count":2,"path":"api/tags/Spring.json"},{"name":"Java","slug":"Java","count":6,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFSpring\"><span class=\"toc-text\">什么是Spring</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Spring-Framework\"><span class=\"toc-text\">Spring Framework</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Core-Container\"><span class=\"toc-text\">Core Container</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#AOP\"><span class=\"toc-text\">AOP</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">什么是面向切面编程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Spring%E7%9A%84AOP\"><span class=\"toc-text\">Spring的AOP</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Transaction\"><span class=\"toc-text\">Transaction</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">什么是事务</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Spring%E7%9A%84%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">Spring的事务</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Spring-MVC\"><span class=\"toc-text\">Spring MVC</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFMVC\"><span class=\"toc-text\">什么是MVC</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Spring-MVC-1\"><span class=\"toc-text\">Spring MVC</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#REST\"><span class=\"toc-text\">REST</span></a></li></ol></li></ol></li></ol>","author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Spring Boot","uid":"cee75310a6ad538e1f2e1c9426d13379","slug":"Spring-Boot","date":"2023-11-01T14:25:33.000Z","updated":"2023-11-05T06:23:47.294Z","comments":true,"path":"api/articles/Spring-Boot.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/spring.jpeg","text":"Spring BootSpring Boot是什么上文关于Spring的介绍中提过，Spring是一个开发的生态圈，它提供了若干个项目，每个项目可以完成独立的功...","permalink":"/post/Spring-Boot","photos":[],"count_time":{"symbolsCount":"7k","symbolsTime":"6 mins."},"categories":[{"name":"Java","slug":"Java","count":6,"path":"api/categories/Java.json"}],"tags":[{"name":"Web开发","slug":"Web开发","count":3,"path":"api/tags/Web开发.json"},{"name":"Spring","slug":"Spring","count":2,"path":"api/tags/Spring.json"},{"name":"Java","slug":"Java","count":6,"path":"api/tags/Java.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true},"next_post":{"title":"Servlet详解","uid":"00373d310aa46142930357ce33d9554f","slug":"Servlet详解","date":"2023-09-29T09:42:00.000Z","updated":"2023-10-30T11:16:25.061Z","comments":true,"path":"api/articles/Servlet详解.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/web开发.jpeg","text":"在Browser-Server架构的Web应用中，浏览器根据URL请求服务器的资源，浏览器则返回对应的资源给浏览器。这些资源可包括HTML文本，二进制文件等等。...","permalink":"/post/Servlet详解","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"11 mins."},"categories":[{"name":"Java","slug":"Java","count":6,"path":"api/categories/Java.json"}],"tags":[{"name":"Web开发","slug":"Web开发","count":3,"path":"api/tags/Web开发.json"},{"name":"Java","slug":"Java","count":6,"path":"api/tags/Java.json"},{"name":"Servlet","slug":"Servlet","count":1,"path":"api/tags/Servlet.json"},{"name":"Tomcat","slug":"Tomcat","count":1,"path":"api/tags/Tomcat.json"},{"name":"HTTP","slug":"HTTP","count":1,"path":"api/tags/HTTP.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true}}