{"title":"字符串匹配算法","uid":"8d834d6f39e88bf7e2572d42a71885db","slug":"字符串匹配算法","date":"2022-03-02T16:02:00.000Z","updated":"2023-09-25T16:37:41.405Z","comments":true,"path":"api/articles/字符串匹配算法.json","keywords":"C++,Pyhton,Java,算法","cover":"https://pic1.zhimg.com/80/v2-661b7ad3936ab46a2b593b13bd664260_720w.jpg","content":"<h2 id=\"1-暴力匹配：\"><a href=\"#1-暴力匹配：\" class=\"headerlink\" title=\"1.暴力匹配：\"></a>1.暴力匹配：</h2><p>设三个指针，第一个用来指向原字符串，表示当前位置。剩下两个分别用来指向当前正在进行匹配的字符。  <br>这是最简单的字符串匹配，其效率比较低，在算法竞赛中最好不要使用。</p>\n<h2 id=\"2-KMP算法：\"><a href=\"#2-KMP算法：\" class=\"headerlink\" title=\"2.KMP算法：\"></a>2.KMP算法：</h2><p>找第一个匹配的下标</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">get_Next</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">string</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #9CDCFE\">target</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">tl</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">Next</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\"> //求出Next数组</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span><span style=\"color: #6A9955\">                                                      // Next数组是从 target[0到i-1]前子串 的前缀后缀最大值</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> point1 = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, point2;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">Next</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">] = point2 = ULLONG_MAX;</span><span style=\"color: #6A9955\">                                    // next数组首位默认为ULLONG_MAX</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (point1 &lt; tl)</span><span style=\"color: #6A9955\">                                               //边界条件</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (point2 == ULLONG_MAX || </span><span style=\"color: #9CDCFE\">target</span><span style=\"color: #D4D4D4\">[point1] == </span><span style=\"color: #9CDCFE\">target</span><span style=\"color: #D4D4D4\">[point2])</span><span style=\"color: #6A9955\"> //类似于KMP的匹配</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">Next</span><span style=\"color: #D4D4D4\">[++point1] = ++point2;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">else</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            point2 = </span><span style=\"color: #9CDCFE\">Next</span><span style=\"color: #D4D4D4\">[point2];</span><span style=\"color: #6A9955\"> //失配</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">KMP</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">string</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #9CDCFE\">origin</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">string</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #9CDCFE\">target</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">ol</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">tl</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">Next</span><span style=\"color: #D4D4D4\">[tl];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">get_Next</span><span style=\"color: #D4D4D4\">(target, tl, Next);</span><span style=\"color: #6A9955\">    //获得next数组</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> point1 = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, point2 = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\"> //从0位开始匹配</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (point1 &lt; ol)</span><span style=\"color: #6A9955\">            //临界值</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (point2 == ULLONG_MAX || </span><span style=\"color: #9CDCFE\">origin</span><span style=\"color: #D4D4D4\">[point1] == </span><span style=\"color: #9CDCFE\">target</span><span style=\"color: #D4D4D4\">[point2])</span><span style=\"color: #6A9955\"> //相应字符匹配成功，继续</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            point2++, point1++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (point2 == tl)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> point1 - tl;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">else</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            point2 = </span><span style=\"color: #9CDCFE\">Next</span><span style=\"color: #D4D4D4\">[point2];</span><span style=\"color: #6A9955\"> //失配</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> ol;</span><span style=\"color: #6A9955\"> //返回</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>计算包含多少个子串</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">get_Next</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">string</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #9CDCFE\">target</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">tl</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">Next</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\"> //求出Next数组</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span><span style=\"color: #6A9955\">                                                      // Next数组是从 target[0到i-1]前子串 的前缀后缀最大值</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> point1 = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, point2;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">Next</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">] = point2 = ULLONG_MAX;</span><span style=\"color: #6A9955\">                                    // next数组首位默认为ULLONG_MAX</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (point1 &lt; tl)</span><span style=\"color: #6A9955\">                                               //边界条件</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (point2 == ULLONG_MAX || </span><span style=\"color: #9CDCFE\">target</span><span style=\"color: #D4D4D4\">[point1] == </span><span style=\"color: #9CDCFE\">target</span><span style=\"color: #D4D4D4\">[point2])</span><span style=\"color: #6A9955\"> //类似于KMP的匹配</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">Next</span><span style=\"color: #D4D4D4\">[++point1] = ++point2;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">else</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            point2 = </span><span style=\"color: #9CDCFE\">Next</span><span style=\"color: #D4D4D4\">[point2];</span><span style=\"color: #6A9955\"> //失配</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">KMP</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">string</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #9CDCFE\">origin</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">string</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #9CDCFE\">target</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">ol</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">tl</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">Next</span><span style=\"color: #D4D4D4\">[tl], sum = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">get_Next</span><span style=\"color: #D4D4D4\">(target, tl, Next);</span><span style=\"color: #6A9955\">    //获得next数组</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> point1 = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, point2 = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\"> //从0位开始匹配</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (point1 &lt; ol)</span><span style=\"color: #6A9955\">            //临界值</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (point2 == ULLONG_MAX || </span><span style=\"color: #9CDCFE\">origin</span><span style=\"color: #D4D4D4\">[point1] == </span><span style=\"color: #9CDCFE\">target</span><span style=\"color: #D4D4D4\">[point2])</span><span style=\"color: #6A9955\"> //相应字符匹配成功，继续</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            point2++, point1++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">else</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            point2 = </span><span style=\"color: #9CDCFE\">Next</span><span style=\"color: #D4D4D4\">[point2];</span><span style=\"color: #6A9955\"> //失配</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (point2 == tl)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            sum++, point2 = </span><span style=\"color: #9CDCFE\">Next</span><span style=\"color: #D4D4D4\">[point2];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> sum;</span><span style=\"color: #6A9955\"> //返回</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h2 id=\"Sunday算法：\"><a href=\"#Sunday算法：\" class=\"headerlink\" title=\"Sunday算法：\"></a>Sunday算法：</h2><p>找第一个匹配的下标</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> MAX_CHAR 256</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">GetNext</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">string</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">ot</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">Next</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Sunday</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">string</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #9CDCFE\">origin</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">ol</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">string</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #9CDCFE\">target</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">tl</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">GetNext</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">string</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">ot</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">Next</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\"> //标记各个字符所在的最大位置</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= ot; ++i)</span><span style=\"color: #6A9955\"> //标记</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">Next</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #569CD6\">static_cast</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\">&gt;(</span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #D4D4D4\">[i - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">])] = i;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Sunday</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">string</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #9CDCFE\">origin</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">ol</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">string</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #9CDCFE\">target</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">tl</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">Next</span><span style=\"color: #D4D4D4\">[MAX_CHAR]{};</span><span style=\"color: #6A9955\"> //声明next数组，用于存放字符位移量</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">GetNext</span><span style=\"color: #D4D4D4\">(target, tl, Next);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\"> // origin 的下标 . target 的下标</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (i &lt;= ol - tl)</span><span style=\"color: #6A9955\"> //走到尾部退出循环</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        j = i, k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">                                      // origin的下标指向最新的位置，target的下标重置，指向首位</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (j &lt; ol &amp;&amp; k &lt; tl &amp;&amp; </span><span style=\"color: #9CDCFE\">origin</span><span style=\"color: #D4D4D4\">[j] == </span><span style=\"color: #9CDCFE\">target</span><span style=\"color: #D4D4D4\">[k])</span><span style=\"color: #6A9955\"> //如果相同，且未越界，则进行下一个字符的比对</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            j++, k++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (k == tl)</span><span style=\"color: #6A9955\"> //如果比对成功，则有k= target的长度，可进行操作</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> j - tl;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (i + tl &lt; ol)</span><span style=\"color: #6A9955\">                               //如果在范围内，则重新将i定义为</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            i += (tl - </span><span style=\"color: #9CDCFE\">Next</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #569CD6\">static_cast</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\">&gt;(</span><span style=\"color: #9CDCFE\">origin</span><span style=\"color: #D4D4D4\">[i + tl])] + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\"> ////////****算法核心****////////</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">        /*  origin[i+tl]  指的是原字符串下一个字符，next[]是储存该字符位移量的数组。</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">            如果target里有该字符，则进行指定长度的位移，没有则位移 (target的长度 +1)   */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">else</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\"> //优化</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> ol;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>计算包含多少个子串</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> MAX_CHAR 256</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">GetNext</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">string</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">ot</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">Next</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Sunday</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">string</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #9CDCFE\">origin</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">ol</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">string</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #9CDCFE\">target</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">tl</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">GetNext</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">string</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">ot</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">Next</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\"> //标记各个字符所在的最大位置</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= ot; ++i)</span><span style=\"color: #6A9955\"> //标记</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">Next</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #569CD6\">static_cast</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\">&gt;(</span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #D4D4D4\">[i - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">])] = i;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Sunday</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">string</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #9CDCFE\">origin</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">ol</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">string</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #9CDCFE\">target</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">tl</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">Next</span><span style=\"color: #D4D4D4\">[MAX_CHAR]{}, sum = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\"> //声明next数组，用于存放字符位移量</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">GetNext</span><span style=\"color: #D4D4D4\">(target, tl, Next);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\"> // origin 的下标 . target 的下标</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (i &lt;= ol - tl)</span><span style=\"color: #6A9955\"> //走到尾部退出循环</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        j = i, k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">                                      // origin的下标指向最新的位置，target的下标重置，指向首位</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (j &lt; ol &amp;&amp; k &lt; tl &amp;&amp; </span><span style=\"color: #9CDCFE\">origin</span><span style=\"color: #D4D4D4\">[j] == </span><span style=\"color: #9CDCFE\">target</span><span style=\"color: #D4D4D4\">[k])</span><span style=\"color: #6A9955\"> //如果相同，且未越界，则进行下一个字符的比对</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            ++j, ++k;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (k == tl)</span><span style=\"color: #6A9955\"> //如果比对成功，则有k= target的长度，可进行操作</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            ++sum;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (i + tl &lt; ol)</span><span style=\"color: #6A9955\">                                               //如果在范围内，则重新将i定义为</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            i += (tl - </span><span style=\"color: #9CDCFE\">Next</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #569CD6\">static_cast</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\">&gt;(</span><span style=\"color: #9CDCFE\">origin</span><span style=\"color: #D4D4D4\">[i + tl])] + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\"> ////////****算法核心****////////</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">        /*  origin[i+tl]  指的是原字符串下一个字符，next[]是储存该字符位移量的数组。</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">            如果target里有该字符，则进行指定长度的位移，没有则位移 (target的长度 +1)   */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">else</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\"> //优化</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> sum;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>上述两种算法都是比较快速的算法，都是通过初始化Next数组，来实现对比位置的快速跳转。其中KMP属于时间复杂度稳定的算法，在ACM竞赛中经常使用，由此来避免特殊的字符串。而Sunday算法属于时间复杂度不稳定的算法，偏向实用，在实际工程中的效率KMP算法高。</p>\n","feature":"true","text":"1.暴力匹配：设三个指针，第一个用来指向原字符串，表示当前位置。剩下两个分别用来指向当前正在进行匹配的字符。 这是最简单的字符串匹配，其效率比较低，在算法竞赛中...","permalink":"/post/字符串匹配算法","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"竞赛","slug":"竞赛","count":5,"path":"api/categories/竞赛.json"}],"tags":[{"name":"C++","slug":"C","count":13,"path":"api/tags/C.json"},{"name":"算法","slug":"算法","count":5,"path":"api/tags/算法.json"},{"name":"字符串","slug":"字符串","count":1,"path":"api/tags/字符串.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E6%9A%B4%E5%8A%9B%E5%8C%B9%E9%85%8D%EF%BC%9A\"><span class=\"toc-text\">1.暴力匹配：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-KMP%E7%AE%97%E6%B3%95%EF%BC%9A\"><span class=\"toc-text\">2.KMP算法：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Sunday%E7%AE%97%E6%B3%95%EF%BC%9A\"><span class=\"toc-text\">Sunday算法：</span></a></li></ol>","author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"关于Aurora主题代码高亮的问题","uid":"39fc6ddd2165079a9fa7e53c3022af95","slug":"关于Aurora主题代码高亮的问题","date":"2022-03-03T11:28:00.000Z","updated":"2023-03-31T12:18:49.121Z","comments":true,"path":"api/articles/关于Aurora主题代码高亮的问题.json","keywords":"C++,Pyhton,Java,算法","cover":null,"text":"起因这几天兴致勃勃的搞了一个博客，换了几款主题，最后还是选定了极富科技感的Aurora主题。按照官方文档，折腾配置了很久，终于能够使用了。可是最最最最最蛋疼的就...","permalink":"/post/关于Aurora主题代码高亮的问题","photos":[],"count_time":{"symbolsCount":852,"symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":10,"path":"api/categories/前端.json"}],"tags":[{"name":"CSS","slug":"CSS","count":8,"path":"api/tags/CSS.json"},{"name":"前端","slug":"前端","count":1,"path":"api/tags/前端.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true},"next_post":{"title":"第十一届蓝桥杯省赛C++ A组题解","uid":"bdc46d1d5c3047d25f1a097055d8e321","slug":"第十一届蓝桥杯省赛C-A组题解","date":"2022-03-02T12:30:00.000Z","updated":"2023-09-25T16:37:41.409Z","comments":true,"path":"api/articles/第十一届蓝桥杯省赛C-A组题解.json","keywords":"C++,Pyhton,Java,算法","cover":"https://p1.itc.cn/q_70/images03/20210405/39e7d9235f7e4664a0bde57369771751.jpeg","text":"出于能力和精力问题，有一部分题目暂无题解，见谅 试题A 门牌制作小蓝要为一条街的住户制作门牌号这条街一共有 2020 位住户，门牌号从 1 到 2020 编号。...","permalink":"/post/第十一届蓝桥杯省赛C-A组题解","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"竞赛","slug":"竞赛","count":5,"path":"api/categories/竞赛.json"}],"tags":[{"name":"C++","slug":"C","count":13,"path":"api/tags/C.json"},{"name":"算法","slug":"算法","count":5,"path":"api/tags/算法.json"},{"name":"蓝桥杯","slug":"蓝桥杯","count":3,"path":"api/tags/蓝桥杯.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":"true"}}