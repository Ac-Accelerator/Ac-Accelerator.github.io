{"title":"STM32入门（三）：时钟配置","uid":"4ec857b23ce5e6dcd3e699fe4235ea27","slug":"STM32入门（三）：时钟配置","date":"2023-07-14T09:04:28.000Z","updated":"2023-09-25T16:37:41.449Z","comments":true,"path":"api/articles/STM32入门（三）：时钟配置.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/STM32cover.png","content":"<p>基本上所有的单片机功能都离不开时钟的帮助啦！所以时钟的配置是非常重要的。基本上是单片机开发的第一步呢！</p>\n<h2 id=\"时钟系统初始化\"><a href=\"#时钟系统初始化\" class=\"headerlink\" title=\"时钟系统初始化\"></a>时钟系统初始化</h2><img src=\"/img/STM32时钟.png\">\n\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stm32f1xx_hal.h&gt;</span><span style=\"color: #569CD6\"> </span><span style=\"color: #6A9955\">//要使用hal库，必须使用这个头文件</span></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">HAL_StatusTypeDef</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Stm32_Clock_Init</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">//时钟初始化函数</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    /*</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    首先初始化HAL库</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    这个函数首先会设置中断优先级分组</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    然后使用HSI作为默认时钟，设置1ms触发一个系统定时器的中断,中断优先级默认设置为15。</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    最后会初始化底层硬件</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_Init</span><span style=\"color: #D4D4D4\">(); </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">Stm32_Clock_Init</span><span style=\"color: #D4D4D4\">()；</span><span style=\"color: #6A9955\">//时钟初始化</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">HAL_StatusTypeDef</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Stm32_Clock_Init</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    HAL_StatusTypeDef ret = HAL_OK;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    RCC_OscInitTypeDef RCC_OscInitStructure;</span><span style=\"color: #6A9955\">//晶震初始化结构体</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    RCC_ClkInitTypeDef RCC_ClkInitStructure;</span><span style=\"color: #6A9955\">//时钟初始化结构体</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">RCC_OscInitStructure</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">OscillatorType</span><span style=\"color: #D4D4D4\"> = RCC_OSCILLATORTYPE_HSE;</span><span style=\"color: #6A9955\"> // 该结构体配置的目标是HSE</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">RCC_OscInitStructure</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">HSEState</span><span style=\"color: #D4D4D4\"> = RCC_HSE_ON;</span><span style=\"color: #6A9955\">                   // 设置HSE的状态为打开</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">RCC_OscInitStructure</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">HSEPredivValue</span><span style=\"color: #D4D4D4\"> = RCC_HSE_PREDIV_DIV1;</span><span style=\"color: #6A9955\">    // 时钟信号经过PLLXTPRE(PREDIV1)时不分频</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">RCC_OscInitStructure</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">PLL</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">PLLState</span><span style=\"color: #D4D4D4\"> = RCC_PLL_ON;</span><span style=\"color: #6A9955\">               // 设置PLL状态为打开</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">RCC_OscInitStructure</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">PLL</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">PLLSource</span><span style=\"color: #D4D4D4\"> = RCC_PLLSOURCE_HSE;</span><span style=\"color: #6A9955\">       // 选择HSE为PLL时钟源(PLLSRC)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">RCC_OscInitStructure</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">PLL</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">PLLMUL</span><span style=\"color: #D4D4D4\"> = RCC_PLL_MUL9;</span><span style=\"color: #6A9955\">               // 主PLL倍频因子(PLLMUL)，9倍频，得到72M</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    ret = </span><span style=\"color: #DCDCAA\">HAL_RCC_OscConfig</span><span style=\"color: #D4D4D4\">(&amp;RCC_OscInitStructure);</span><span style=\"color: #6A9955\">               // 初始化</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (ret != HAL_OK)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> ret;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">RCC_ClkInitStructure</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">ClockType</span><span style=\"color: #D4D4D4\"> = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);</span><span style=\"color: #6A9955\">// 选择配置SYSCLK、HCLK,PCLK1和PCLK2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">RCC_ClkInitStructure</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">SYSCLKSource</span><span style=\"color: #D4D4D4\"> = RCC_SYSCLKSOURCE_PLLCLK;</span><span style=\"color: #6A9955\">       // 设置SYSCLK为PLL</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">RCC_ClkInitStructure</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">AHBCLKDivider</span><span style=\"color: #D4D4D4\"> = RCC_SYSCLK_DIV1;</span><span style=\"color: #6A9955\">              // AHB分频系数为1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">RCC_ClkInitStructure</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">APB1CLKDivider</span><span style=\"color: #D4D4D4\"> = RCC_HCLK_DIV2;</span><span style=\"color: #6A9955\">               // APB1分频系数为2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">RCC_ClkInitStructure</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">APB2CLKDivider</span><span style=\"color: #D4D4D4\"> = RCC_HCLK_DIV1;</span><span style=\"color: #6A9955\">               // APB2分频系数为1</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    /* 同时设置FLASH延时周期为2WS，也就是3个CPU周期。这是因为CPU比flash速度快，例如flash最快24MHz，如果CPU频率超过这个频率，就必须加入等待时间，比如一般用72MHz主频，那么flash等待周期必须设置为2*/</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    ret = </span><span style=\"color: #DCDCAA\">HAL_RCC_ClockConfig</span><span style=\"color: #D4D4D4\">(&amp;RCC_ClkInitStructure, FLASH_LATENCY_2); </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (ret != HAL_OK)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> ret;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> HAL_OK;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">SysTick_Handler</span><span style=\"color: #D4D4D4\">()</span><span style=\"color: #6A9955\">//系统计时器中断处理程序（重要⚠️如果没定义则无法处理系统定时器的中断）</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_IncTick</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">//系统嘀嗒计时器加1（如果不调用这个函数，无法使用HAL_Delay函数，需要自己实现其他方法）</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span></code></pre></div><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>SysTick_Handler是系统定时器的中断处理程序。在HAL_Init中，设置系统定时器中断触发时间为1ms，因此这个函数1ms触发一次。在这个函数中，调用了HAL_IncTick()函数，这个函数的作用是将系统嘀嗒计时器的计数值加1。系统嘀嗒计时器的计数值是一个全局变量，它的值会在每次中断时加1，所以这个变量的值就是系统运行的时间，单位是ms。这个变量的值可以通过调用HAL_GetTick()函数获得。可以通过在该中断处理程序中完成一些周期性的工作。</p></blockquote>\n<p>至此，系统时钟以及系统计时器配置完成。</p>\n<h2 id=\"systick配置\"><a href=\"#systick配置\" class=\"headerlink\" title=\"systick配置\"></a>systick配置</h2><div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DCDCAA\">HAL_SYSTICK_CLKSourceConfig</span><span style=\"color: #D4D4D4\">(SYSTICK_CLKSOURCE_HCLK);</span></span></code></pre></div><p>将系统嘀嗒计时器的时钟源设置为HCLK，也就是72MHz。</p>\n<p>在HAL_Init函数中，默认是将系统嘀嗒计时器的时钟源设置为HCLK，所以这一步可以省略。</p>\n<h2 id=\"时间延迟功能\"><a href=\"#时间延迟功能\" class=\"headerlink\" title=\"时间延迟功能\"></a>时间延迟功能</h2><div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DCDCAA\">HAL_Delay</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1000</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p>上述函数的作用是延迟1000ms，也就是1s。</p>\n<p>如果要做到微秒级的延时控制，可以通过软件实现，但是精准度不高，所以一般使用硬件定时器（TIM）来实现。</p>\n<p>软件实现：</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">delay_us</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">u32</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">nus</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">  //软件控制微秒级延时</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    u32 ticks;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    u32 told, tnow, tcnt = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    u32 reload = </span><span style=\"color: #9CDCFE\">SysTick</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">LOAD</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\"> // LOAD的值</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    ticks = nus * </span><span style=\"color: #B5CEA8\">72</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">       // 需要的节拍数</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    told = </span><span style=\"color: #9CDCFE\">SysTick</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">VAL</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">        // 刚进入时的计数器值</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        tnow = </span><span style=\"color: #9CDCFE\">SysTick</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">VAL</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (tnow != told)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (tnow &lt; told)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                tcnt += told - tnow;</span><span style=\"color: #6A9955\"> // SYSTICK是一个递减的计数器就可以了.</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">else</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                tcnt += reload - tnow + told;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            told = tnow;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (tcnt &gt;= ticks)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\"> // 时间超过/等于要延迟的时间,则退出.</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    };</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div>","feature":true,"text":"基本上所有的单片机功能都离不开时钟的帮助啦！所以时钟的配置是非常重要的。基本上是单片机开发的第一步呢！ 时钟系统初始化 cpp#include &lt;stm3...","permalink":"/post/STM32入门（三）：时钟配置","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"嵌入式","slug":"嵌入式","count":8,"path":"api/categories/嵌入式.json"}],"tags":[{"name":"STM32","slug":"STM32","count":8,"path":"api/tags/STM32.json"},{"name":"单片机","slug":"单片机","count":8,"path":"api/tags/单片机.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%B6%E9%92%9F%E7%B3%BB%E7%BB%9F%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">时钟系统初始化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#systick%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">systick配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%B6%E9%97%B4%E5%BB%B6%E8%BF%9F%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">时间延迟功能</span></a></li></ol>","author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"STM32入门（四）：GPIO","uid":"68d21eb3a7189bac765001dce9d152b5","slug":"STM32入门（四）：GPIO","date":"2023-07-14T14:36:30.000Z","updated":"2023-09-25T16:37:41.405Z","comments":true,"path":"api/articles/STM32入门（四）：GPIO.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/STM32cover.png","text":"什么是GPIOGPIO（General-Purpose Input/Output，通用输入输出）是指集成电路或电子电路（例如MCU/MPU）板上的一个未提交的数...","permalink":"/post/STM32入门（四）：GPIO","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"嵌入式","slug":"嵌入式","count":8,"path":"api/categories/嵌入式.json"}],"tags":[{"name":"STM32","slug":"STM32","count":8,"path":"api/tags/STM32.json"},{"name":"单片机","slug":"单片机","count":8,"path":"api/tags/单片机.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true},"next_post":{"title":"STM32入门（二）：开发环境配置","uid":"38fc18eebdbdaec5f989594360c2293b","slug":"STM32入门（二）：开发环境配置","date":"2023-07-14T06:13:00.000Z","updated":"2023-07-16T03:51:40.188Z","comments":true,"path":"api/articles/STM32入门（二）：开发环境配置.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/STM32cover.png","text":"操作系统环境Ubuntu 22.04.2 LTS 开发软件配置Visual Studio Code 安装插件 C/C++ PlatformIO IDE 新建Pl...","permalink":"/post/STM32入门（二）：开发环境配置","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"嵌入式","slug":"嵌入式","count":8,"path":"api/categories/嵌入式.json"}],"tags":[{"name":"STM32","slug":"STM32","count":8,"path":"api/tags/STM32.json"},{"name":"单片机","slug":"单片机","count":8,"path":"api/tags/单片机.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true}}