{"title":"Linux系统编程（进程）","uid":"68c10486ec2cc89517f4c1626fec120f","slug":"Linux系统编程（进程）","date":"2024-02-04T01:36:23.000Z","updated":"2024-08-19T04:37:29.159Z","comments":true,"path":"api/articles/Linux系统编程（进程）.json","keywords":"C++,Pyhton,Java,算法","cover":"img/linux.jpeg","content":"<h1 id=\"PCB进程控制块\"><a href=\"#PCB进程控制块\" class=\"headerlink\" title=\"PCB进程控制块\"></a>PCB进程控制块</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> task_struct {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">unsigned</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> __state;</span><span style=\"color: #6A9955\"> /* 进程状态：运行、等待、停止等 */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">pid_t</span><span style=\"color: #D4D4D4\"> pid;</span><span style=\"color: #6A9955\">            /* 进程标识符 */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">pid_t</span><span style=\"color: #D4D4D4\"> tgid;</span><span style=\"color: #6A9955\">           /* 父进程的标识符 */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> prio;</span><span style=\"color: #6A9955\">             /* 进程的动态优先级 */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> static_prio;</span><span style=\"color: #6A9955\">      /* 静态优先级 */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> normal_prio;</span><span style=\"color: #6A9955\">      /*正常优先级*/</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">unsigned</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> policy;</span><span style=\"color: #6A9955\"> /* 进程的策略：如SCHED_FIFO, SCHED_RR, SCHED_NORMAL等 */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> mm_struct *mm;</span><span style=\"color: #6A9955\">             /* 进程的地址空间描述符 */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *stack;</span><span style=\"color: #6A9955\">                      /* 内核态堆栈的指针 */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  u64 start_time;</span><span style=\"color: #6A9955\">                   /* Monotonic time in nsecs: */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  u64 utime;</span><span style=\"color: #6A9955\">                        /* 进程的累计用户态时间 */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  u64 stime;</span><span style=\"color: #6A9955\">                        /* 进程的累计内核态时间 */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> signal_struct *signal;</span><span style=\"color: #6A9955\">     /* Signal handlers: */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> task_struct __rcu *parent;</span><span style=\"color: #6A9955\"> /* Recipient of SIGCHLD, wait4() reports: */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> list_head sibling;</span><span style=\"color: #6A9955\">         /* 兄弟进程链表指针 */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> list_head children;</span><span style=\"color: #6A9955\">        /* 子进程链表 */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> files_struct *files;</span><span style=\"color: #6A9955\">       /* Open file information: */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> fs_struct *fs;</span><span style=\"color: #6A9955\">             /* Filesystem information: include umask*/</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">sigset_t</span><span style=\"color: #D4D4D4\"> blocked;</span><span style=\"color: #6A9955\">                 /* 信号屏蔽位图 */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> task_struct *group_leader;</span><span style=\"color: #6A9955\"> /* 进程所在线程组的领导进程指针 */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> nr_cpus_allowed;</span><span style=\"color: #6A9955\">              /* CPU亲和性 */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sched_entity se;</span><span style=\"color: #6A9955\">           /* 调度实体 */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sched_rt_entity rt;</span><span style=\"color: #6A9955\">        /* 实时调度实体 */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> prev_cputime prev_cputime;</span><span style=\"color: #6A9955\"> /* snapshot of system and user cputime */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sched_class *sched_class;</span><span style=\"color: #6A9955\"> /* 进程的调度类 */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> nsproxy *nsproxy;</span><span style=\"color: #6A9955\">               /* Namespaces: */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> thread_struct thread;</span><span style=\"color: #6A9955\">      /* CPU-specific state of this task: 进程切换后寄存器值保存在这里*/</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#ifdef</span><span style=\"color: #569CD6\"> CONFIG_CGROUPS</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> css_set __rcu</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      *cgroups;</span><span style=\"color: #6A9955\"> /* Control Group info protected by css_set_lock: */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> list_head</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      cg_list;</span><span style=\"color: #6A9955\"> /* cg_list protected by css_set_lock and tsk-&gt;alloc_lock: */</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#endif</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span></code></pre></div><h1 id=\"fork函数\"><a href=\"#fork函数\" class=\"headerlink\" title=\"fork函数\"></a>fork函数</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/types.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">pid_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">fork</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>fork()</code> 函数通过复制调用进程创建一个新进程。新进程被称为子进程，调用进程被称为父进程。 <strong><code>fork()</code>函数是用于创建新进程的标准方式</strong></p>\n<p>子进程和父进程在独立的内存空间中运行。在 <code>fork()</code> 调用时，两个内存空间拥有相同的内容。一个进程执行的内存写入、文件映射 (mmap(2)) 和解除映射 (munmap(2)) 操作不会影响另一个进程。</p>\n<p>子进程是父进程的精确副本，但以下几点除外：</p>\n<ul>\n<li>子进程拥有其唯一的进程 ID (PID)，该 PID 与任何现有进程组（setpgid(2)）或会话的 ID 不匹配。</li>\n<li>子进程的父进程 ID (PPID)与父进程的进程 ID 相同。</li>\n<li>子进程不继承其父进程的内存锁(mlock(2), mlockall(2))。</li>\n<li>子进程的进程资源利用率(getrusage(2)) 和 CPU 时间计数器(times(2)) 被重置为零。</li>\n<li>子进程的待处理信号集最初为空 (sigpending(2))。</li>\n<li>子进程不继承其父进程的信号量调整(semop(2))。</li>\n<li>子进程不继承其父进程的进程关联记录锁(fcntl(2))。（另一方面，它继承了父进程的 fcntl(2) </li>\n<li>开文件描述符锁和 flock(2) 锁。）</li>\n<li>子进程不继承其父进程的定时器(setitimer(2), alarm(2), timer_create(2))。</li>\n<li>子进程不继承其父进程的未完成异步 I/O 操作(aio_read(3), aio_write(3))，也不继承其父进程的任何异步 I/O 上下文(参见 io_setup(2))。</li>\n</ul>\n<p>成功调用时，父进程返回子进程的 PID，子进程返回 0。失败时，父进程返回 -1，不创建子进程，并设置相应的 errno。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>当 <code>fork</code> 被调用时，操作系统会创建一个子进程，并为子进程分配一个与父进程相同的地址空间。但是，实际的物理内存不会立即被复制。父进程和子进程共享相同的物理内存页面。只有在父进程或子进程尝试修改某个页面时，操作系统才会将该页面复制一份，并分别分配给两个进程。这种技术被称为“写时复制”。</p>\n<p>由于 fork 调用之后，子进程是父进程的精确拷贝，意味着下次执行的位置也是一样的，因此会各自从 fork 之后的代码开始执行，所以子进程不会执行 fork 之前的代码。</p>\n</p>\n</div>\n<h1 id=\"getpid函数\"><a href=\"#getpid函数\" class=\"headerlink\" title=\"getpid函数\"></a>getpid函数</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/types.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">pid_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">getpid</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">pid_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">getppid</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>getpid()</code> 返回调用进程的进程 ID (PID)。（这通常由生成唯一临时文件名的例程使用。）</p>\n<p><code>getppid()</code> 返回调用进程的父进程的进程 ID。这将是使用 <code>fork()</code> 创建此进程的进程的 ID，或者，如果该进程已经终止，则将是此进程已被重新设置父进程的进程的 ID（可以是 init(1) 或者通过 prctl(2) PR_SET_CHILD_SUBREAPER 操作定义的 “subreaper” 进程）（我这里是systemd）。</p>\n<p>这两个函数绝对不会运行失败。</p>\n<h1 id=\"exec函数族\"><a href=\"#exec函数族\" class=\"headerlink\" title=\"exec函数族\"></a>exec函数族</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">extern</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> **environ;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">execl</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">pathname</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">arg</span><span style=\"color: #D4D4D4\">, ...</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">                /* (char  *) NULL */</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">execlp</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">file</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">arg</span><span style=\"color: #D4D4D4\">, ...</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">                /* (char  *) NULL */</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">execle</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">pathname</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">arg</span><span style=\"color: #D4D4D4\">, ...</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">                /*, (char *) NULL, char *const envp[] */</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">execv</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">pathname</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">argv</span><span style=\"color: #569CD6\">[]</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">execvp</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">file</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">argv</span><span style=\"color: #569CD6\">[]</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">execvpe</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">file</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">argv</span><span style=\"color: #569CD6\">[]</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">envp</span><span style=\"color: #569CD6\">[]</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p>exec() 函数族用新的进程映像替换当前进程映像。本手册页中描述的函数位于 execve(2) 之上。</p>\n<p>这些函数的第一个参数是要执行的文件的名称。</p>\n<p>这些函数可以根据 “exec” 前缀后面的字母进行分组：</p>\n<ol>\n<li>l - execl()，execlp()，execle()<ul>\n<li><code>const char *arg</code> 和后面的省略号可以认为是 arg0, arg1, …, argn。它们共同描述了一个或多个指向以空值终止的字符串的指针列表，这些字符串表示可执行程序可用的参数列表。按照惯例，第一个参数应该指向与被执行文件关联的文件名。参数列表必须由一个空指针终止，并且由于这些是可变参数函数，因此必须将此指针强制转换为 (char *) NULL。</li>\n<li>与 ‘l’ 函数相比，’v’ 函数（如下）将被执行程序的命令行参数指定为一个向量。</li>\n</ul>\n</li>\n<li>v - execv()，execvp()，execvpe()<ul>\n<li><code>char *const argv[]</code> 参数是一个指向以空值终止的字符串的指针数组，这些字符串表示新程序可用的参数列表。按照惯例，第一个参数应该指向与被执行文件关联的文件名。指针数组必须由一个空指针终止。</li>\n</ul>\n</li>\n<li>e - execle()，execvpe()<ul>\n<li>调用者的环境通过参数 <code>envp</code> 指定。<code>envp</code> 参数是一个指向以空值终止的字符串的指针数组，并且必须由一个空指针终止。</li>\n<li>所有其他 <code>exec()</code> 函数（后缀中不包含 ‘e’）从调用进程中的外部变量 <code>environ</code> 获取新进程映像的环境。</li>\n</ul>\n</li>\n<li>p - execlp()，execvp()，execvpe()<ul>\n<li>如果指定的文件名不包含斜杠 (/) 字符，则这些函数会像 shell 一样搜索可执行文件。将在 PATH 环境变量中指定的以冒号分隔的目录路径名列表中搜索该文件。如果未定义此变量，则路径列表默认为包含  <code>confstr(_CS_PATH)</code>  返回的目录（通常返回  “/bin:/usr/bin”）以及可能的当前工作目录的列表；有关更多详细信息，请参见“注意”。</li>\n<li>如果指定的文件名包含斜杠字符，则将忽略 PATH，并执行指定路径名处的文件。</li>\n<li>此外，某些错误会被特殊处理。</li>\n<li>如果某个文件的权限被拒绝（尝试的  <code>execve(2)</code>  因错误  <code>EACCES</code>  而失败），则这些函数将继续搜索搜索路径的其余部分。但是，如果没有找到其他文件，它们将返回并将  <code>errno</code>  设置为  <code>EACCES</code>。</li>\n<li>如果无法识别文件的标头（尝试的  <code>execve(2)</code>  因错误  <code>ENOEXEC</code>  而失败），则这些函数将执行 shell (/bin/sh)，并将文件的路径作为其第一个参数。（如果此尝试失败，则不会进行进一步搜索。）</li>\n<li>所有其他  <code>exec()</code>  函数（后缀中不包含  ‘p’）将其第一个参数作为标识要执行程序的（相对或绝对）路径名。</li>\n</ul>\n</li>\n</ol>\n<p>在 execve() 期间，所有进程属性都将保留，但以下各项除外：</p>\n<ul>\n<li>任何被捕获信号的处置都将重置为默认值 (signal(7))。</li>\n<li>任何备用信号堆栈都不会保留 (sigaltstack(2))。</li>\n<li>内存映射不会保留 (mmap(2))。</li>\n<li>附加的 System V 共享内存段将被分离 (shmat(2))。</li>\n<li>POSIX 共享内存区域将被取消映射 (shm_open(3))。</li>\n<li>打开的 POSIX 消息队列描述符将被关闭 (mq_overview(7))。</li>\n<li>任何打开的 POSIX 命名信号量都将被关闭 (sem_overview(7))。</li>\n<li>POSIX 定时器不会保留 (timer_create(2))。</li>\n<li>任何打开的目录流都将被关闭 (opendir(3))。</li>\n<li>内存锁不会保留 (mlock(2), mlockall(2))。</li>\n<li>退出处理程序不会保留 (atexit(3), on_exit(3))。</li>\n<li>浮点环境将重置为默认值（请参阅 fenv(3)）。</li>\n</ul>\n<p><strong>仅当发生错误时，<code>exec()</code> 函数才会返回（如果没有发生错误exec函数后的代码将不会被执行）。</strong> 返回值为 -1，并设置  <code>errno</code>  以指示错误。 所以通常我们直接在exec函数调用后直接调用<code>perror()</code>，和<code>exit()</code>，无需if判断。</p>\n<h1 id=\"孤儿进程和僵尸进程\"><a href=\"#孤儿进程和僵尸进程\" class=\"headerlink\" title=\"孤儿进程和僵尸进程\"></a>孤儿进程和僵尸进程</h1><p>在 Linux 中，当一个父进程退出而它的一个或多个子进程仍在运行时，这些子进程就会变成<strong>孤儿进程</strong>。Linux 系统会通过 <strong>init 进程</strong> (进程 ID 为 1) 来处理孤儿进程，具体步骤如下:</p>\n<ol>\n<li><strong>检测:</strong> 当一个进程退出时，内核会检查它是否有子进程。</li>\n<li><strong>标识:</strong> 如果发现有子进程，并且这些子进程的父进程 ID 仍然是原先的父进程 ID（而不是 init 进程的 ID），那么这些子进程就会被标记为孤儿进程。</li>\n<li><strong>过继:</strong>  init 进程会定期检查系统中是否存在孤儿进程，并将所有检测到的孤儿进程“过继”为自己的子进程。这意味着这些孤儿进程的父进程 ID 会被更改为 1 (init 进程的 ID)。</li>\n<li><strong>资源回收:</strong>  init 进程会监控它所有子进程（包括过继来的孤儿进程）的状态。当一个子进程结束后，init 进程会负责回收该子进程占用的系统资源，例如内存、文件描述符等。</li>\n</ol>\n<p><strong>为什么要这样做？</strong></p>\n<ul>\n<li><strong>防止资源泄漏:</strong> 如果没有 init 进程的接管，孤儿进程会一直存在于系统中，即使它们已经完成了任务。这会导致系统资源（例如内存、文件描述符）无法被释放，最终可能导致系统崩溃。</li>\n<li><strong>提供正常终止环境:</strong>  init 进程会等待孤儿进程结束后再进行资源回收，这使得孤儿进程有机会完成清理工作并正常退出，而不是被强制终止。</li>\n</ul>\n<p>如果一个死循环程序成为了孤儿进程，请使用 <code>kill -9 PID</code> 来杀死它。</p>\n<p><strong>僵尸进程</strong></p>\n<p>僵尸进程是指一个子进程已经终止，但是其退出状态信息还没有被其父进程读取。由于父进程还没有处理这个子进程的终止状态，子进程的进程控制块（PCB）依然存在，因而被称为“僵尸”。</p>\n<p><strong>处理僵尸进程的方法</strong></p>\n<ol>\n<li><p><strong>等待父进程:</strong> 最理想的情况是父进程使用 <code>wait()</code> 或 <code>waitpid()</code> 系统调用来等待子进程结束并读取其退出状态。这将清理僵尸进程。</p>\n</li>\n<li><p><strong>发送 <code>SIGCHLD</code> 信号:</strong>  如果父进程没有等待子进程，可以向父进程发送 <code>SIGCHLD</code> 信号。这会提醒父进程去处理子进程的退出状态。</p>\n</li>\n<li><p><strong>终止父进程:</strong> 如果父进程没有响应 <code>SIGCHLD</code> 信号，使子进程成为孤儿进程，然后由 <code>init</code> 进程接管。<code>init</code> 进程会负责清理僵尸进程。</p>\n</li>\n</ol>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>为什么父进程要读取子的退出状态后，子进程才消失？</p>\n<p><strong>进程控制块（PCB）的保留</strong>：当子进程终止时，内核需要保留其进程控制块（PCB）以便父进程能够读取子进程的退出状态。如果立即删除子进程的PCB，父进程将无法获得子进程的退出信息。</p>\n<p><strong>进程同步</strong>：父进程可能需要知道子进程是如何终止的（正常退出或被信号终止），以及它的退出码。通过保留子进程的PCB，父进程可以在适当的时间通过wait或waitpid获取这些信息，从而实现进程间的同步和资源管理。</p>\n\n</div>\n<h1 id=\"wait函数\"><a href=\"#wait函数\" class=\"headerlink\" title=\"wait函数\"></a>wait函数</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/types.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/wait.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">pid_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">wait</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">wstatus</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">pid_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">waitpid</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">pid_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">pid</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">wstatus</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">options</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p>所有这些系统调用都用于等待调用进程的子进程状态发生变化，并获取状态发生变化的子进程的信息。状态变化被认为是：子进程终止；子进程被信号停止；或者子进程被信号恢复。对于终止的子进程，执行等待操作允许系统释放与子进程相关的资源；如果没有执行等待，则终止的子进程将保持“僵尸”状态（请参阅下面的注释）。</p>\n<p>如果子进程已经改变状态，则这些调用将立即返回。否则，它们将阻塞，直到某个子进程状态发生变化或信号处理程序中断调用（假设没有使用 sigaction(2) 的 SA_RESTART 标志自动重启系统调用）。在本页的其余部分，状态已更改但尚未被这些系统调用之一等待的子进程被称为可等待 的。</p>\n<p><code>wait()</code> 系统调用会暂停调用线程的执行，直到它的一个子进程终止。调用 wait(&amp;wstatus) 等效于：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DCDCAA\">waitpid</span><span style=\"color: #D4D4D4\">(-</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, &amp;</span><span style=\"color: #9CDCFE\">wstatus</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>waitpid()</code> 系统调用会暂停调用线程的执行，直到由 <code>pid</code> 参数指定的子进程状态发生变化。默认情况下，<code>waitpid()</code> 只等待终止的子进程，但是可以通过 <code>options</code> 参数修改此行为，如下所述：</p>\n<p>pid 的值可以是：</p>\n<ul>\n<li><strong>&lt; -1</strong>:  表示等待进程组 ID 等于 <code>pid</code> 绝对值的任何子进程。</li>\n<li><strong>-1</strong>:   表示等待任何子进程。</li>\n<li><strong>0</strong>:    表示等待进程组 ID 等于调用 <code>waitpid()</code> 时调用进程的进程组 ID 的任何子进程。</li>\n<li><strong>&gt; 0</strong>:  表示等待进程 ID 等于 <code>pid</code> 值的子进程。</li>\n</ul>\n<p><code>wait()</code>: 成功时，返回终止子进程的进程 ID；出错时，返回 -1。设置错误码 <code>errno</code>。</p>\n<p><code>waitpid()</code>: 成功时，返回状态发生变化的子进程的进程 ID；如果指定了 <code>options=WNOHANG</code> 并且存在由 <code>pid</code> 指定的一个或多个子进程，但其状态尚未更改，则返回 0。出错时，返回 -1。设置错误码 <code>errno</code>。</p>\n<p>没有相符合的子进程的时候，错误码为 <code>ECHILD</code>。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>一次<code>wait()</code>或<code>waitpid()</code>只能等待一个子进程，如果有多个子进程需要等待，可以使用循环调用。</p>\n</p>\n</div>\n<p>这是一个使用wait函数的例子：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdlib.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/wait.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">pid_t</span><span style=\"color: #D4D4D4\"> pid = </span><span style=\"color: #DCDCAA\">fork</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">  // 创建一个子进程</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (pid &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// fork失败</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"fork failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    } </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (pid == </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// 这是子进程</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Child process (PID: </span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #CE9178\">) is running</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #DCDCAA\">getpid</span><span style=\"color: #D4D4D4\">());</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">sleep</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">  // 子进程睡眠2秒</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Child process (PID: </span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #CE9178\">) is exiting</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #DCDCAA\">getpid</span><span style=\"color: #D4D4D4\">());</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">  // 子进程正常退出</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    } </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #6A9955\">// 这是父进程</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Parent process (PID: </span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #CE9178\">) is waiting for child to exit</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #DCDCAA\">getpid</span><span style=\"color: #D4D4D4\">());</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> status;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">pid_t</span><span style=\"color: #D4D4D4\"> child_pid = </span><span style=\"color: #DCDCAA\">wait</span><span style=\"color: #D4D4D4\">(&amp;status);</span><span style=\"color: #6A9955\">  // 等待子进程退出</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (child_pid &gt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">WIFEXITED</span><span style=\"color: #D4D4D4\">(status)) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #6A9955\">// 子进程正常退出</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Child process (PID: </span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #CE9178\">) exited with status </span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, child_pid, </span><span style=\"color: #DCDCAA\">WEXITSTATUS</span><span style=\"color: #D4D4D4\">(status));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            } </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #6A9955\">// 子进程异常退出</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Child process (PID: </span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #CE9178\">) did not exit normally</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, child_pid);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        } </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #6A9955\">// wait失败</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"wait failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h1 id=\"管道\"><a href=\"#管道\" class=\"headerlink\" title=\"管道\"></a>管道</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">pipe</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">pipefd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;fcntl.h&gt;</span><span style=\"color: #569CD6\">              </span><span style=\"color: #6A9955\">/* Obtain O_* constant definitions */</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">pipe2</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">pipefd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">], </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">flags</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>pipe()</code> 函数创建一个管道，它是一个可以用于进程间通信的单向数据通道。数组 <code>pipefd</code> 用于返回两个文件描述符，分别指向管道的两端。<code>pipefd[0]</code> 指向管道的读取端。 <code>pipefd[1]</code> 指向管道的写入端。写入管道写入端的数据会被内核缓冲，直到从管道的读取端读取为止。更多详细信息，请参阅 pipe(7)。</p>\n<p>成功时返回 0。出错时返回 -1，并设置相应的 <code>errno</code>，且 <code>pipefd</code> 保持不变。</p>\n<p>如果 <code>flags</code> 为 0，则 <code>pipe2()</code> 的行为与 <code>pipe()</code> 相同。以下值可以使用按位或运算符 (ORed) 在 <code>flags</code> 中组合，以获得不同的行为：</p>\n<p><code>pipe2</code> 函数的 <code>flags</code> 参数可以用于设置不同的标志，以改变管道的行为。以下是可能的取值及其对应的功能：</p>\n<table>\n<thead>\n<tr>\n<th>Flag</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>O_CLOEXEC</code></td>\n<td>在执行 <code>exec</code> 系列函数时关闭文件描述符。</td>\n</tr>\n<tr>\n<td><code>O_NONBLOCK</code></td>\n<td>设置管道为非阻塞模式。读取或写入操作不会阻塞进程。使用此标志可以省去额外的 fcntl(2) 调用以达到相同的结果。</td>\n</tr>\n<tr>\n<td><code>O_DIRECT</code></td>\n<td>尝试最小化内核缓存效果，使I/O直接从用户空间缓冲区和硬件之间传输，通常用于提升性能。<strong>（有注意事项，请参考手册！）</strong></td>\n</tr>\n</tbody></table>\n<p>下面是一个使用pipe的例子，请看注释：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/wait.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdlib.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;string.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">pipe_fd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">];</span><span style=\"color: #6A9955\">// 用于保存管道文件描述符</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">pid_t</span><span style=\"color: #D4D4D4\"> pid;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *msg = </span><span style=\"color: #CE9178\">\"Hello from parent to child!\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">buffer</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">128</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 创建管道</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">pipe</span><span style=\"color: #D4D4D4\">(pipe_fd) == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span><span style=\"color: #6A9955\">//在这个地方，会将管道的读写文件描述符保存到pipe_fd数组中</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"pipe\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 创建子进程</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    pid = </span><span style=\"color: #DCDCAA\">fork</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (pid == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"fork\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (pid == </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span><span style=\"color: #6A9955\"> // 子进程</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">pipe_fd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]);</span><span style=\"color: #6A9955\"> // 关闭写端</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">pipe_fd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">], buffer, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(buffer));</span><span style=\"color: #6A9955\"> // 从管道读取数据</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Child process received: </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, buffer);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">pipe_fd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">]);</span><span style=\"color: #6A9955\"> // 关闭读端</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    } </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> {</span><span style=\"color: #6A9955\"> // 父进程</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">pipe_fd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">]);</span><span style=\"color: #6A9955\"> // 关闭读端</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">write</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">pipe_fd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">], msg, </span><span style=\"color: #DCDCAA\">strlen</span><span style=\"color: #D4D4D4\">(msg) + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\"> // 向管道写入数据</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">pipe_fd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]);</span><span style=\"color: #6A9955\"> // 关闭写端</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">wait</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">NULL</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\"> // 等待子进程结束</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>当管道的写端关闭，且管道中的所有数据都被读取完毕时，读取管道那方的 read 函数会返回 0。这是一个指示“数据流结束”的标志。</p>\n\n</div>\n<h2 id=\"管道实现ls-l-wc-l\"><a href=\"#管道实现ls-l-wc-l\" class=\"headerlink\" title=\"管道实现ls -l | wc -l\"></a>管道实现ls -l | wc -l</h2><p>父进程写，子进程读</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;dirent.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdlib.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;string.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/stat.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/wait.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">argc</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> **</span><span style=\"color: #9CDCFE\">argv</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">pipe_fd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">pipe</span><span style=\"color: #D4D4D4\">(pipe_fd)) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"open pipe faild\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(-</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">pid_t</span><span style=\"color: #D4D4D4\"> pid = </span><span style=\"color: #DCDCAA\">fork</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!pid) {</span><span style=\"color: #6A9955\"> // 子进程</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">pipe_fd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">dup2</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">pipe_fd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">],STDIN_FILENO);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> * args</span><span style=\"color: #569CD6\">[]</span><span style=\"color: #D4D4D4\">={</span><span style=\"color: #CE9178\">\"wc\"</span><span style=\"color: #D4D4D4\">,</span><span style=\"color: #CE9178\">\"-l\"</span><span style=\"color: #D4D4D4\">,</span><span style=\"color: #569CD6\">NULL</span><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">execvp</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"wc\"</span><span style=\"color: #D4D4D4\">,args);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  } </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> {</span><span style=\"color: #6A9955\"> // 父进程</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">pipe_fd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">dup2</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">pipe_fd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">],STDOUT_FILENO);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">execlp</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"ls\"</span><span style=\"color: #D4D4D4\">,</span><span style=\"color: #CE9178\">\"ls\"</span><span style=\"color: #D4D4D4\">,</span><span style=\"color: #CE9178\">\"-l\"</span><span style=\"color: #D4D4D4\">,</span><span style=\"color: #9CDCFE\">argv</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">],</span><span style=\"color: #569CD6\">NULL</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>两个子进程通信，父进程等待两个子进程结束并回收资源。</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;dirent.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdlib.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;string.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/stat.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/wait.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">argc</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> **</span><span style=\"color: #9CDCFE\">argv</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">pipe_fd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">pipe</span><span style=\"color: #D4D4D4\">(pipe_fd)) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"open pipe faild\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(-</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">pid_t</span><span style=\"color: #D4D4D4\"> pid = </span><span style=\"color: #DCDCAA\">fork</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!pid) {</span><span style=\"color: #6A9955\"> // 子进程1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">pipe_fd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">dup2</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">pipe_fd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">], STDIN_FILENO);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *args</span><span style=\"color: #569CD6\">[]</span><span style=\"color: #D4D4D4\"> = {</span><span style=\"color: #CE9178\">\"wc\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">\"-l\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">NULL</span><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">execvp</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"wc\"</span><span style=\"color: #D4D4D4\">, args);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 父进程</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  pid = </span><span style=\"color: #DCDCAA\">fork</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!pid) {</span><span style=\"color: #6A9955\"> // 子进程2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">pipe_fd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">dup2</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">pipe_fd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">], STDOUT_FILENO);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">execlp</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"ls\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">\"ls\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">\"-l\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">argv</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">], </span><span style=\"color: #569CD6\">NULL</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">pipe_fd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">pipe_fd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">wait</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">NULL</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">wait</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">NULL</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h2 id=\"多个写者，一个读者\"><a href=\"#多个写者，一个读者\" class=\"headerlink\" title=\"多个写者，一个读者\"></a>多个写者，一个读者</h2><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;dirent.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdlib.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;string.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/stat.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/wait.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">pid_t</span><span style=\"color: #D4D4D4\"> pid;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">], i, n;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">buf</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> ret = </span><span style=\"color: #DCDCAA\">pipe</span><span style=\"color: #D4D4D4\">(fd);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (ret == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"pipe error\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> ((pid = </span><span style=\"color: #DCDCAA\">fork</span><span style=\"color: #D4D4D4\">()) == </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (pid == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"fork error\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (i == </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">write</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">], </span><span style=\"color: #CE9178\">\"1.hello</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #DCDCAA\">strlen</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"1.hello</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  } </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (i == </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">write</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">], </span><span style=\"color: #CE9178\">\"2.world</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #DCDCAA\">strlen</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"2.world</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  } </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]);</span><span style=\"color: #6A9955\"> // 父进程关闭写端,留读端读取数据</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// sleep(1);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> ((n = </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">], buf, </span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">))) {</span><span style=\"color: #6A9955\"> // 从管道中读数据</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">write</span><span style=\"color: #D4D4D4\">(STDOUT_FILENO, buf, n);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">; i++)</span><span style=\"color: #6A9955\"> // 两个儿子wait两次</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">wait</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">NULL</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h1 id=\"mkfifo函数\"><a href=\"#mkfifo函数\" class=\"headerlink\" title=\"mkfifo函数\"></a>mkfifo函数</h1><p>虽然管道相比信号，套接字实现进程通信，简单很多，但是只能单向通信，双向通信需建立两个管道，且只能用于有血缘关系的进程间通信。于是引入了命名管道（FIFO）。</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/types.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/stat.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">mkfifo</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">pathname</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">mode_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">mode</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>mkfifo()</code> 创建一个名为 <code>pathname</code> 的 FIFO 特殊文件。<code>mode</code> 参数指定 FIFO 的权限。它会像通常一样被进程的 umask 修改：创建的文件的权限为 (mode &amp; ~umask)。</p>\n<p>FIFO 特殊文件类似于管道，只是创建方式不同。FIFO 特殊文件不是匿名的通信通道，而是通过调用 <code>mkfifo()</code> 函数将其输入到文件系统中。</p>\n<p>通过这种方式创建 FIFO 特殊文件后，<strong>任何进程都可以像打开普通文件一样打开它进行读取或写入。但是，在继续对其执行任何输入或输出操作之前，必须同时打开它的两端</strong>。打开 FIFO 进行读取通常会阻塞，直到其他进程打开同一个 FIFO 进行写入，反之亦然。有关 FIFO 特殊文件的非阻塞处理，请参阅 fifo(7)。</p>\n<p><code>mkfifo()</code> 和 <code>mkfifoat()</code> 成功时返回 0。如果发生错误，则返回 -1 （此时会相应地设置 errno）。</p>\n<h2 id=\"fifo进行进程间通信\"><a href=\"#fifo进行进程间通信\" class=\"headerlink\" title=\"fifo进行进程间通信\"></a>fifo进行进程间通信</h2><p>这是通信的写入端：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;errno.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;fcntl.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdlib.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;string.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/stat.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *fifoPath = </span><span style=\"color: #CE9178\">\"./fifofile\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> fd;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *message = </span><span style=\"color: #CE9178\">\"Hello from producer!</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">open:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 打开FIFO文件以写入</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  fd = </span><span style=\"color: #DCDCAA\">open</span><span style=\"color: #D4D4D4\">(fifoPath, O_WRONLY);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (fd == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (errno == ENOENT) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">mkfifo</span><span style=\"color: #D4D4D4\">(fifoPath, </span><span style=\"color: #B5CEA8\">0644</span><span style=\"color: #D4D4D4\">)) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"mkfifo error\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(-</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"mkfifo success\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">goto</span><span style=\"color: #D4D4D4\"> open;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"open\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 向FIFO写入数据</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">write</span><span style=\"color: #D4D4D4\">(fd, message, </span><span style=\"color: #DCDCAA\">strlen</span><span style=\"color: #D4D4D4\">(message));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(fd);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>这是通信的读取端：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;fcntl.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;errno.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdlib.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/stat.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *fifoPath = </span><span style=\"color: #CE9178\">\"./fifofile\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> fd;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">buffer</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">128</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">open:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 打开FIFO文件以读取</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  fd = </span><span style=\"color: #DCDCAA\">open</span><span style=\"color: #D4D4D4\">(fifoPath, O_RDONLY);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (fd == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (errno == ENOENT) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">mkfifo</span><span style=\"color: #D4D4D4\">(fifoPath, </span><span style=\"color: #B5CEA8\">0644</span><span style=\"color: #D4D4D4\">)) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"mkfifo error\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(-</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">goto</span><span style=\"color: #D4D4D4\"> open;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"open\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 从FIFO读取数据</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">(fd, buffer, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(buffer));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Received: </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, buffer);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(fd);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h1 id=\"文件用于进程间通信\"><a href=\"#文件用于进程间通信\" class=\"headerlink\" title=\"文件用于进程间通信\"></a>文件用于进程间通信</h1><ol>\n<li><p><strong>有血缘关系的进程（父子进程）：</strong></p>\n<ul>\n<li>如果父进程在创建子进程之前已经打开了一个文件，并且在创建子进程时使用 <code>fork()</code> 系统调用，那么父进程和子进程将共享相同的文件描述符。也就是说，对于同一个文件，它们使用的是同一个文件描述符。</li>\n<li>父子进程共享文件描述符表的内容，但每个进程都有自己的文件描述符表，表中的条目指向相同的文件表项。因此，对文件的读写操作是同步的，反映在相同的文件偏移量上。</li>\n</ul>\n</li>\n<li><p><strong>没有血缘关系的进程：</strong></p>\n<ul>\n<li>如果两个没有血缘关系的进程分别打开同一个文件，它们会获得不同的文件描述符。这些文件描述符在各自的文件描述符表中指向不同的文件表项，即使它们指向的是同一个文件系统中的文件。</li>\n<li>因此，这些进程对同一个文件的操作是独立的，文件偏移量和文件状态在各自的进程中是独立维护的。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"mmap函数\"><a href=\"#mmap函数\" class=\"headerlink\" title=\"mmap函数\"></a>mmap函数</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/mman.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #DCDCAA\">mmap</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">addr</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">length</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">prot</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">flags</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">off_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">offset</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>mmap()</code> 系统调用在调用进程的虚拟地址空间中创建一个新的映射。新映射的起始地址由 <code>addr</code> 参数指定。<code>length</code> 参数指定映射的长度（必须大于 0）。</p>\n<p>如果 <code>addr</code> 为 <code>NULL</code>，则内核选择（页面对齐的）地址来创建映射；<strong>这是创建新映射最可移植的方法</strong>。如果 <code>addr</code> 不为 <code>NULL</code>，则内核将其作为放置映射位置的提示；在 Linux 上，内核将选择附近的页面边界（但始终高于或等于 <code>/proc/sys/vm/mmap_min_addr</code> 指定的值），并尝试在那里创建映射。如果该位置已存在其他映射，则内核会选择一个可能取决于或不取决于提示的新地址。<strong>新映射的地址作为调用结果返回</strong>。</p>\n<p>文件映射的内容（与匿名映射相反；参见下面的 MAP_ANONYMOUS）使用从文件描述符 <code>fd</code> 引用的文件（或其他对象）中偏移量为 <code>offset</code> 的 <code>length</code> 字节进行初始化。<strong>这个<code>offset</code> 必须是页面大小（由 sysconf(_SC_PAGE_SIZE) 返回）的倍数</strong>。</p>\n<p>在 <code>mmap()</code> 调用返回后，可以立即关闭文件描述符 <code>fd</code>，而不会使映射失效。</p>\n<p><code>prot</code> 参数描述了映射所需的内存保护（并且不得与文件的打开模式冲突）。它可以是 PROT_NONE，也可以是一个或多个以下标志的按位或：</p>\n<table>\n<thead>\n<tr>\n<th>宏</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>PROT_EXEC</td>\n<td>页面可以被执行。</td>\n</tr>\n<tr>\n<td>PROT_READ</td>\n<td>页面可以被读取。</td>\n</tr>\n<tr>\n<td>PROT_WRITE</td>\n<td>页面可以被写入。</td>\n</tr>\n<tr>\n<td>PROT_NONE</td>\n<td>页面不可访问。</td>\n</tr>\n</tbody></table>\n<p><code>flags</code> 参数决定了对映射的更新是否对映射同一区域的其他进程可见，以及更新是否会传递到底层文件。  通过在 flags 中包含以下值中的<strong>恰好一个</strong>来确定此行为：</p>\n<table>\n<thead>\n<tr>\n<th>宏</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MAP_SHARED</td>\n<td>共享此映射。对映射的更新对映射同一区域的其他进程可见，并且（在文件支持的映射的情况下）会传递到底层文件。（要精确控制何时将更新传递到底层文件，需要使用 msync(2)。）</td>\n</tr>\n<tr>\n<td>MAP_SHARED_VALIDATE （自 Linux 4.15 起）</td>\n<td>此标志提供与 MAP_SHARED 相同的行为，区别在于 MAP_SHARED 映射会忽略 flags 中的未知标志。相反，当使用 MAP_SHARED_VALIDATE 创建映射时，内核会验证传递的所有标志是否已知，并且如果存在未知标志，则映射将失败并返回错误 EOPNOTSUPP。此映射类型还需要能够使用某些映射标志（例如，MAP_SYNC）。</td>\n</tr>\n<tr>\n<td>MAP_PRIVATE</td>\n<td>创建一个私有的写时复制映射。对映射的更新对映射同一文件的其他进程不可见，并且不会传递到底层文件。未指定在 mmap() 调用之后对文件所做的更改是否在映射</td>\n</tr>\n</tbody></table>\n<p>成功时，<code>mmap()</code> 返回指向映射区域的指针。出错时，返回 <code>MAP_FAILED</code>  (即 (void *) -1)，并将 <code>errno</code> 设置为指示错误的原因。</p>\n<p>以下是 <code>mmap</code> 系统调用常见的错误码及其原因：</p>\n<table>\n<thead>\n<tr>\n<th>错误码</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>EACCES</td>\n<td>文件描述符引用了非普通文件。  或者请求了文件映射，但 fd 未打开以供读取。  或者请求了 MAP_SHARED 并且设置了 PROT_WRITE，但 fd 未以读/写 (O_RDWR) 模式打开。  或者设置了 PROT_WRITE，但文件是只允许追加的。</td>\n</tr>\n<tr>\n<td>EAGAIN</td>\n<td>文件已锁定，或者已锁定太多内存（请参阅 setrlimit(2)）。</td>\n</tr>\n<tr>\n<td>EBADF</td>\n<td>fd 不是有效的文件描述符（并且未设置 MAP_ANONYMOUS）。</td>\n</tr>\n<tr>\n<td>EEXIST</td>\n<td>在 flags 中指定了 MAP_FIXED_NOREPLACE，并且 addr 和 length 覆盖的范围与现有映射冲突。</td>\n</tr>\n<tr>\n<td>EINVAL</td>\n<td>我们不喜欢 addr、length 或 offset（例如，它们太大，或者未在页面边界上对齐）。  （自 Linux 2.6.12 起）length 为 0。  flags 不包含 MAP_PRIVATE、MAP_SHARED 或 MAP_SHARED_VALIDATE 中的任何一个。</td>\n</tr>\n<tr>\n<td>ENFILE</td>\n<td>已达到系统范围内打开文件总数的限制。</td>\n</tr>\n<tr>\n<td>ENODEV</td>\n<td>指定文件的底层文件系统不支持内存映射。</td>\n</tr>\n<tr>\n<td>ENOMEM</td>\n<td>没有可用的内存。  进程的最大映射数将被超过。当在现有映射的中间解除映射区域时，munmap() 也可能发生此错误，因为这会导致在要解除映射的区域的两侧产生两个较小的映射。   （自 Linux 4.7 起）进程的 RLIMIT_DATA 限制（在 getrlimit(2) 中描述）将被超过。  我们不喜欢 addr，因为它超出了 CPU 的虚拟地址空间。</td>\n</tr>\n<tr>\n<td>EOVERFLOW</td>\n<td>在 32 位架构上以及大文件扩展（即，使用 64 位 off_t）：用于 length 的页数加上用于 offset 的页数将溢出 unsigned long（32 位）。</td>\n</tr>\n<tr>\n<td>EPERM</td>\n<td>prot 参数请求 PROT_EXEC，但映射的区域属于已挂载为 no-exec 的文件系统上的文件。   操作被文件密封阻止；请参阅 fcntl(2)。   指定了 MAP_HUGETLB 标志，但调用者没有权限（没有 CAP_IPC_LOCK 功能）并且不是 sysctl_hugetlb_shm_group 组的成员；请参阅 proc_sys(5) 中对 /proc/sys/vm/sysctl_hugetlb_shm_group 的描述。</td>\n</tr>\n<tr>\n<td>ETXTBSY</td>\n<td>设置了 MAP_DENYWRITE，但 fd 指定的对象已打开以供写入。</td>\n</tr>\n</tbody></table>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p><ol>\n<li>创建映射区的过程中，隐含着一次对映射文件的【读操作】</li>\n<li>当MAP_SHARED时，要求：映射区的权限应该&lt;=文件打开的权限（出于对映射区的保护）。而MAP_PRIVATE则无所谓，因为mmap中的权限是对内存的限制</li>\n<li>映射区的释放与文件关闭无关。只要映射建立成功，文件可以立即关闭</li>\n<li>特别注意，当映射文件大小为0时，不能创建映射区。所以：用于映射的文件必须要有实际大小！！mmap使用时常常会出现总线错误，通常是由于共享文件存储空间大小引起的。如，400字节大小的文件，在简历映射区时，offset4096字节，则会报出总线错误</li>\n<li>munmap传入的地址一定是mmap返回的地址。</li>\n<li>文件偏移量必须为4K的整数倍</li>\n<li>mmap创建映射区出错概率非常高，一定要检查返回值，确保映射区建立成功再进行后续操作。</li>\n</ol>\n</p>\n</div>\n<h1 id=\"munmap函数\"><a href=\"#munmap函数\" class=\"headerlink\" title=\"munmap函数\"></a>munmap函数</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/mman.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">munmap</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">addr</span><span style=\"color: #D4D4D4\">[.length], </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">length</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>munmap()</code> 系统调用删除指定地址范围的映射，并导致对该范围内地址的进一步引用生成无效的内存引用。当进程终止时，该区域也会自动解除映射。另一方面，关闭文件描述符并不会解除映射区域。</p>\n<p><strong>地址 <code>addr</code> 必须是页面大小的倍数</strong>（但长度不必是）。包含指定范围内一部分的所有页面都将解除映射，并且随后对这些页面的引用将生成 <code>SIGSEGV</code> 信号。如果指定的范围不包含任何映射的页面，则不会出错。</p>\n<p>成功时，<code>munmap()</code> 返回 0。失败时，返回 -1，并将 <code>errno</code> 设置为指示错误的原因（通常为 <code>EINVAL</code>）。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>在<code>MAP_SHARED</code>映射的情况下，<code>munmap()</code>调用会将修改写回文件系统。<code>munmap()</code>会自动触发文件的更新，将映射的内存区域中的所有更改写回到文件中。</p>\n\n</div>\n","feature":true,"text":"PCB进程控制块cstruct task_struct { unsigned int __state; /* 进程状态：运行、等待、停止等 */ pid_t p...","permalink":"/post/Linux系统编程（进程）","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"17 mins."},"categories":[{"name":"Linux","slug":"Linux","count":8,"path":"api/categories/Linux.json"}],"tags":[{"name":"C++","slug":"C","count":13,"path":"api/tags/C.json"},{"name":"Linux","slug":"Linux","count":8,"path":"api/tags/Linux.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#PCB%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%9D%97\"><span class=\"toc-text\">PCB进程控制块</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#fork%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">fork函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#getpid%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">getpid函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#exec%E5%87%BD%E6%95%B0%E6%97%8F\"><span class=\"toc-text\">exec函数族</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B%E5%92%8C%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B\"><span class=\"toc-text\">孤儿进程和僵尸进程</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#wait%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">wait函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AE%A1%E9%81%93\"><span class=\"toc-text\">管道</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%A1%E9%81%93%E5%AE%9E%E7%8E%B0ls-l-wc-l\"><span class=\"toc-text\">管道实现ls -l | wc -l</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E4%B8%AA%E5%86%99%E8%80%85%EF%BC%8C%E4%B8%80%E4%B8%AA%E8%AF%BB%E8%80%85\"><span class=\"toc-text\">多个写者，一个读者</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#mkfifo%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">mkfifo函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#fifo%E8%BF%9B%E8%A1%8C%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1\"><span class=\"toc-text\">fifo进行进程间通信</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E7%94%A8%E4%BA%8E%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1\"><span class=\"toc-text\">文件用于进程间通信</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#mmap%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">mmap函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#munmap%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">munmap函数</span></a></li></ol>","author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Linux系统编程（信号与多线程）","uid":"ffc7901ba136221db8bdbec1296c9feb","slug":"Linux系统编程（信号与多线程）","date":"2024-02-05T07:09:36.000Z","updated":"2024-08-19T04:37:36.844Z","comments":true,"path":"api/articles/Linux系统编程（信号与多线程）.json","keywords":"C++,Pyhton,Java,算法","cover":"img/linux.jpeg","text":"信号信号概述在Linux操作系统中，信号（Signal）是一种用于进程间通信的机制，可以用来通知进程某些事件的发生。信号的主要作用是让操作系统或其他进程可以向进...","permalink":"/post/Linux系统编程（信号与多线程）","photos":[],"count_time":{"symbolsCount":"34k","symbolsTime":"31 mins."},"categories":[{"name":"Linux","slug":"Linux","count":8,"path":"api/categories/Linux.json"}],"tags":[{"name":"C++","slug":"C","count":13,"path":"api/tags/C.json"},{"name":"Linux","slug":"Linux","count":8,"path":"api/tags/Linux.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true},"next_post":{"title":"《Effective C++》笔记","uid":"45eea3793f995e9782f39b2b3ca183ab","slug":"《Effective-C-》读后总结","date":"2024-02-03T08:12:24.000Z","updated":"2024-02-15T16:39:23.632Z","comments":true,"path":"api/articles/《Effective-C-》读后总结.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/effectiveC++.jpeg","text":"读完《Effective C++》后，确实感到收益匪浅。但因为目前是学生，平时实践并不多，恐怕很多知识点会忘记。所以，我打算写一篇读后总结，以便日后复习，用电子...","permalink":"/post/《Effective-C-》读后总结","photos":[],"count_time":{"symbolsCount":"38k","symbolsTime":"35 mins."},"categories":[{"name":"C++","slug":"C","count":6,"path":"api/categories/C.json"}],"tags":[{"name":"C++进阶","slug":"C-进阶","count":4,"path":"api/tags/C-进阶.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true}}