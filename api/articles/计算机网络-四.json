{"title":"计算机网络(四)","uid":"3adc7cb84d4ac3fb8fab9c8bd90e7a93","slug":"计算机网络-四","date":"2022-05-30T14:18:00.000Z","updated":"2023-07-13T18:14:08.291Z","comments":true,"path":"api/articles/计算机网络-四.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/network4.jpeg","content":"<h2 id=\"传输层\"><a href=\"#传输层\" class=\"headerlink\" title=\"传输层\"></a>传输层</h2><p>只有主机才有的层次  </p>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><ol>\n<li>传输层提供进程和进程之间的逻辑通信  </li>\n<li>分用和复用。  </li>\n<li>对收到的报文进行差错检测。  </li>\n<li>TCP和UDP。</li>\n</ol>\n<p><em>复用</em>:应用层所有的应用进程都可以通过传输层再传输到网络层。<br><em>分用</em>:传输层从网络层收到数据后交付指明的应用进程。  </p>\n<p><em>端口</em>是传输层的SAP，标识主机中的应用进程。端口号只有本地意义，在因特网中不同计算机的相同端口是没有联系的。端口号长度为16bit，能表示65536个不同的端口号。  </p>\n<ul>\n<li>端口号<ul>\n<li>服务端使用的端口号<ul>\n<li>熟知端口号：给TCP/IP最重要的一些应用程序，让所有用户都知道。0~1023。</li>\n<li>登记端口号:为没有熟知端口号的应用程序使用的。1024~49151。</li>\n</ul>\n</li>\n<li>客户端使用的端口号：客户端使用:仅在客户进程运行时才动态选择。49152~65535。</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>应用程序</th>\n<th>FTP</th>\n<th>TELNET</th>\n<th>SMTP</th>\n<th>DNS</th>\n<th>TFTP</th>\n<th>HTTP</th>\n<th>SNMP</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>熟知端口号</td>\n<td>21</td>\n<td>23</td>\n<td>25</td>\n<td>53</td>\n<td>69</td>\n<td>80</td>\n<td>161</td>\n</tr>\n</tbody></table>\n<p>在网络中采用发送方和接收方的<em>套接字</em>组合来识别端点，<em>套接字</em>唯一标识了网络中的一个主机和它上面的一个进程。<br><em>套接字Socket=(主机IP地址，端口号)</em></p>\n<h3 id=\"UDP协议\"><a href=\"#UDP协议\" class=\"headerlink\" title=\"UDP协议\"></a>UDP协议</h3><p>UDP只在IP数据报服务之上增加了很少功能，即<em>复用分用</em>和<em>差错检测</em>功能。</p>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ol>\n<li>UDP是<em>无连接</em>的，减少开销和发送数据之前的时延。</li>\n<li>UDP使用最大努力交付，即<em>不保证可靠交付</em>。</li>\n<li>UDP是<em>面向报文</em>的，适合一次性传输少量数据的网络应用。</li>\n<li>UDP<em>无拥塞控制</em>，适合很多实时应用。</li>\n<li>UDP首部开销小，8Bit，而TCP有20Bit。</li>\n</ol>\n<p><em>面向报文</em>：应用层给UDP多长的报文，UDP就照样发送，即一次发一个完整报文。</p>\n<p>分用时，找不到对应的目的端口号，就丢弃报文，并给发送方发送ICMP“端口不可达”差错报告报文。</p>\n<h3 id=\"TCP协议\"><a href=\"#TCP协议\" class=\"headerlink\" title=\"TCP协议\"></a>TCP协议</h3><h4 id=\"TCP协议的特点\"><a href=\"#TCP协议的特点\" class=\"headerlink\" title=\"TCP协议的特点\"></a>TCP协议的特点</h4><ol>\n<li>TCP是面向连接（虚连接）的传输层协议。</li>\n<li>每一条TCP连接只能有两个端点，每一条TCP连接只能是点对点的。</li>\n<li>TCP提供可靠交付的服务，无差错、不丢失、不重复、按序到达。</li>\n<li>TCP提供全双工通信。</li>\n<li>TCP面向字节流，把应用程序交下来的数据看成仅仅是一连串的无结构的字节流。</li>\n</ol>\n<p>为了提供全双工通信，设立一个<em>发送缓存</em>和一个<em>接收缓存</em>。<br><em>发送缓存</em>是保存准备发送的数据和己发送但尚未收到确认的数据。<br><em>接收缓存</em>是保存按序到达但尚未被接受应用程序读取的数据和不按序到达的数据。  </p>\n<h4 id=\"TCP的连接管理\"><a href=\"#TCP的连接管理\" class=\"headerlink\" title=\"TCP的连接管理\"></a>TCP的连接管理</h4><p>TCP连接传输三个阶段：<br>连接建立→数据传送→连接释放 </p>\n<p>TCP连接的建立采用客户服务器方式，主动发起连接建立的应用进程叫做客户，而被动等待连接建立的应用进程叫服务器。  </p>\n<p><strong>建立过程</strong><br>假设运行在一台主机（客户)上的一个进程想与另一台主机（服务器）上的一个进程建立一条连接，客户应用进程首先通知客户TCP，他想建立一个与服务器上某个进程之间的连接，客户中的TCP会用以下步骤与服务器中的TCP建立一条TCP连接。</p>\n<ol>\n<li>客户端发送连接请求报文段，无应用层数据。</li>\n<li>服务器端为该TCP连接分配缓存和变量，并向客户端返回确认报文段，允许连接，无应用层数据。</li>\n<li>客户端为该TCP连接分配缓存和变量，并向服务器端返回确认的确认，可以携带数据。</li>\n</ol>\n<p><strong>SYN洪泛攻击</strong><br>SYN洪泛攻击发生在OSI第四层，这种方式利用TCP协议的特性，就是三次握手。攻击者发送TCP SYN，SYN是TCP三次握手中的第一个数据包，而当服务器返回ACK后，该攻击者就不对其进行再确认，那这个TCP连接就处于挂起状态，也就是所谓的半连接状态，服务器收不到再确认的话，还会重复发送ACK给攻击者。这样更加会浪费服务器的资源。攻击者就对服务器发送非常大量的这种TCP连接，由于每一个都没法完成三次握手，所以在服务器上，这些TCP连接会因为挂起状态而消耗CPU和内存，最后服务器可能死机，就无法为正常用户提供服务了。</p>\n<p>可以通过设置SYN cookie来解决。</p>\n<p><strong>释放过程</strong><br>参与一条TCP连接的两个进程中的任何一个都能终止该连接，连接结束后，主机中的“资源”（缓存和变量）将被释放。</p>\n<ol>\n<li>客户端发送连接释放报文段，停止发送数据，主动关闭TCP连接。</li>\n<li>服务器端回送一个确认报文段,客户到服务器这个方向的连接就释放了————半关闭状态。</li>\n<li>服务器端发完数据,就发出连接释放报文段,主动关闭TCP连接。</li>\n<li>客户端回送一个确认报文段，再等到时间等待计时器设置的2MSL(最长报文段寿命）后，连接彻底关闭。</li>\n</ol>\n<h4 id=\"TCP可靠传输\"><a href=\"#TCP可靠传输\" class=\"headerlink\" title=\"TCP可靠传输\"></a>TCP可靠传输</h4><p>确认重传不分家，TCP的发送方在规定的时间内没有收到确认就要重传己发送的报文段。<br>重传时间采用自适应算法，动态改变重传时间RTTs （加权平均往返时间）。</p>\n<p>其实实现方法与链路层大同小异。</p>\n<h4 id=\"TCP流量控制\"><a href=\"#TCP流量控制\" class=\"headerlink\" title=\"TCP流量控制\"></a>TCP流量控制</h4><p>TCP利用滑动窗口机制实现流量控制。  </p>\n<p>在通信过程中，接收方根据自己接收缓存的大小，动态地调整发送方的发送窗口大小，即接收窗口rwnd（接收方设置确认报文段的窗口字段来将rwnd通知给发送方），发送方的发送窗口取接收窗口rwnd和拥塞窗口cwnd的最小值。</p>\n<p>TCP为每一个连接设有一个持续计时器，只要TCP连接的一方收到对方的零窗口通知，就启动持续计时器。<br>若持续计时器设置的时间到期,就发送一个零窗口探测报文段。接收方收到探测报文段时给出现在的窗口值。<br>若窗口仍然是0，那么发送方就重新设置持续计时器。</p>\n<h4 id=\"TCP拥塞控制\"><a href=\"#TCP拥塞控制\" class=\"headerlink\" title=\"TCP拥塞控制\"></a>TCP拥塞控制</h4><p>出现拥塞的条件:对资源需求的总和&gt;可用资源</p>\n<p>网络中有许多资源同时呈现供应不足→网络性能变坏<br>→网络吞吐量将随输入负荷增大而下降</p>\n<p><em>拥塞控制</em>:防止过多的数据注入到网络中。</p>\n<p><strong>慢开始和拥塞避免</strong><br><strong>快重传和快回复</strong></p>\n<h3 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h3><p>应用层对应用程序的通信提供服务。  </p>\n<p><em>应用层协议定义:</em><br>应用进程交换的报文类型，请求还是响应?<br>各种报文类型的语法，如报文中的各个字段及其详细描述。<br>字段的语义，即包含在字段中的信息的含义。<br>进程何时、如何发送报文，以及对报文进行响应的规则。  </p>\n<p>应用层的重要协议;<br>FTP、SMTP、POP3、HTTP、DNS</p>\n<h4 id=\"应用层的功能\"><a href=\"#应用层的功能\" class=\"headerlink\" title=\"应用层的功能\"></a>应用层的功能</h4><ol>\n<li>文件传输、访问和管理</li>\n<li>电子邮件</li>\n<li>虚拟终端</li>\n<li>查询服务和远程作业登录</li>\n</ol>\n<h4 id=\"网络应用模型\"><a href=\"#网络应用模型\" class=\"headerlink\" title=\"网络应用模型\"></a>网络应用模型</h4><p><strong>客户/服务器模型(Client/Server)</strong><br><em>服务器:提供计算服务的设备。</em></p>\n<ol>\n<li>永久提供服务</li>\n<li>永久性访问地址/域名</li>\n</ol>\n<p><em>客户机:请求计算服务的主机。</em></p>\n<ol>\n<li>与服务器通信，使用服务器提供的服务</li>\n<li>间歇性接入网络</li>\n<li>可能使用动态IP地址</li>\n<li>不与其他客户机直接通信</li>\n</ol>\n<p><strong>P2P模型(Peer-to-peer)</strong></p>\n<ol>\n<li>不存在永远在线的服务器  </li>\n<li>每个主机既可以<em>提供服务</em>，也可以<em>请求服务</em></li>\n<li>任意端系统/节点之间可以<em>直接通讯</em>  </li>\n<li>节点间歇性接入网络  </li>\n<li>节点可能改变IP地址可扩展性好  </li>\n<li>网络健壮性好</li>\n</ol>\n<h4 id=\"域名解析系统DNS\"><a href=\"#域名解析系统DNS\" class=\"headerlink\" title=\"域名解析系统DNS\"></a>域名解析系统DNS</h4><p>随着网络的发展，对于上网的网民，记住各个网站IP地址是极为困难的。为了解决这个问题，计算机网络使用了域名，即通过有意义的字符串来代替网络中的主机。但是归根结底，设备间的通信还是要知道IP地址的，DNS就是提供了域名到IP地址的转换。</p>\n<p>比如<a href=\"http://www.baidu.com就是域名，最右边的叫做顶级域名，从右向左以此类推：顶级域名，二级域名，三级域名……\">www.baidu.com就是域名，最右边的叫做顶级域名，从右向左以此类推：顶级域名，二级域名，三级域名……</a></p>\n<p><strong>域名服务器</strong><br>当一个主机发出DNS查询请求时，这个查询请求报文就发给本地域名服务器。<br>如果本地域名服务器没有记录对应域名的IP地址，则查找根域名服务器，根域名服务器返回顶级域名服务器的IP地址，如果顶级域名服务器无法解析，则返回对应权限域名服务器。依次进行查询。</p>\n<p><strong>域名查询方式</strong>  </p>\n<ol>\n<li>递归查询  </li>\n<li>迭代查询<br><em>一般采取递归和迭代相结合的方式</em></li>\n</ol>\n<h4 id=\"文件传输协议FTP\"><a href=\"#文件传输协议FTP\" class=\"headerlink\" title=\"文件传输协议FTP\"></a>文件传输协议FTP</h4><p>提供不同种类主机系统（硬、软件体系等都可以不同）之间的文件传输能力。  </p>\n<p><strong>FTP服务器和用户端</strong><br>FTP是基于客户/服务器（C/S）的协议。<br>用户通过一个客户机程序连接至在远程计算机上运行的服务器程序。<br>依照FTP协议提供服务，进行文件传送的计算机就是FTP服务器。<br>连接FTP服务器，遵循FTP协议与服务器传送文件的电脑就是FTP客户端。  </p>\n<p><strong>FTP工作原理</strong><br>要连接到FTP服务器并且从FTP服务器中操作数据，就需要：FTP服务器的地址，注册的用户名密码。</p>\n<p><em>匿名登录</em>：互连网中有很大一部分FTP服务器被称为“匿名”(Anonymous）FTP服务器。这类服务器的目的是向公众提供文件拷贝服务，不要求用户事先在该服务器进行登记注册，也不用取得FTP服务器的授权。<br>Anonymous（匿名文件传输）能够使用户与远程主机建立连接并以匿名身份从远程主机上拷贝文件，而不必是该远程主机的注册用户。用户使用特殊的用户名“anonymous”登陆FTP服务，就可访问远程主机上公开的文件。</p>\n<p>FTP实现TCP实现可靠传输。</p>\n<p>服务器的进程分为一个主进程和其他多个从属进程，主进程负责打开端口接受其他主机的请求。收到一个请求，就会启动一个从属进程为该请求的主机提供服务。</p>\n<p>控制连接始终保持<br>数据连接保持一会  </p>\n<p>数据连接的端口号与传输方式有关：<br>主动方式使用TCP 20端口<br>被动方式由服务器和客户端自行协商决定（端口&gt;1024)  </p>\n<p>FTP传输模式：<br>文本模式: A5CI模式，以文本序列传输数据;<br>二进制模式: Binary模式,以二进制序列传输数据。</p>\n<h4 id=\"电子邮件\"><a href=\"#电子邮件\" class=\"headerlink\" title=\"电子邮件\"></a>电子邮件</h4><p><strong>简单邮件传送协议SMTP：</strong><br>SMTP规定了在两个相互通信的SMTP进程之间应如何交换信息。<br>负责发送邮件的SMTP进程就是SMTP客户，负责接收邮件的进程就是SMTP服务器。<br>SMTP规定了14条命令(几个字母）和21种应答信息（三位数字代码t简单文字说明）。<br>SMTP使用TCP协议连接，端口号25</p>\n<p><a href=\"https://baike.baidu.com/item/SMTP/175887?fr=aladdin#3\"><strong>SMTP通信三个阶段:</strong></a><br>连接建立→邮件传送→连接释放</p>\n<p><strong>通用因特网邮件扩充协议MIME：</strong><br><em>SMTP的缺点:</em><br>1.SMTP不能传送可执行文件或者其他二进制对象。<br>2.SMTP仅限于传送7位ASCIl码，不能传送其他非英语国家的文字。<br>3.SMTP服务器会拒绝超过一定长度的邮件。</p>\n<p>MIME协议通过将非ASCII码转化成ASCII码，然后再交付给STMP进行传输，从而达到相关的目的。<br>MIME使电子邮件系统可以支持声音、图像、视频、多种国家语言等等。使得传输内容丰富多彩。 </p>\n<p><a href=\"https://baike.baidu.com/item/POP3\"><strong>邮局协议POP3</strong></a><br>POP3使用TCP协议连接，端口号110</p>\n<p><strong>网际报文存取协议IMAP：</strong><br>由于POP3协议存在某些缺点，功能有限，于是产生了IMAP协议。<br>IMAP协议比POP协议复杂。当用户PC上的IMAP客户程序打开IMAP服务器的邮箱时，用户可以看到邮箱的首部，若用户需要打开某个邮件，该邮件才上传到用户的计算机上。<br>IMAP可以让用户在不同的地方使用不同的计算机随时上网阅读处理邮件，还允许只读取邮件中的某一个部分(先看止文，有WiFi的时候再下载附件)。</p>\n<p><strong>基于万维网的电子邮件</strong><br>使用HTTP协议和SMTP协议。用户到服务器使用HTTP，服务器之间使用的还是SMTP协议</p>\n<h4 id=\"万维网和HTTP协议\"><a href=\"#万维网和HTTP协议\" class=\"headerlink\" title=\"万维网和HTTP协议\"></a>万维网和HTTP协议</h4><p>万维网WWW （World Wide Web）是一个大规模的、联机式的信息储藏所/资料空间，是无数个网络站点和网页的集合。  </p>\n<p>通过设置统一资源定位符URL唯一标识网络上某个资源（不区分大小写）。<br>&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;<br>协议：HTTP和FTP等<br>主机：域名和IP地址都可以</p>\n<p>用户通过点击超链接（http;//<a href=\"http://www.baidu.com)获取资源,这些资源通过超文本传输协议(http)传送给使用者./\">www.baidu.com）获取资源，这些资源通过超文本传输协议（HTTP）传送给使用者。</a><br>万维网以客户/服务器方式工作，用户使用的浏览器就是万维网客户程序，万维网文档所驻留的主机运行服务器程序。<br>万维网使用超文本标记语言HTML，使得万维网页面设计者可以很方便地从一个界面的链接转到另一个界面，并能够在自己的屏幕上显示出来。</p>\n<p><strong>超文本传输协议HTTP</strong><br>HTTP协议定义了浏览器（万维网客户进程）怎样向万维网服务器请求万维网文档，以及服务器怎样把文档传送给浏览器。  </p>\n<p><em>用户</em>：<br>1.输入URL<br>2.点击超链接  </p>\n<p><em>服务器</em>：<br>有一个服务器进程监听TCP的端口80</p>\n<p><em>具体过程</em>:  </p>\n<ol>\n<li>浏览器分析URL  </li>\n<li>浏览器向DNS请求解析IP地址  </li>\n<li>DNS解析出IP地址</li>\n<li>浏览器与服务器建立TCP连接  </li>\n<li>浏览器发出取文件命令  </li>\n<li>服务器响应  </li>\n<li>释放TCP连接  </li>\n<li>浏览器显示</li>\n</ol>\n<p><em>HTTP协议的特点：</em><br>HTTP是无状态的。对于每个相同的HTTP请求，服务器都会给予同样的回应。</p>\n<p>但是在实际工作中，一些万维网站点常常希望能够识别用户。</p>\n<p>Cookie是存储在用户主机中的文本文件，记录一段时间内某用户的访问记录。这样就可以提供个性化服务。</p>\n<p>HTTP采用TCP作为运输层协议，但HTTP协议本身是无连接的(通信双方在交换HTTP报文之前不需要先建立HTTP连接)。</p>\n","feature":true,"text":"传输层只有主机才有的层次 功能 传输层提供进程和进程之间的逻辑通信 分用和复用。 对收到的报文进行差错检测。 TCP和UDP。 复用:应用层所有的应用进程都可以...","permalink":"/post/计算机网络-四","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"网络","slug":"网络","count":4,"path":"api/categories/网络.json"}],"tags":[{"name":"网络","slug":"网络","count":4,"path":"api/tags/网络.json"},{"name":"传输层","slug":"传输层","count":1,"path":"api/tags/传输层.json"},{"name":"应用层","slug":"应用层","count":1,"path":"api/tags/应用层.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%A0%E8%BE%93%E5%B1%82\"><span class=\"toc-text\">传输层</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">功能</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#UDP%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">UDP协议</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">特点</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TCP%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">TCP协议</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#TCP%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">TCP协议的特点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#TCP%E7%9A%84%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">TCP的连接管理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#TCP%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93\"><span class=\"toc-text\">TCP可靠传输</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#TCP%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">TCP流量控制</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">TCP拥塞控制</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%B1%82\"><span class=\"toc-text\">应用层</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%B1%82%E7%9A%84%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">应用层的功能</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">网络应用模型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E7%B3%BB%E7%BB%9FDNS\"><span class=\"toc-text\">域名解析系统DNS</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AEFTP\"><span class=\"toc-text\">文件传输协议FTP</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6\"><span class=\"toc-text\">电子邮件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%87%E7%BB%B4%E7%BD%91%E5%92%8CHTTP%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">万维网和HTTP协议</span></a></li></ol></li></ol></li></ol>","author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Python小应用——删除答案","uid":"298601bdff7402f7c70804cf98e17980","slug":"Python小应用——删除答案","date":"2022-06-01T09:22:00.000Z","updated":"2023-07-13T18:11:57.602Z","comments":true,"path":"api/articles/Python小应用——删除答案.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/python-make.jpeg","text":"初衷有时候呢，考试前学校会发一些docx文档型的资料。这些资料类似于填了答案的填空题，方便我们快速复习、查找重点。然而一旦我们想要测试一下自己是不是真正记住了，...","permalink":"/post/Python小应用——删除答案","photos":[],"count_time":{"symbolsCount":969,"symbolsTime":"1 mins."},"categories":[{"name":"Python","slug":"Python","count":1,"path":"api/categories/Python.json"}],"tags":[{"name":"python-docx","slug":"python-docx","count":1,"path":"api/tags/python-docx.json"},{"name":"docx","slug":"docx","count":1,"path":"api/tags/docx.json"},{"name":"Python","slug":"Python","count":1,"path":"api/tags/Python.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true},"next_post":{"title":"神经网络的反向传播","uid":"3a327b02e6446ad9da6af37fe8dd2226","slug":"神经网络的反向传播","date":"2022-05-18T02:11:00.000Z","updated":"2023-09-25T17:00:59.383Z","comments":true,"path":"api/articles/神经网络的反向传播.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/ai1.jpeg","text":"反向传播基本思想向前传播函数： SVM损失函数，计算每一个样本的损失： 附带正则项的所有样本SVM损失的平均值函数，带上正则项可以使得模型更加简单，更容易泛化。...","permalink":"/post/神经网络的反向传播","photos":[],"count_time":{"symbolsCount":814,"symbolsTime":"1 mins."},"categories":[{"name":"人工智能","slug":"人工智能","count":4,"path":"api/categories/人工智能.json"}],"tags":[{"name":"反向传播","slug":"反向传播","count":1,"path":"api/tags/反向传播.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true}}