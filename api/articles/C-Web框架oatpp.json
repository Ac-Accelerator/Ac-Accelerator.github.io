{"title":"C++Web框架：oatpp","uid":"6bcb75b14b50daaab50a7d442491f31a","slug":"C-Web框架oatpp","date":"2024-10-26T11:00:00.000Z","updated":"2024-10-27T19:55:54.040Z","comments":true,"path":"api/articles/C-Web框架oatpp.json","keywords":"C++,Pyhton,Java,算法","cover":"img/oatpp.png","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Oat++ 是一个开源的 C++ Web 框架，主打一个高性能、无依赖，提供了生产级开发所需的所有必要组件：</p>\n<ul>\n<li>带有请求参数映射和 Swagger-UI 注释的高级 REST 框架</li>\n<li>对象关系映射框架（ORM）</li>\n<li>WebSocket 框架</li>\n<li>对象映射（DTO）</li>\n<li>依赖注入</li>\n<li>Swagger-UI</li>\n</ul>\n<p>支持的平台包括Linux、BSD、MacOS、Windows。</p>\n<h1 id=\"如何在项目中使用-oatpp-？\"><a href=\"#如何在项目中使用-oatpp-？\" class=\"headerlink\" title=\"如何在项目中使用 oatpp ？\"></a>如何在项目中使用 oatpp ？</h1><p>我一般直接将 oatpp 源码放在项目中，然后在 CMakeLists.txt 中添加 oatpp 的源码路径，然后在项目中引用 oatpp 的头文件即可。</p>\n<p>下面是一个简单的项目结构：</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">.</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">├── build                 # 编译目录</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">├── CMakeLists.txt        # CMake 配置文件</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">├── include               # 项目头文件目录</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">├── lib                   # 依赖库目录</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">│   └── oatpp             # oatpp 源码目录</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">└── src</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    ├── AppComponent.hpp  # oatpp 组件</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    ├── controller        # 控制器目录</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    ├── dto               # 数据传输对象目录</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    └── main.cpp          # 入口文件</span></span></code></pre></div><p>在这种项目结构下，可以在 CMakeLists.txt 中如下添加 oatpp 的源码路径，并配置：</p>\n<div class=\"language-cmake\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cmake</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">cmake_minimum_required</span><span style=\"color: #D4D4D4\">(VERSION 3.16)</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">project</span><span style=\"color: #D4D4D4\">(little_server VERSION 0.1 LANGUAGES CXX)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">add_subdirectory</span><span style=\"color: #D4D4D4\">(./lib/oatpp)               </span><span style=\"color: #6A9955\"># 包含 oatpp 的 CMakeLists.txt</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">include_directories</span><span style=\"color: #D4D4D4\">(./lib/oatpp/src/)       </span><span style=\"color: #6A9955\"># 添加 oatpp 的源码路径</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">include_directories</span><span style=\"color: #D4D4D4\">(./include)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">add_executable</span><span style=\"color: #D4D4D4\">(little_server src/main.cpp)</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">target_link_libraries</span><span style=\"color: #D4D4D4\">(little_server oatpp)  </span><span style=\"color: #6A9955\"># 链接 oatpp 库</span></span></code></pre></div><h1 id=\"底层组件（Component）介绍\"><a href=\"#底层组件（Component）介绍\" class=\"headerlink\" title=\"底层组件（Component）介绍\"></a>底层组件（Component）介绍</h1><p>注意，这是介绍 oatpp 本身提供的一些组件，我们要使用这些组件来构建我们的 Web 服务。      </p>\n<h2 id=\"HttpRouter\"><a href=\"#HttpRouter\" class=\"headerlink\" title=\"HttpRouter\"></a><a href=\"https://oatpp.io/api/latest/oatpp/web/server/HttpRouter/\">HttpRouter</a></h2><p>HttpRouter 通过方法和路径路由 HTTP 请求。</p>\n<p>重点在于下面几个方法，其他只是原理的拓展：</p>\n<ol>\n<li>createShared</li>\n<li>route</li>\n<li>addController</li>\n</ol>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">\"oatpp/web/server/HttpRouter.hpp\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\"> { </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">web</span><span style=\"color: #D4D4D4\"> { </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">server</span><span style=\"color: #D4D4D4\"> { </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">template</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #569CD6\">typename</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">RouterEndpoint</span><span style=\"color: #D4D4D4\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">HttpRouterTemplate</span><span style=\"color: #D4D4D4\"> : </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">base</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">Countable</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">private:</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    //字符串键标签</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">typedef</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">share</span><span style=\"color: #D4D4D4\">::StringKeyLabel StringKeyLabel;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">public:</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    //GET、POST等不同方法属于不同的分支，每个分支对不同的路径模式进行路由</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">typedef</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">web</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">url</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">mapping</span><span style=\"color: #D4D4D4\">::Router&lt;RouterEndpoint&gt; BranchRouter;</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    //分支映射，每个方法对应一个分支</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">typedef</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::unordered_map&lt;StringKeyLabel, </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::shared_ptr&lt;BranchRouter&gt;&gt; BranchMap;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">protected:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    BranchMap m_branchMap;</span><span style=\"color: #6A9955\">//分支映射实例</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">protected:</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    //通常由route成员方法调用，用于添加路由的时候，查找或创建一个新的分支</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">BranchRouter</span><span style=\"color: #D4D4D4\">&gt;</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">getBranch</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">StringKeyLabel</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">name</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">public:</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    //用于创建一个新的HttpRouterTemplate实例</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">HttpRouterTemplate</span><span style=\"color: #D4D4D4\">&gt; </span><span style=\"color: #DCDCAA\">createShared</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    //手动添加路由，根据method找到对应的分支，然后在分支对应pathPattern中添加到RouterEndpoint路由</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">route</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">method</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">pathPattern</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">RouterEndpoint</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">endpoint</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    //根据method和path找到对应的路由，通常收到请求后，由框架调用</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">typename</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">BranchRouter</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">Route</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">getRoute</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> StringKeyLabel&amp; method, </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> StringKeyLabel&amp; path);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">HttpRouter</span><span style=\"color: #D4D4D4\"> : </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">HttpRouterTemplate</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">HttpRequestHandler</span><span style=\"color: #D4D4D4\">&gt;&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">private:</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    //ApiController实例列表，只有写入，没有读取操作，不知道有什么用，删除也不影响</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::list&lt;</span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::shared_ptr&lt;</span><span style=\"color: #4EC9B0\">server</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">api</span><span style=\"color: #D4D4D4\">::ApiController&gt;&gt; m_controllers;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">public:</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    //创建一个新的HttpRouter实例</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">HttpRouter</span><span style=\"color: #D4D4D4\">&gt; </span><span style=\"color: #DCDCAA\">createShared</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">HttpRouterTemplate</span><span style=\"color: #D4D4D4\">::route;</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    //用于通过endpoint的形式添加路由</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">route</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">server</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">api</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">Endpoint</span><span style=\"color: #D4D4D4\">&gt;</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">endpoint</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    //通常被addController调用，添加Controller的多个路由</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">route</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">server</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">api</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">Endpoints</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">endpoints</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    //用于添加Controller的多个路由</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">server</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">api</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">ApiController</span><span style=\"color: #D4D4D4\">&gt; </span><span style=\"color: #DCDCAA\">addController</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">server</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">api</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">ApiController</span><span style=\"color: #D4D4D4\">&gt;</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">controller</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  };</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}}}</span></span>\n<span class=\"line\"></span></code></pre></div><h2 id=\"HttpConnectionHandler\"><a href=\"#HttpConnectionHandler\" class=\"headerlink\" title=\"HttpConnectionHandler\"></a><a href=\"https://oatpp.io/api/latest/oatpp/web/server/HttpConnectionHandler/\">HttpConnectionHandler</a></h2><p>简单连接处理器（oatpp::network::ConnectionHandler）用于处理 HTTP 通信，为每个连接创建一个线程来处理通信。</p>\n<p>重点在于下面几个方法，其他只是原理的拓展：</p>\n<ol>\n<li>createShared</li>\n</ol>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">\"oatpp/web/server/HttpConnectionHandler.hpp\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\"> { </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">web</span><span style=\"color: #D4D4D4\"> { </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">server</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">HttpConnectionHandler</span><span style=\"color: #D4D4D4\"> : </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">base</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">Countable</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">network</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">ConnectionHandler</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">HttpProcessor</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">TaskProcessingListener</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">protected:</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //任务开始时的工作，默认是 建立了 连接 到 IOStream的映射、以及检查m_continue</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">onTaskStart</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">provider</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">ResourceHandle</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">stream</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">IOStream</span><span style=\"color: #D4D4D4\">&gt;</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">connection</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #569CD6\">override</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //任务结束时的工作，默认是 移除了 连接 到 IOStream的映射、以及检查m_continue</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">onTaskEnd</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">provider</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">ResourceHandle</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">stream</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">IOStream</span><span style=\"color: #D4D4D4\">&gt;</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">connection</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #569CD6\">override</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //无效化所有连接，通常在stop方法中调用</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">invalidateAllConnections</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">private:</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //HttpProcessor的组件，通常是router和config、拦截器、错误处理器等</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::shared_ptr&lt;</span><span style=\"color: #4EC9B0\">HttpProcessor</span><span style=\"color: #D4D4D4\">::Components&gt; m_components;</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //用于指示是否继续处理连接</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::atomic_bool m_continue;</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //连接 到 IOStream的映射，在invalidateAllConnections、getConnectionsCount中使用</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::unordered_map&lt;v_uint64, </span><span style=\"color: #4EC9B0\">provider</span><span style=\"color: #D4D4D4\">::ResourceHandle&lt;</span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">stream</span><span style=\"color: #D4D4D4\">::IOStream&gt;&gt; m_connections;</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //连接锁，用于保护m_connections</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">concurrency</span><span style=\"color: #D4D4D4\">::SpinLock m_connectionsLock;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">HttpConnectionHandler</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">HttpProcessor</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">Components</span><span style=\"color: #D4D4D4\">&gt;</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">components</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">HttpConnectionHandler</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">HttpRouter</span><span style=\"color: #D4D4D4\">&gt;</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">router</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">HttpConnectionHandler</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">HttpRouter</span><span style=\"color: #D4D4D4\">&gt;</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">router</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                        </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">HttpProcessor</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">Config</span><span style=\"color: #D4D4D4\">&gt;</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">config</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public:</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //创建一个新的HttpConnectionHandler实例</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">HttpConnectionHandler</span><span style=\"color: #D4D4D4\">&gt; </span><span style=\"color: #DCDCAA\">createShared</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">HttpRouter</span><span style=\"color: #D4D4D4\">&gt;</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">router</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //设置错误处理器</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">setErrorHandler</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">handler</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">ErrorHandler</span><span style=\"color: #D4D4D4\">&gt;</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">errorHandler</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //添加请求拦截器(push_back)。请求拦截器在路由发生之前被调用。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">addRequestInterceptor</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">interceptor</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">RequestInterceptor</span><span style=\"color: #D4D4D4\">&gt;</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">interceptor</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //添加响应拦截器(push_back)。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">addResponseInterceptor</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">interceptor</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">ResponseInterceptor</span><span style=\"color: #D4D4D4\">&gt;</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">interceptor</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //当有新的连接时，框架自动调用此方法。具体是将IO方式设置为阻塞，创建新线程处理连接</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">handleConnection</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">provider</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">ResourceHandle</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">IOStream</span><span style=\"color: #D4D4D4\">&gt;</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">connection</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                        </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">ParameterMap</span><span style=\"color: #D4D4D4\">&gt;</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">params</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #569CD6\">override</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //告诉所有线程，处理完当前请求后退出</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">stop</span><span style=\"color: #D4D4D4\">() </span><span style=\"color: #569CD6\">override</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //获取连接数</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">v_uint64</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">getConnectionsCount</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}}}</span></span></code></pre></div><h2 id=\"ConnectionProvider\"><a href=\"#ConnectionProvider\" class=\"headerlink\" title=\"ConnectionProvider\"></a><a href=\"https://oatpp.io/api/latest/oatpp/network/tcp/server/ConnectionProvider/\">ConnectionProvider</a></h2><p>提供 TCP 连接。</p>\n<p>重点在于下面几个方法，其他只是原理的拓展：</p>\n<ol>\n<li>createShared</li>\n</ol>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">\"oatpp/network/tcp/server/ConnectionProvider.hpp\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\"> { </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">network</span><span style=\"color: #D4D4D4\"> { </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">tcp</span><span style=\"color: #D4D4D4\"> { </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">server</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">ConnectionProvider</span><span style=\"color: #D4D4D4\"> : </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">ServerConnectionProvider</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public:</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //构造函数</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">ConnectionProvider</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">network</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">Address</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">address</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">useExtendedConnections</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #569CD6\">false</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public:</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //创建一个新的ConnectionProvider实例</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">ConnectionProvider</span><span style=\"color: #D4D4D4\">&gt; </span><span style=\"color: #DCDCAA\">createShared</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">network</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">Address</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">address</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">useExtendedConnections</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #569CD6\">false</span><span style=\"color: #D4D4D4\">)；</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //设置ConnectionConfigurer</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">setConnectionConfigurer</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">ConnectionConfigurer</span><span style=\"color: #D4D4D4\">&gt;</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">connectionConfigurer</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  // 关闭accept socket</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">stop</span><span style=\"color: #D4D4D4\">() </span><span style=\"color: #569CD6\">override</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  // 获取 incoming 连接</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">provider</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">ResourceHandle</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">stream</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">IOStream</span><span style=\"color: #D4D4D4\">&gt; </span><span style=\"color: #DCDCAA\">get</span><span style=\"color: #D4D4D4\">() </span><span style=\"color: #569CD6\">override</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //获取地址</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">network</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">Address</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">getAddress</span><span style=\"color: #D4D4D4\">()；</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}}}}</span></span></code></pre></div><h2 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a><a href=\"https://oatpp.io/api/latest/oatpp/network/Server/\">Server</a></h2><p>Server在循环中调用 oatpp::network::ConnectionProvider::get，并将获得的连接传递给 oatpp::network::ConnectionHandler</p>\n<p>重点在于下面几个方法，其他只是原理的拓展：</p>\n<ol>\n<li>createShared</li>\n<li>run</li>\n</ol>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">\"oatpp/network/Server.hpp\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\"> { </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">network</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Server</span><span style=\"color: #D4D4D4\"> : </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">base</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">Countable</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">private:</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //主循环，run传入的条件决定是住循环还是条件主循环</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">mainLoop</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">Server</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">instance</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //条件主循环</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">conditionalMainLoop</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //设置状态</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">setStatus</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">v_int32</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">expectedStatus</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">v_int32</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">newStatus</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">setStatus</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">v_int32</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">status</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">private:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::atomic&lt;v_int32&gt; m_status;</span><span style=\"color: #6A9955\">//状态</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::function&lt;</span><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\">()&gt; m_condition;</span><span style=\"color: #6A9955\">//条件</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::thread m_thread;</span><span style=\"color: #6A9955\">//线程</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::mutex m_mutex;</span><span style=\"color: #6A9955\">  //互斥锁</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::shared_ptr&lt;ConnectionProvider&gt; m_connectionProvider;</span><span style=\"color: #6A9955\">//连接提供器</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::shared_ptr&lt;ConnectionHandler&gt; m_connectionHandler;</span><span style=\"color: #6A9955\"> //连接处理器</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> m_threaded;</span><span style=\"color: #6A9955\">//是否多线程，实现中只可能是false</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">Server</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">ConnectionProvider</span><span style=\"color: #D4D4D4\">&gt;</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">connectionProvider</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">         </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">ConnectionHandler</span><span style=\"color: #D4D4D4\">&gt;</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">connectionHandler</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">virtual</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">~Server</span><span style=\"color: #D4D4D4\">() </span><span style=\"color: #569CD6\">override</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">public:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> v_int32 STATUS_CREATED;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> v_int32 STATUS_STARTING;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> v_int32 STATUS_RUNNING;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> v_int32 STATUS_STOPPING;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> v_int32 STATUS_DONE;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //创建一个新的Server实例</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">Server</span><span style=\"color: #D4D4D4\">&gt; </span><span style=\"color: #DCDCAA\">createShared</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">ServerConnectionProvider</span><span style=\"color: #D4D4D4\">&gt;</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">connectionProvider</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                                              </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">ConnectionHandler</span><span style=\"color: #D4D4D4\">&gt;</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">connectionHandler</span><span style=\"color: #D4D4D4\">){</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">make_shared</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">Server</span><span style=\"color: #D4D4D4\">&gt;(connectionProvider, connectionHandler);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //运行循环</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">run</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">function</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\">()&gt; </span><span style=\"color: #9CDCFE\">conditional</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #569CD6\">nullptr</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //停止循环，设置状态为STATUS_STOPPING后，等待线程结束</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">stop</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //获取状态</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">v_int32</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">getStatus</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}}</span></span>\n<span class=\"line\"></span></code></pre></div><h2 id=\"ObjectMapper\"><a href=\"#ObjectMapper\" class=\"headerlink\" title=\"ObjectMapper\"></a><a href=\"https://oatpp.io/api/latest/oatpp/parser/json/mapping/ObjectMapper/\">ObjectMapper</a></h2><p>Json ObjectMapper.用于将 oatpp DTO 对象序列化/反序列化为 JSON。</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\"> { </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">json</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">ObjectMapper</span><span style=\"color: #D4D4D4\"> : </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">base</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">Countable</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">mapping</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">ObjectMapper</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">private:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Info</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">getMapperInfo</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Info</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"application\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">\"json\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public:</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //反序列化配置</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">DeserializerConfig</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">public:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">mapping</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">TreeToObjectMapper</span><span style=\"color: #D4D4D4\">::Config mapper;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">Deserializer</span><span style=\"color: #D4D4D4\">::Config json;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public:</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //序列化配置</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">SerializerConfig</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">public:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">mapping</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">ObjectToTreeMapper</span><span style=\"color: #D4D4D4\">::Config mapper;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">Serializer</span><span style=\"color: #D4D4D4\">::Config json;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">private:</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //将一个树序列化并写入流，通常被write成员方法调用</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">writeTree</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">stream</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">ConsistentOutputStream</span><span style=\"color: #569CD6\">*</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">stream</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">mapping</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">Tree</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">tree</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">mapping</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">ErrorStack</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">errorStack</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">private:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  SerializerConfig m_serializerConfig;</span><span style=\"color: #6A9955\"> //序列化配置</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  DeserializerConfig m_deserializerConfig;</span><span style=\"color: #6A9955\">  //反序列化配置</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">private:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">mapping</span><span style=\"color: #D4D4D4\">::ObjectToTreeMapper m_objectToTreeMapper;</span><span style=\"color: #6A9955\"> //负则将对象映射到树</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">mapping</span><span style=\"color: #D4D4D4\">::TreeToObjectMapper m_treeToObjectMapper;</span><span style=\"color: #6A9955\"> //负责将树映射到对象</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">ObjectMapper</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">SerializerConfig</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">serializerConfig</span><span style=\"color: #D4D4D4\"> = {}, </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">DeserializerConfig</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">deserializerConfig</span><span style=\"color: #D4D4D4\"> = {});</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //将一个对象序列化并写入流，在返回时，由框架内writeToString（父类方法）中调用</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">write</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">stream</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">ConsistentOutputStream</span><span style=\"color: #569CD6\">*</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">stream</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">Void</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">variant</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">mapping</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">ErrorStack</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">errorStack</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">override</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //从流中读取一个对象</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">Void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">utils</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">parser</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">Caret</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">caret</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">Type</span><span style=\"color: #569CD6\">*</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">type</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">mapping</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">ErrorStack</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">errorStack</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">override</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //获取ObjectToTreeMapper</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">mapping</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">ObjectToTreeMapper</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">objectToTreeMapper</span><span style=\"color: #D4D4D4\">() </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">mapping</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">TreeToObjectMapper</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">treeToObjectMapper</span><span style=\"color: #D4D4D4\">() </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">mapping</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">ObjectToTreeMapper</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">objectToTreeMapper</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">mapping</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">TreeToObjectMapper</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">treeToObjectMapper</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //获取序列化配置</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">SerializerConfig</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">serializerConfig</span><span style=\"color: #D4D4D4\">() </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">DeserializerConfig</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">deserializerConfig</span><span style=\"color: #D4D4D4\">() </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">SerializerConfig</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">serializerConfig</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">DeserializerConfig</span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">deserializerConfig</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}}</span></span></code></pre></div><h2 id=\"组件的使用\"><a href=\"#组件的使用\" class=\"headerlink\" title=\"组件的使用\"></a>组件的使用</h2><p>一般而言，我们需要使用上面的组件来构建我们的 Web 服务，组件之间的关系如下：</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">run</span><span style=\"color: #D4D4D4\">(){</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">auto</span><span style=\"color: #D4D4D4\"> objectMapper = </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">make_shared</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">json</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">ObjectMapper</span><span style=\"color: #D4D4D4\">&gt;();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">auto</span><span style=\"color: #D4D4D4\"> router = </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">web</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">server</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">HttpRouter</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">createShared</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  // router-&gt;route(\"GET\", \"/handler\", std::make_shared&lt;Handler&gt;(objectMapper));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">auto</span><span style=\"color: #D4D4D4\"> connectionHandler = </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">web</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">server</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">HttpConnectionHandler</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">createShared</span><span style=\"color: #D4D4D4\">(router);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">auto</span><span style=\"color: #D4D4D4\"> connectionProvider = </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">network</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">tcp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">server</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">ConnectionProvider</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">createShared</span><span style=\"color: #D4D4D4\">({</span><span style=\"color: #CE9178\">\"localhost\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">8080</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">network</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">Address</span><span style=\"color: #D4D4D4\">::IP_4});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">network</span><span style=\"color: #D4D4D4\">::Server </span><span style=\"color: #DCDCAA\">server</span><span style=\"color: #D4D4D4\">(connectionProvider, connectionHandler);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">server</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">run</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">Environment</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">init</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">run</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">Environment</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">destroy</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>该服务可以运行，但是由于没有任何handler，所以无法处理任何请求，只会返回 404。但从中依然可以看出各个组件之间的关系。</p>\n<p>对于组件的管理，可以使用<strong>依赖注入</strong>的方式，这也是比较推荐的方式：将这些组件的创建和管理交给框架，我们只需要在需要的地方使用即可。在项目的目录结构中，有一个 <code>AppComponent.hpp</code> 文件，用于管理组件，有点像 Bean 的概念：</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">/* AppComponent.hpp */</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#pragma</span><span style=\"color: #569CD6\"> </span><span style=\"color: #9CDCFE\">once</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">\"oatpp/json/ObjectMapper.hpp\"</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">\"oatpp/web/server/HttpConnectionHandler.hpp\"</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">\"oatpp/network/tcp/server/ConnectionProvider.hpp\"</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">\"oatpp/macro/component.hpp\"</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;memory&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">//用法：OATPP_CREATE_COMPONENT(TYPE, NAME)(对应类型构造函数的参数)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">/* 创建和保存 Application 组件并在 oatpp::base::Environment 中注册组件的类</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">组件初始化的顺序是从上到下 */</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">AppComponent</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  /* TCP 连接的提供者，绑定到指定的端口。 */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">OATPP_CREATE_COMPONENT</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">network</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">ServerConnectionProvider</span><span style=\"color: #D4D4D4\">&gt;, </span><span style=\"color: #4EC9B0\">serverConnectionProvider</span><span style=\"color: #D4D4D4\">)([] {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">network</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">tcp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">server</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">ConnectionProvider</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">createShared</span><span style=\"color: #D4D4D4\">({</span><span style=\"color: #CE9178\">\"localhost\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">8080</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">network</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">Address</span><span style=\"color: #D4D4D4\">::IP_4});</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }());</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  /* HTTP 请求的路由 用于将 URL 映射到终端处理函数*/</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">OATPP_CREATE_COMPONENT</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">web</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">server</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">HttpRouter</span><span style=\"color: #D4D4D4\">&gt;, </span><span style=\"color: #4EC9B0\">httpRouter</span><span style=\"color: #D4D4D4\">)([] {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">web</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">server</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">HttpRouter</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">createShared</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }());</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  /* 简单的 HTTP</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">   * 连接处理器。它以多线程方式处理传入的连接，为每个连接创建一个线程。 */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">OATPP_CREATE_COMPONENT</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">network</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">ConnectionHandler</span><span style=\"color: #D4D4D4\">&gt;, </span><span style=\"color: #4EC9B0\">serverConnectionHandler</span><span style=\"color: #D4D4D4\">)([] {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">OATPP_COMPONENT</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::shared_ptr&lt;</span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">web</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">server</span><span style=\"color: #D4D4D4\">::HttpRouter&gt;, router);</span><span style=\"color: #6A9955\"> // get Router component</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">web</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">server</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">HttpConnectionHandler</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">createShared</span><span style=\"color: #D4D4D4\">(router);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }());</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  /* DTO转换器 */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">OATPP_CREATE_COMPONENT</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">mapping</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">ObjectMapper</span><span style=\"color: #D4D4D4\">&gt;, </span><span style=\"color: #4EC9B0\">apiObjectMapper</span><span style=\"color: #D4D4D4\">)([] {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">make_shared</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">json</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">ObjectMapper</span><span style=\"color: #D4D4D4\">&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }());</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">//通过 OATPP_CREATE_COMPONENT 创建环境组件，并在需要的地方使用 OATPP_COMPONENT 注入它。、</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">//现在所有主要组件都在这个地方初始化，使得通过替换组件来配置应用程序更加容易。</span></span></code></pre></div><p>然后在 <code>main.cpp</code> 中使用这些组件：</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">/* main.cpp */</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">\"AppComponent.hpp\"</span><span style=\"color: #569CD6\"> </span><span style=\"color: #6A9955\">//</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">\"oatpp/base/Log.hpp\"</span><span style=\"color: #569CD6\"> </span><span style=\"color: #6A9955\">//日志</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">\"oatpp/macro/component.hpp\"</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">\"oatpp/network/Server.hpp\"</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;memory&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">//用法：OATPP_COMPONENT(要注入的类型，组件在run函数中将要使用的名称)</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">//OATPP_COMPONENT会根据类型在oatpp::base::Environment中查找对应的组件并注入。</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">run</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  AppComponent components;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  /* DTO转换器 */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">OATPP_COMPONENT</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::shared_ptr&lt;</span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">mapping</span><span style=\"color: #D4D4D4\">::ObjectMapper&gt;,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                  objectMapper);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">OATPP_COMPONENT</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::shared_ptr&lt;</span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">web</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">server</span><span style=\"color: #D4D4D4\">::HttpRouter&gt;, router);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">OATPP_COMPONENT</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::shared_ptr&lt;</span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">network</span><span style=\"color: #D4D4D4\">::ConnectionHandler&gt;,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                  connectionHandler);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">OATPP_COMPONENT</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::shared_ptr&lt;</span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">network</span><span style=\"color: #D4D4D4\">::ServerConnectionProvider&gt;,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                  connectionProvider);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">network</span><span style=\"color: #D4D4D4\">::Server </span><span style=\"color: #DCDCAA\">server</span><span style=\"color: #D4D4D4\">(connectionProvider, connectionHandler);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">OATPP_LOGi</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"MyApp\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">\"Server running on port {}\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">connectionProvider</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #DCDCAA\">getProperty</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"port\"</span><span style=\"color: #D4D4D4\">).</span><span style=\"color: #DCDCAA\">toString</span><span style=\"color: #D4D4D4\">());</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">server</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">run</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">Environment</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">init</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">run</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">Environment</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">destroy</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h1 id=\"DTO介绍\"><a href=\"#DTO介绍\" class=\"headerlink\" title=\"DTO介绍\"></a><a href=\"https://oatpp.io/docs/components/dto\">DTO介绍</a></h1><p>DTO 是任何扩展了 oatpp::DTO 类的对象。它是一个特殊对象，可以通过 oatpp::data::mapping::ObjectMapper 进行序列化和反序列化。一个项目结构良好的实现中，通常放到 dto 目录下。</p>\n<p>这里示例两个 DTO 对象：</p>\n<p>MessageDto，包含Int32类型的statusCode字段 和 String类型的message字段;</p>\n<p>HelloDto，包含String类型的userAgent字段、message字段和server字段。</p>\n<p>把他们放在 dto 目录下的 DTOs.hpp 文件中：</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#pragma</span><span style=\"color: #569CD6\"> </span><span style=\"color: #9CDCFE\">once</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">\"oatpp/Types.hpp\"</span><span style=\"color: #569CD6\"> </span><span style=\"color: #6A9955\">//这个头文件定义了DTO的一些数据结构，如Int32、DTO类等</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">\"oatpp/macro/codegen.hpp\"</span><span style=\"color: #569CD6\"> </span><span style=\"color: #6A9955\">//提供了OATPP_CODEGEN_BEGIN, OATPP_CODEGEN_END这两个宏</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">/* Begin DTO code-generation ，在这之间可以定义多个DTO转换对象*/</span></span>\n<span class=\"line\"><span style=\"color: #9CDCFE\">#include</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">OATPP_CODEGEN_BEGIN</span><span style=\"color: #D4D4D4\">(DTO)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">MessageDto</span><span style=\"color: #D4D4D4\"> : </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">DTO</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">DTO_INIT</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">MessageDto</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">DTO</span><span style=\"color: #6A9955\"> /* Extends */</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">DTO_FIELD</span><span style=\"color: #D4D4D4\">(Int32, statusCode);</span><span style=\"color: #6A9955\">   // Status code field</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">DTO_FIELD</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">message</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">     // Message field</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">HelloDto</span><span style=\"color: #D4D4D4\"> : </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">DTO</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">DTO_INIT</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">HelloDto</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">DTO</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">DTO_FIELD</span><span style=\"color: #D4D4D4\">(String, userAgent, </span><span style=\"color: #CE9178\">\"user-agent\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">DTO_FIELD</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">message</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">DTO_FIELD</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">server</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">/* End DTO code-generation */</span></span>\n<span class=\"line\"><span style=\"color: #9CDCFE\">#include</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">OATPP_CODEGEN_END</span><span style=\"color: #D4D4D4\">(DTO)</span></span></code></pre></div><p>这样便定义好了，在使用的时候，包含该头文件即可。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">原理介绍</p>\n<p>该功能由大量宏定义完成，我们将宏展开来看。</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">// #include OATPP_CODEGEN_BEGIN(DTO)</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">\"oatpp/codegen/DTO_define.hpp\"</span><span style=\"color: #569CD6\"> </span><span style=\"color: #6A9955\">//定义了DTO_FIELD, DTO_INIT等宏</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">MessageDto</span><span style=\"color: #D4D4D4\"> : </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">DTO</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  // DTO_INIT(MessageDto, DTO )  //生成了下面的代码</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">template</span><span style=\"color: #D4D4D4\"> &lt;</span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">__Z__T__PARAM</span><span style=\"color: #D4D4D4\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">friend</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">type</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">__class</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">Object</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">typedef</span><span style=\"color: #D4D4D4\"> MessageDto Z__CLASS;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">typedef</span><span style=\"color: #D4D4D4\"> DTO Z__CLASS_EXTENDED;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">typedef</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">type</span><span style=\"color: #D4D4D4\"> ::DTOWrapper&lt;Z__CLASS&gt; Wrapper;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">private:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">Type</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #DCDCAA\">getParentType</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">Object</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">Z__CLASS_EXTENDED</span><span style=\"color: #D4D4D4\">&gt;::</span><span style=\"color: #4EC9B0\">Class</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #DCDCAA\">getType</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #DCDCAA\">Z__CLASS_TYPE_NAME</span><span style=\"color: #D4D4D4\">() { </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"MessageDto\"</span><span style=\"color: #D4D4D4\">; }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">type</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">BaseObject</span><span style=\"color: #D4D4D4\"> ::Properties *</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">Z__CLASS_GET_FIELDS_MAP</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">type</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">BaseObject</span><span style=\"color: #D4D4D4\"> ::Properties map =</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">type</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">BaseObject</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #DCDCAA\">Properties</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> &amp;map;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">template</span><span style=\"color: #D4D4D4\"> &lt;</span><span style=\"color: #569CD6\">typename</span><span style=\"color: #D4D4D4\">... </span><span style=\"color: #4EC9B0\">Args</span><span style=\"color: #D4D4D4\">&gt; </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Wrapper</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">createShared</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">Args</span><span style=\"color: #D4D4D4\">... </span><span style=\"color: #9CDCFE\">args</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Wrapper</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #DCDCAA\">make_shared</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">Z__CLASS</span><span style=\"color: #D4D4D4\">&gt;(args...),</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                   </span><span style=\"color: #4EC9B0\">Wrapper</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">Class</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #DCDCAA\">getType</span><span style=\"color: #D4D4D4\">());</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  // DTO_FIELD(Int32, statusCode ); //生成了下面的代码</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">v_int64</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Z__PROPERTY_OFFSET_statusCode</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">buffer</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(Z__CLASS)];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">auto</span><span style=\"color: #D4D4D4\"> obj = </span><span style=\"color: #569CD6\">static_cast</span><span style=\"color: #D4D4D4\">&lt;Z__CLASS *&gt;(</span><span style=\"color: #569CD6\">reinterpret_cast</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *&gt;(buffer));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">auto</span><span style=\"color: #D4D4D4\"> ptr = &amp;</span><span style=\"color: #9CDCFE\">obj</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">statusCode</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">reinterpret_cast</span><span style=\"color: #D4D4D4\">&lt;v_int64&gt;(ptr) - </span><span style=\"color: #569CD6\">reinterpret_cast</span><span style=\"color: #D4D4D4\">&lt;v_int64&gt;(buffer);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">type</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">BaseObject</span><span style=\"color: #D4D4D4\"> ::Property *</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">Z__PROPERTY_SINGLETON_statusCode</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">type</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">BaseObject</span><span style=\"color: #D4D4D4\"> ::Property *property =</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">type</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">BaseObject</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #DCDCAA\">Property</span><span style=\"color: #D4D4D4\">(</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #DCDCAA\">Z__PROPERTY_OFFSET_statusCode</span><span style=\"color: #D4D4D4\">(), </span><span style=\"color: #CE9178\">\"statusCode\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">\"statusCode\"</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #4EC9B0\">Int32</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #4EC9B0\">Class</span><span style=\"color: #D4D4D4\"> ::</span><span style=\"color: #DCDCAA\">getType</span><span style=\"color: #D4D4D4\">());</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> property;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Z__PROPERTY_INIT_statusCode</span><span style=\"color: #D4D4D4\">(...) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">Z__CLASS_GET_FIELDS_MAP</span><span style=\"color: #D4D4D4\">()-&gt;</span><span style=\"color: #DCDCAA\">pushBack</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #DCDCAA\">Z__PROPERTY_SINGLETON_statusCode</span><span style=\"color: #D4D4D4\">());</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">true</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Int32</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Z__PROPERTY_INITIALIZER_PROXY_statusCode</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> initialized = </span><span style=\"color: #DCDCAA\">Z__PROPERTY_INIT_statusCode</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    (</span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\">)initialized;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Int32</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  Int32 statusCode = </span><span style=\"color: #DCDCAA\">Z__PROPERTY_INITIALIZER_PROXY_statusCode</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">// #include OATPP_CODEGEN_END(DTO)</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">\"oatpp/codegen/DTO_undef.hpp\"</span><span style=\"color: #569CD6\"> </span><span style=\"color: #6A9955\">//取消了对应的宏</span></span></code></pre></div>\n</div>\n<h1 id=\"控制器介绍\"><a href=\"#控制器介绍\" class=\"headerlink\" title=\"控制器介绍\"></a>控制器介绍</h1><p>在具体介绍控制器之前，先来看看简单的oatpp::web::server::HttpRequestHandler。</p>\n<h2 id=\"HttpRequestHandler\"><a href=\"#HttpRequestHandler\" class=\"headerlink\" title=\"HttpRequestHandler\"></a><a href=\"https://oatpp.io/api/latest/oatpp/web/server/HttpRequestHandler/\">HttpRequestHandler</a></h2><p>这个类是一个接口，用于处理 HTTP 请求。我们可以继承这个类，然后实现它的 handle 方法，来处理请求。</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">/* MyHandler.hpp */</span></span>\n<span class=\"line\"><span style=\"color: #9CDCFE\">#progra</span><span style=\"color: #D4D4D4\"> once</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">\"oatpp/web/server/HttpRequestHandler.hpp\"</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">\"../dto/DTOs.hpp\"</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">/**</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\"> * 自定义的Http请求处理类</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\"> */</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Handler</span><span style=\"color: #D4D4D4\"> : </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">web</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">server</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">HttpRequestHandler</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">private:</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //为实现DTO返回定义的变量,无该需求时可以删除</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::shared_ptr&lt;</span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">mapping</span><span style=\"color: #D4D4D4\">::ObjectMapper&gt; m_objectMapper;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public:</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //构造函数，由用户在初始化的时候调用并将对象传递给router</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">Handler</span><span style=\"color: #D4D4D4\">(</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">data</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">mapping</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">ObjectMapper</span><span style=\"color: #D4D4D4\">&gt; </span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #9CDCFE\">objectMapper</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      : </span><span style=\"color: #DCDCAA\">m_objectMapper</span><span style=\"color: #D4D4D4\">(objectMapper) {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  // 这种参数的handle，通过DTO返回。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::shared_ptr&lt;OutgoingResponse&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">handle</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">IncomingRequest</span><span style=\"color: #D4D4D4\">&gt; </span><span style=\"color: #569CD6\">&amp;</span><span style=\"color: #9CDCFE\">request</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #569CD6\">override</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">auto</span><span style=\"color: #D4D4D4\"> message = </span><span style=\"color: #4EC9B0\">MessageDto</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">createShared</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">message</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">statusCode</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #B5CEA8\">1024</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">message</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">message</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #CE9178\">\"Hello DTO! handler\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">ResponseFactory</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">createResponse</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">Status</span><span style=\"color: #D4D4D4\">::CODE_200, message,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                                           m_objectMapper);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  // 这种参数的handle，是最简单的，返回字符串。</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  // std::shared_ptr&lt;OutgoingResponse&gt; handle(const</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  // std::shared_ptr&lt;IncomingRequest&gt;&amp; request) override { return</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  // ResponseFactory::createResponse(Status::CODE_200, \"Hello World!\");</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  // }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span></code></pre></div><div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">如何将其添加到路由中</p>\n<p><p>在run的上下文中，我们可以这样添加：</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #9CDCFE\">router</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #DCDCAA\">route</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"GET\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">\"handler\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">make_shared</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">Handler</span><span style=\"color: #D4D4D4\">&gt;(objectMapper));</span></span></code></pre></div><p>此时，当访问 <code>http://localhost:8080/handler</code> 时，将会返回 <code>{\"statusCode\":1024,\"message\":\"Hello DTO! handler\"}</code>。</p>\n</p>\n</div>\n<h2 id=\"ApiController\"><a href=\"#ApiController\" class=\"headerlink\" title=\"ApiController\"></a><a href=\"https://oatpp.io/docs/components/api-controller\">ApiController</a></h2><p>ApiController 是扩展自 oatpp::web::server::api::ApiController 的类。它用于端点（处理请求的方法）的实现和管理。其作用和 HttpRequestHandler 类似，但是 ApiController 提供了更多的功能，如路由管理、请求拦截器、响应拦截器等。一般而言更推荐使用 ApiController。</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">/* MyController.hpp */</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">\"oatpp/web/server/api/ApiController.hpp\"</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">\"oatpp/macro/codegen.hpp\"</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">\"oatpp/macro/component.hpp\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #9CDCFE\">#include</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">OATPP_CODEGEN_BEGIN</span><span style=\"color: #D4D4D4\">(ApiController)</span><span style=\"color: #6A9955\"> ///&lt; Begin Codegen</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">MyController</span><span style=\"color: #D4D4D4\"> : </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">oatpp</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">web</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">server</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">api</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">ApiController</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">MyController</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">OATPP_COMPONENT</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">shared_ptr</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">ObjectMapper</span><span style=\"color: #D4D4D4\">&gt;, </span><span style=\"color: #4EC9B0\">objectMapper</span><span style=\"color: #D4D4D4\">))</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    : oatpp::web::server::api::</span><span style=\"color: #DCDCAA\">ApiController</span><span style=\"color: #D4D4D4\">(objectMapper)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  {}</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  //用法：ENDPOINT(\"&lt;http-method&gt;\", \"&lt;path&gt;\", 方法对应的成员函数名, 可选的参数映射)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">ENDPOINT</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"GET\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">\"/hello\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">root</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">auto</span><span style=\"color: #D4D4D4\"> dto = </span><span style=\"color: #4EC9B0\">MessageDto</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">createShared</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">dto</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">statusCode</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #B5CEA8\">200</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">dto</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">message</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #CE9178\">\"Hello World!\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">createDtoResponse</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">Status</span><span style=\"color: #D4D4D4\">::CODE_200, dto);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">ENDPOINT</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"GET\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">\"/users/{userId}\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">getUserById</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">PATH</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">Int64</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">userId</span><span style=\"color: #D4D4D4\">)) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">OATPP_LOGi</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Test\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">\"userId={}\"</span><span style=\"color: #D4D4D4\">, userId);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">createResponse</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">Status</span><span style=\"color: #D4D4D4\">::CODE_200, </span><span style=\"color: #CE9178\">\"OK\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  // 这里可以继续插入更多的ENDPOINT</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #9CDCFE\">#include</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">OATPP_CODEGEN_END</span><span style=\"color: #D4D4D4\">(ApiController)</span><span style=\"color: #6A9955\"> ///&lt; End Codegen</span></span></code></pre></div><p>可选的参数映射参照下表：</p>\n<table>\n<thead>\n<tr>\n<th>参数映射</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>PATH(Type, name)</td>\n<td>从路径中提取参数（存在多个路径参数时，则要多个PATH宏，按顺序取参数）</td>\n</tr>\n<tr>\n<td>PATH(Type, name, “paramName”)</td>\n<td>从路径中提取参数，<code>paramName</code>为路径中的参数名</td>\n</tr>\n<tr>\n<td>HEADER(Type, name, “headerName”)</td>\n<td>从请求头中提取参数，<code>headerName</code>为请求头中的参数名</td>\n</tr>\n<tr>\n<td>QUERY(Type, name)</td>\n<td>从查询参数中提取参数，此时必须有名为<code>name</code>的查询参数</td>\n</tr>\n<tr>\n<td>QUERY(Type, name, “queryName”)</td>\n<td>从查询参数中提取参数，此时必须有名为<code>queryName</code>的查询参数</td>\n</tr>\n<tr>\n<td>QUERIES(QueryParams, queryParams)</td>\n<td>从查询参数中提取参数，允许空，<code>queryParams</code>为查询参数集合,使用getAll()获得对应的可迭代对象</td>\n</tr>\n<tr>\n<td>BODY_STRING(String, name)</td>\n<td>从请求体中提取参数，允许空，可以传二进制数据，<code>name</code>为请求体中所有内容的 String</td>\n</tr>\n<tr>\n<td>BODY_DTO(Object<userdto>, userDto)</userdto></td>\n<td>从请求体中提取参数，<code>userDto</code>为参数反序列化后的结果，使用默认的 ObjectMapper（在 ApiController 的构造函数中传递的那个）进行解析</td>\n</tr>\n<tr>\n<td>REQUEST(const std::shared_ptr<incomingrequest>&amp;, request)</incomingrequest></td>\n<td>从请求中提取参数，<code>request</code>为请求对象</td>\n</tr>\n<tr>\n<td>AUTHORIZATION(std::shared_ptr<defaultbasicauthorizationobject>, authObject)</defaultbasicauthorizationobject></td>\n<td>表示需要使用 Basic 进行认证，要求在 ApiController 的构造函数中，使用成员函数 <code>setDefaultAuthorizationHandler</code> 设置认证处理器。在函数体中也要使用 <code>OATPP_ASSERT_HTTP</code> 检查<code>authObject</code>的数据来进行验权</td>\n</tr>\n<tr>\n<td>AUTHORIZATION(std::shared_ptr<defaultbasicauthorizationobject>, authObject, m_basicAuthHandler)</defaultbasicauthorizationobject></td>\n<td>表示需要使用 Basic 进行认证，不是使用默认的认证处理器，而是指定<code>m_basicAuthHandler</code> 为认证处理器</td>\n</tr>\n<tr>\n<td>ADD_CORS(&lt; endpoint &gt;, &lt;allow_origin = “*”&gt;, &lt;allow_methods = “GET, POST, OPTIONS”&gt;,&lt;allow_headers = “DNT, User-Agent, X-Requested-With, If-Modified-Since, Cache-Control, Content-Type, Range”&gt;,&lt;max_age = “1728000”&gt;);</td>\n<td>添加跨域资源共享（CORS）支持，<code>&lt;endpoint&gt;</code>为要添加的端点，<code>&lt;allow_origin&gt;</code>为允许的来源，<code>&lt;allow_methods&gt;</code>为允许的方法，<code>&lt;allow_headers&gt;</code>为允许的头，<code>&lt;max_age&gt;</code>为最大缓存时间</td>\n</tr>\n</tbody></table>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">如何将其添加到路由中</p>\n<p>在run的上下文中，我们可以这样添加：</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #9CDCFE\">router</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #DCDCAA\">addController</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">make_shared</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">MyController</span><span style=\"color: #D4D4D4\">&gt;(objectMapper));</span></span></code></pre></div><p>此时，当访问 <code>http://localhost:8080/hello</code> 时，将会返回 <code>{\"statusCode\":200,\"message\":\"Hello World!\"}</code>。</p>\n\n</div>\n<h1 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a><a href=\"https://oatpp.io/docs/simple-vs-async/\">异步</a></h1><p>oatpp 支持同步和异步两种模式。</p>\n<p>同步：(1 线程) / (1 连接) + (1 线程用于接受连接)。较低延迟，简单 API，较少编码。缺点：相对较小的最大并发连接数限制。</p>\n<p>异步：(1 线程) / (N 连接) + (1 线程用于接受连接)。高性能，能够处理数万同时连接，所需资源更少。缺点：相对较高的延迟，API 更复杂，编码更多。</p>\n<p>其主要区别在于：ConnectionHandler、ApiController的 ENDPOINT 中，具体看官方文档。</p>\n<h1 id=\"ORM介绍\"><a href=\"#ORM介绍\" class=\"headerlink\" title=\"ORM介绍\"></a><a href=\"https://oatpp.io/docs/components/orm\">ORM介绍</a></h1><p>基于对象映射框架（ORM），确保在操作数据时的数据一致性。同时，它与其他 Oat++组件完美集成，确保应用程序中的数据流无缝进行（例如：从 REST 到数据库，从数据库到 REST）。</p>\n<p>链接底部提供了一个示例项目，可以参考。</p>\n","feature":true,"text":"简介Oat++ 是一个开源的 C++ Web 框架，主打一个高性能、无依赖，提供了生产级开发所需的所有必要组件： 带有请求参数映射和 Swagger-UI 注释...","permalink":"/post/C-Web框架oatpp","photos":[],"count_time":{"symbolsCount":"22k","symbolsTime":"20 mins."},"categories":[{"name":"后端","slug":"后端","count":1,"path":"api/categories/后端.json"}],"tags":[{"name":"C++","slug":"C","count":13,"path":"api/tags/C.json"},{"name":"Web","slug":"Web","count":1,"path":"api/tags/Web.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">简介</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8-oatpp-%EF%BC%9F\"><span class=\"toc-text\">如何在项目中使用 oatpp ？</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BA%95%E5%B1%82%E7%BB%84%E4%BB%B6%EF%BC%88Component%EF%BC%89%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">底层组件（Component）介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HttpRouter\"><span class=\"toc-text\">HttpRouter</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HttpConnectionHandler\"><span class=\"toc-text\">HttpConnectionHandler</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ConnectionProvider\"><span class=\"toc-text\">ConnectionProvider</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Server\"><span class=\"toc-text\">Server</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ObjectMapper\"><span class=\"toc-text\">ObjectMapper</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">组件的使用</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#DTO%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">DTO介绍</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E5%99%A8%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">控制器介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HttpRequestHandler\"><span class=\"toc-text\">HttpRequestHandler</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ApiController\"><span class=\"toc-text\">ApiController</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BC%82%E6%AD%A5\"><span class=\"toc-text\">异步</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ORM%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">ORM介绍</span></a></li></ol>","author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"Linux网络编程（libevent）","uid":"8dd59640d6bc3d377df04d40d6faff25","slug":"Linux网络编程（libevent）","date":"2024-02-19T12:26:18.000Z","updated":"2024-08-19T04:37:10.027Z","comments":true,"path":"api/articles/Linux网络编程（libevent）.json","keywords":"C++,Pyhton,Java,算法","cover":"img/linux.jpeg","text":"libevent的作用对于简单的socket编程，采用阻塞的方式是最基础的。例如，当调用recv函数时，如果没有数据到来就会一直阻塞。这种方式的问题在于，如果只...","permalink":"/post/Linux网络编程（libevent）","photos":[],"count_time":{"symbolsCount":"27k","symbolsTime":"24 mins."},"categories":[{"name":"Linux","slug":"Linux","count":8,"path":"api/categories/Linux.json"}],"tags":[{"name":"C++","slug":"C","count":13,"path":"api/tags/C.json"},{"name":"Linux","slug":"Linux","count":8,"path":"api/tags/Linux.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true}}