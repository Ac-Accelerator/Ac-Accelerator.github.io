{"title":"STM32入门（六）：串口通信","uid":"a08aadec6f6b3fd60392df174980aebb","slug":"STM32入门（六）：串口通信","date":"2023-07-16T06:40:29.000Z","updated":"2023-09-25T16:37:41.405Z","comments":true,"path":"api/articles/STM32入门（六）：串口通信.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/STM32cover.png","content":"<h2 id=\"通信基本概念\"><a href=\"#通信基本概念\" class=\"headerlink\" title=\"通信基本概念\"></a>通信基本概念</h2><h3 id=\"串行-并行通信\"><a href=\"#串行-并行通信\" class=\"headerlink\" title=\"串行/并行通信\"></a>串行/并行通信</h3><p>串行通信：数据逐位传输，一个单位时间只能发送一个bit。<br>并行通信：数据同时通过多条线路传输，一次可以发送多个bit</p>\n<h3 id=\"单工-半双工-全双工通信\"><a href=\"#单工-半双工-全双工通信\" class=\"headerlink\" title=\"单工/半双工/全双工通信\"></a>单工/半双工/全双工通信</h3><p>单工通信：数据只能单向传输，不能双向传输。<br>半双工通信：数据可以双向传输，但是不能同时传输。<br>全双工通信：数据可以双向传输，且可以同时传输。</p>\n<h3 id=\"同步-异步通信\"><a href=\"#同步-异步通信\" class=\"headerlink\" title=\"同步/异步通信\"></a>同步/异步通信</h3><p>同步通信：发送端和接收端的时钟信号是同步的，发送端和接收端的时钟信号是同一个时钟信号。<br>异步通信：没有时钟信号，通过在数据的起始和终止位置添加特殊的标志位来实现同步。</p>\n<h3 id=\"波特率-比特率\"><a href=\"#波特率-比特率\" class=\"headerlink\" title=\"波特率/比特率\"></a>波特率/比特率</h3><p>比特率：单位时间内传输的bit数，单位为bit/s。<br>波特率：单位时间内传送的码元个数，单位为Baud。<br>码元与比特：信号在被编码调制后，一个码元可以代表多个比特。</p>\n<h2 id=\"常见的串口通信协议\"><a href=\"#常见的串口通信协议\" class=\"headerlink\" title=\"常见的串口通信协议\"></a>常见的串口通信协议</h2><table>\n<thead>\n<tr>\n<th align=\"center\">通信协议</th>\n<th align=\"center\">接口引脚</th>\n<th align=\"center\">数据同步方式</th>\n<th align=\"center\">数据传输方向</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">UART</td>\n<td align=\"center\">TXD、RXD、GND</td>\n<td align=\"center\">异步</td>\n<td align=\"center\">全双工</td>\n</tr>\n<tr>\n<td align=\"center\">SPI</td>\n<td align=\"center\">MOSI、MISO、SCLK、CS、GND</td>\n<td align=\"center\">同步</td>\n<td align=\"center\">全双工</td>\n</tr>\n<tr>\n<td align=\"center\">I2C</td>\n<td align=\"center\">SDA、SCL、GND</td>\n<td align=\"center\">同步</td>\n<td align=\"center\">半双工</td>\n</tr>\n<tr>\n<td align=\"center\">1-Wire</td>\n<td align=\"center\">DQ、GND</td>\n<td align=\"center\">异步</td>\n<td align=\"center\">半双工</td>\n</tr>\n</tbody></table>\n<h2 id=\"串口\"><a href=\"#串口\" class=\"headerlink\" title=\"串口\"></a>串口</h2><p>按位发送或接收的接口，如RS-232、RS-485、RS-422等。</p>\n<h3 id=\"RS-232-USB\"><a href=\"#RS-232-USB\" class=\"headerlink\" title=\"RS-232(USB)\"></a>RS-232(USB)</h3><p>RS-232是一种串行通信接口标准，它是由美国电子工业协会联合贝尔系统公司、调制解调器厂家及计算机终端生产厂家于1970年共同制定，其全名是“数据终端设备和数据通信设备之间串行二进制数据交换接口技术标准”</p>\n<p>常用的RS-232串口使用方法：USB通过串口连接电脑等设备，USB信号通过USB转串口模块CH340，将USB电平转换为TTL/CMOS电平。</p>\n<h4 id=\"和USART的关系\"><a href=\"#和USART的关系\" class=\"headerlink\" title=\"和USART的关系\"></a>和USART的关系</h4><p>USART是一种集成电路，它能够以同步或异步的方式进行数据传输。而RS-232是一种串行通信接口标准，它定义了电气特性、机械特性和功能特性等方面的规范。</p>\n<p>USART可以通过RS-232接口与其他设备进行通信。在这种情况下，USART负责数据的发送和接收，而RS-232负责定义数据传输的电气特性和其他规范。因此，USART和RS-232可以协同工作，实现串行通信。</p>\n<h4 id=\"USART\"><a href=\"#USART\" class=\"headerlink\" title=\"USART\"></a>USART</h4><p>通用同步异步收发器(Universal Synchronous Asynchronous Receiver Transmitter)提供了一种灵活的方法与使用工业标准NRZ异步串行数据格式的外部设备之间进行全双工数据交换。USART利用分数波特率发生器提供宽范围的波特率选择。它支持同步单向通信和半双工单线通信，也支持LIN(局部互连网)，智能卡协议和IrDA(红外数据组织)SIR ENDEC规范，以及调制解调器(CTS/RTS)操作。它还允许多处理器通信。使用多缓冲器配置的DMA方式，可以实现高速数据通信。</p>\n<p>UART(Universal Asynchronous Receiver Transmitter)异步收发器是没有同步收发功能的USART</p>\n<p><strong>UART和USART都可以使用RS-232串口作为物理层。</strong></p>\n<p>通过STM32选型手册可以得知，STM32F103ZET6有3个USART，两个UART。因此有5个串口。</p>\n<p>UART：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">串口号</th>\n<th align=\"center\">TX</th>\n<th align=\"center\">RX</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">UART4</td>\n<td align=\"center\">PC10</td>\n<td align=\"center\">PC11</td>\n</tr>\n<tr>\n<td align=\"center\">UART5</td>\n<td align=\"center\">PC12</td>\n<td align=\"center\">PD2</td>\n</tr>\n</tbody></table>\n<p>USART：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">串口号</th>\n<th align=\"center\">TX</th>\n<th align=\"center\">RX</th>\n<th align=\"center\">CTS</th>\n<th align=\"center\">RTS</th>\n<th align=\"center\">CK</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">USART1</td>\n<td align=\"center\">PA9</td>\n<td align=\"center\">PA10</td>\n<td align=\"center\">PA11</td>\n<td align=\"center\">PA12</td>\n<td align=\"center\">PA8</td>\n</tr>\n<tr>\n<td align=\"center\">USART2</td>\n<td align=\"center\">PA2</td>\n<td align=\"center\">PA3</td>\n<td align=\"center\">PA0</td>\n<td align=\"center\">PA1</td>\n<td align=\"center\">PA4</td>\n</tr>\n<tr>\n<td align=\"center\">USART3</td>\n<td align=\"center\">PB10</td>\n<td align=\"center\">PB11</td>\n<td align=\"center\">PB13</td>\n<td align=\"center\">PB14</td>\n<td align=\"center\">PB12</td>\n</tr>\n</tbody></table>\n<img src=\"/img/USART框图.png\">\n\n<ul>\n<li><p>SW_RX： 数据接收引脚，只用于单线和智能卡模式，属于内部引脚，没有具体外部引脚。</p>\n</li>\n<li><p>RX：接收数据串行输。通过过采样技术来区别数据和噪音，从而恢复数据。</p>\n</li>\n<li><p>TX：发送数据输出。当发送器被禁止时，输出引脚恢复到它的I/O端口配置。当发送器被激活，并且不发送数据时，TX引脚处于高电平。在单线和智能卡模式里，此I/O口被同时用于数据的发送和接收。</p>\n</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>总线在发送或接收前应处于空闲状态</li>\n<li>一个起始位</li>\n<li>一个数据字(8或9位)，最低有效位在前</li>\n<li>0.5，1.5，2个的停止位，由此表明数据帧的结束</li>\n<li>使用分数波特率发生器 —— 12位整数和4位小数的表示方法。</li>\n<li>一个状态寄存器(USART_SR)</li>\n<li>数据寄存器(USART_DR)</li>\n<li>一个波特率寄存器(USART_BRR)，12位的整数和4位小数</li>\n<li>一个智能卡模式下的保护时间寄存器(USART_GTPR)</li>\n</ul></blockquote>\n<p>上面这两个USART引脚对应着RS-232串口的RXD和TXD。</p>\n<p>在同步模式中需要以下引脚：</p>\n<ul>\n<li>SCLK： 时钟信号，用于同步数据传输。</li>\n</ul>\n<p>在IrDA模式里需要下列引脚：</p>\n<ul>\n<li>IrDA_RDI: IrDA模式下的数据输入。</li>\n<li>IrDA_TDO: IrDA模式下的数据输出。</li>\n</ul>\n<p>在硬件流控模式中需要以下引脚：</p>\n<ul>\n<li>nCTS: 清除发送，若是高电平，在当前数据传输结束时阻断下一次的数据发送。</li>\n<li>nRTS: 发送请求，若是低电平，表明USART准备好接收数据。</li>\n</ul>\n<h4 id=\"USART寄存器介绍\"><a href=\"#USART寄存器介绍\" class=\"headerlink\" title=\"USART寄存器介绍\"></a>USART寄存器介绍</h4><p><strong>USART_SR</strong>：状态寄存器<br><strong>USART_DR</strong>：数据寄存器<br><strong>USART_BRR</strong>：波特率寄存器<br><strong>USART_CR1</strong>：控制寄存器1<br><strong>USART_CR2</strong>：控制寄存器2<br><strong>USART_CR3</strong>：控制寄存器3</p>\n<p>详细功能见参考手册。</p>\n<h4 id=\"设置USART波特率\"><a href=\"#设置USART波特率\" class=\"headerlink\" title=\"设置USART波特率\"></a>设置USART波特率</h4><p>依据USART的框图，可以得知波特率的计算公式：</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.602ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"27.38ex\" height=\"4.726ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1381 12102 2089\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(759,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1288,0)\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1860,0)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2657.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mfrac\" transform=\"translate(3713.6,0)\"><g data-mml-node=\"msub\" transform=\"translate(3465.1,676)\"><g data-mml-node=\"mi\"><path data-c=\"1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(523,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(433,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(731,0)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-686)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1222.2,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2222.4,0)\"><path data-c=\"1D448\" d=\"M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2989.4,0)\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3634.4,0)\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4384.4,0)\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5143.4,0)\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5847.4,0)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(6675.4,0)\"><path data-c=\"1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(7179.4,0)\"><path data-c=\"1D449\" d=\"M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z\"></path></g></g><rect width=\"8148.4\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g></g></svg></mjx-container></p>\n<p>而USARTDIV由USART_BRR（波特比率寄存器）的低16位DIV_Mantissa和DIV_Fraction共同决定，其中DIV_Mantissa是整数部分，DIV_Fraction是小数部分。所以只需要设置这两个寄存器就可以设置USARTDIV，进而设置波特率。</p>\n<p>USART分频的计算公式：</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.602ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"46.373ex\" height=\"4.676ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1359 20496.8 2067\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D448\" d=\"M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(767,0)\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1412,0)\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2162,0)\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2921,0)\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3625,0)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4453,0)\"><path data-c=\"1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4957,0)\"><path data-c=\"1D449\" d=\"M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6003.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(7059.6,0)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(7887.6,0)\"><path data-c=\"1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(8391.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D449\" d=\"M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(616,-150) scale(0.707)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g></g><g data-mml-node=\"mi\" transform=\"translate(9800.7,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(10329.7,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(10929.7,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(11290.7,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(11635.7,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(12104.7,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(12573.7,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(13324.9,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mfrac\" transform=\"translate(14325.2,0)\"><g data-mml-node=\"mrow\" transform=\"translate(220,676)\"><g data-mml-node=\"mi\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(828,0)\"><path data-c=\"1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(1332,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D449\" d=\"M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(616,-150) scale(0.707)\"><path data-c=\"1D439\" d=\"M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z\"></path></g></g><g data-mml-node=\"mi\" transform=\"translate(2527.6,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2978.6,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3507.6,0)\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3940.6,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4301.6,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4646.6,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5131.6,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mn\" transform=\"translate(2585.8,-686)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(500,0)\"></path></g><rect width=\"5931.6\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g></g></svg></mjx-container></p>\n<p>通过以上两个公式，可以由USART_BRR的值推出波特率，也可以由波特率推出USART_BRR的值。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>要注意的是，USART1的时钟是PCLK2（因为挂载在APB2总线上），而其他的串口的时钟是PCLK1（因为挂载在APB1总线上）。详情参考芯片手册。</p></blockquote>\n<h4 id=\"HAL库回调机制\"><a href=\"#HAL库回调机制\" class=\"headerlink\" title=\"HAL库回调机制\"></a>HAL库回调机制</h4><p><strong>外设初始化MSP回调机制：</strong></p>\n<p>MSP的全称是MCU Support Package。它是为了方便ST不同芯片平台移植而产生的。</p>\n<p>HAL_PPP_Init()函数会调用HAL_PPP_MspInit()回调函数（PPP代表外设名字），其中HAL_PPP_MspInit()是个__weak类型函数，因此用户可以重写这个函数，实现外设的初始化。</p>\n<p><strong>中断回调机制：</strong></p>\n<p>HAL_PPP_IRQHandler()函数会调用HAL_PPP_xxx_Callback()回调函数（PPP代表外设名字，xxx代表中断类型），其中HAL_PPP_xxxCallback()是个__weak类型函数，因此用户可以重写这个函数，实现中断的处理。</p>\n<p><a href=\"/post/STM32%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E4%B8%AD%E6%96%AD\">例子</a></p>\n<h4 id=\"IO引脚复用功能\"><a href=\"#IO引脚复用功能\" class=\"headerlink\" title=\"IO引脚复用功能\"></a>IO引脚复用功能</h4><p><strong>通用：</strong> IO引脚由GPIO外设控制<br><strong>复用：</strong> IO引脚由非GPIO的其他外设控制</p>\n<p>参考芯片数据手册可以得知IO引脚分别支持哪些复用，如果遇到复用功能冲突，则可以使用重映射来实现。</p>\n<h4 id=\"USART-UART异步通信配置\"><a href=\"#USART-UART异步通信配置\" class=\"headerlink\" title=\"USART/UART异步通信配置\"></a>USART/UART异步通信配置</h4><ol>\n<li>配置串口工作参数</li>\n<li>串口底层初始化，配置NVIC,GPIO,Clock等</li>\n<li>开启串口异步接收中断</li>\n<li>设置优先级，使能中断</li>\n<li>编写中断服务函数</li>\n<li>串口数据发送接收</li>\n</ol>\n<h4 id=\"HAL库程序代码：接收什么发送什么\"><a href=\"#HAL库程序代码：接收什么发送什么\" class=\"headerlink\" title=\"HAL库程序代码：接收什么发送什么\"></a>HAL库程序代码：接收什么发送什么</h4><p><a href=\"/post/STM32%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E6%97%B6%E9%92%9F%E9%85%8D%E7%BD%AE#%E6%97%B6%E9%92%9F%E7%B3%BB%E7%BB%9F%E5%88%9D%E5%A7%8B%E5%8C%96\">HAL_StatusTypeDef Stm32_Clock_Init();</a><br><a href=\"/post/STM32%E5%85%A5%E9%97%A8%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9AGPIO#GPIO%E5%88%9D%E5%A7%8B%E5%8C%96\">void LED_Init();</a></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stm32f1xx_hal.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">HAL_StatusTypeDef</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Stm32_Clock_Init</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">LED_Init</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">UART_Init</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">bound</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">print</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">str</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">printn</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">str</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">n</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">uint8_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">aRxBuffer</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">];</span><span style=\"color: #6A9955\">             // 数据缓冲区</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">UART_HandleTypeDef UART1_Handler;</span><span style=\"color: #6A9955\"> // 句柄</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">uint16_t</span><span style=\"color: #D4D4D4\"> USART_RX_STA=</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">        // 串口接收到数据标志</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">uint8_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">USART_RX_BUF</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">256</span><span style=\"color: #D4D4D4\">];</span><span style=\"color: #6A9955\">        // 串口接收缓冲区</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    /*</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    HAL_Init()中，调用HAL_NVIC_SetPriorityGrouping设置中断优先级分组为NVIC_PRIORITYGROUP_4</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    即4位抢占优先级，0位响应优先级，并且用HAL_NVIC_SetPriority将SysTick_IRQn设置为15即最低优先级</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_Init</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">                     // 初始化HAL库</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">Stm32_Clock_Init</span><span style=\"color: #D4D4D4\">(RCC_PLL_MUL9);</span><span style=\"color: #6A9955\"> // 初始化时钟</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">LED_Init</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">                     // 初始化LED外设</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">UART_Init</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">115200</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">              // 初始化串口，波特率为115200</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_GPIO_WritePin</span><span style=\"color: #D4D4D4\">(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);</span><span style=\"color: #6A9955\">//灭灯，意义不大</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> len = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">unsigned</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> times = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (USART_RX_STA &amp; </span><span style=\"color: #B5CEA8\">0x8000</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\"> // 接收完成标志为1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            len = USART_RX_STA &amp; </span><span style=\"color: #B5CEA8\">0x3fff</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\"> // 得到此次接收到的数据长度</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #DCDCAA\">print</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D7BA7D\">\\r\\n</span><span style=\"color: #CE9178\">您发送的消息为:</span><span style=\"color: #D7BA7D\">\\r\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #DCDCAA\">HAL_UART_Transmit</span><span style=\"color: #D4D4D4\">(&amp;UART1_Handler, (</span><span style=\"color: #569CD6\">uint8_t</span><span style=\"color: #D4D4D4\"> *)USART_RX_BUF, len, </span><span style=\"color: #B5CEA8\">1000</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\"> // 发送接收到的数据</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">__HAL_UART_GET_FLAG</span><span style=\"color: #D4D4D4\">(&amp;UART1_Handler, UART_FLAG_TC) != SET)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                ;</span><span style=\"color: #6A9955\">              // 等待发送结束</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #DCDCAA\">print</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D7BA7D\">\\r\\n\\r\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\"> // 插入换行</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            USART_RX_STA = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\"> // 接收完成标志清零</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">else</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            times++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (times % </span><span style=\"color: #B5CEA8\">1000</span><span style=\"color: #D4D4D4\"> == </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #DCDCAA\">print</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"请输入数据,以回车键结束</span><span style=\"color: #D7BA7D\">\\r\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (times % </span><span style=\"color: #B5CEA8\">300</span><span style=\"color: #D4D4D4\"> == </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #DCDCAA\">HAL_GPIO_TogglePin</span><span style=\"color: #D4D4D4\">(GPIOB, GPIO_PIN_5);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #DCDCAA\">HAL_Delay</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">UART_Init</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">bound</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    // UART 初始化设置</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">UART1_Handler</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Instance</span><span style=\"color: #D4D4D4\"> = USART1;</span><span style=\"color: #6A9955\">                              // 配置的目的串口是USART1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">UART1_Handler</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Init</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">BaudRate</span><span style=\"color: #D4D4D4\"> = bound;</span><span style=\"color: #6A9955\">                          // 设置串口波特率</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">UART1_Handler</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Init</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">WordLength</span><span style=\"color: #D4D4D4\"> = UART_WORDLENGTH_8B;</span><span style=\"color: #6A9955\">           // 设置字长为8位数据格式</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">UART1_Handler</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Init</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">StopBits</span><span style=\"color: #D4D4D4\"> = UART_STOPBITS_1;</span><span style=\"color: #6A9955\">                // 设置停止位数为1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">UART1_Handler</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Init</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Parity</span><span style=\"color: #D4D4D4\"> = UART_PARITY_NONE;</span><span style=\"color: #6A9955\">                 // 奇偶校验位为无</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">UART1_Handler</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Init</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">HwFlowCtl</span><span style=\"color: #D4D4D4\"> = UART_HWCONTROL_NONE;</span><span style=\"color: #6A9955\">           // 硬件流控为无</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">UART1_Handler</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Init</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Mode</span><span style=\"color: #D4D4D4\"> = UART_MODE_TX_RX;</span><span style=\"color: #6A9955\">                    // 串口模式为收发模式</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_UART_Init</span><span style=\"color: #D4D4D4\">(&amp;UART1_Handler);</span><span style=\"color: #6A9955\">                                // HAL_UART_Init()会调用HAL_UART_MspInit使能UART1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_UART_Receive_IT</span><span style=\"color: #D4D4D4\">(&amp;UART1_Handler, (</span><span style=\"color: #569CD6\">uint8_t</span><span style=\"color: #D4D4D4\"> *)aRxBuffer, </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\"> // 该函数会开启接收中断：标志位UART_IT_RXNE，并且设置接收缓冲以及接收缓冲接收最大数据量</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">HAL_UART_MspInit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">UART_HandleTypeDef</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">huart</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\"> // 定义HAL_UART_MspInit</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    GPIO_InitTypeDef GPIO_Initure;</span><span style=\"color: #6A9955\"> // GPIO端口配置结构体</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">huart</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">Instance</span><span style=\"color: #D4D4D4\"> == USART1)</span><span style=\"color: #6A9955\"> // 如果是串口1，进行串口1 MSP初始化</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">__HAL_RCC_USART1_CLK_ENABLE</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\"> // 使能USART1时钟</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">__HAL_RCC_GPIOA_CLK_ENABLE</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">  // 因为USART1都在GPIOA的引脚上，所以使能GPIOA时钟</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">__HAL_RCC_AFIO_CLK_ENABLE</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">   // 使能AFIO时钟</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">GPIO_Initure</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Pin</span><span style=\"color: #D4D4D4\"> = GPIO_PIN_9;</span><span style=\"color: #6A9955\">             // PA9</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">GPIO_Initure</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Mode</span><span style=\"color: #D4D4D4\"> = GPIO_MODE_AF_PP;</span><span style=\"color: #6A9955\">       // TX引脚，因此选择复用推挽输出</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">GPIO_Initure</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Speed</span><span style=\"color: #D4D4D4\"> = GPIO_SPEED_FREQ_HIGH;</span><span style=\"color: #6A9955\"> // 高速</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_GPIO_Init</span><span style=\"color: #D4D4D4\">(GPIOA, &amp;GPIO_Initure);</span><span style=\"color: #6A9955\">       // 初始化PA9</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">GPIO_Initure</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Pin</span><span style=\"color: #D4D4D4\"> = GPIO_PIN_10;</span><span style=\"color: #6A9955\">         // PA10</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">GPIO_Initure</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Pull</span><span style=\"color: #D4D4D4\"> = GPIO_PULLUP;</span><span style=\"color: #6A9955\">        // 空闲时高电平，因此选择上拉</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">GPIO_Initure</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">Mode</span><span style=\"color: #D4D4D4\"> = GPIO_MODE_AF_INPUT;</span><span style=\"color: #6A9955\"> // DX引脚，选择复用输入模式</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_GPIO_Init</span><span style=\"color: #D4D4D4\">(GPIOA, &amp;GPIO_Initure);</span><span style=\"color: #6A9955\">    // 初始化PA10</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_NVIC_EnableIRQ</span><span style=\"color: #D4D4D4\">(USART1_IRQn);</span><span style=\"color: #6A9955\">           // 使能USART1中断通道</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_NVIC_SetPriority</span><span style=\"color: #D4D4D4\">(USART1_IRQn, </span><span style=\"color: #B5CEA8\">14</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">0U</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\"> // 设置中断优先级</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">USART1_IRQHandler</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> timeout = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">HAL_UART_IRQHandler</span><span style=\"color: #D4D4D4\">(&amp;UART1_Handler);</span><span style=\"color: #6A9955\"> // HAL库中断处理公共函数会调用HAL_UART_RxCpltCallback</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    timeout = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">HAL_UART_GetState</span><span style=\"color: #D4D4D4\">(&amp;UART1_Handler) != HAL_UART_STATE_READY)</span><span style=\"color: #6A9955\"> // 等待就绪</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        timeout++;</span><span style=\"color: #6A9955\"> ////超时处理</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (timeout &gt; HAL_MAX_DELAY)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    timeout = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">HAL_UART_Receive_IT</span><span style=\"color: #D4D4D4\">(&amp;UART1_Handler, (</span><span style=\"color: #569CD6\">uint8_t</span><span style=\"color: #D4D4D4\"> *)aRxBuffer, </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) != HAL_OK)</span><span style=\"color: #6A9955\"> // 一次处理完成之后，重新开启中断并设置RxXferCount为1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        timeout++;</span><span style=\"color: #6A9955\"> // 超时处理</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (timeout &gt; HAL_MAX_DELAY)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">HAL_UART_RxCpltCallback</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">UART_HandleTypeDef</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">huart</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">huart</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">Instance</span><span style=\"color: #D4D4D4\"> == USART1)</span><span style=\"color: #6A9955\"> // 如果是串口1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> ((USART_RX_STA &amp; </span><span style=\"color: #B5CEA8\">0x8000</span><span style=\"color: #D4D4D4\">) == </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\"> // 接收未完成</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (USART_RX_STA &amp; </span><span style=\"color: #B5CEA8\">0x4000</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\"> // 已经接收到了'/r'，但是还没接收到'/n'</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">aRxBuffer</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">] != </span><span style=\"color: #B5CEA8\">0x0a</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\"> // 检查是不是'/n'</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                    USART_RX_STA = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">     // 接收错误,清零</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #C586C0\">else</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                    USART_RX_STA |= </span><span style=\"color: #B5CEA8\">0x8000</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\"> // 接收完成标记</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">else</span><span style=\"color: #6A9955\"> // 还没收到'/r'</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">aRxBuffer</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">] == </span><span style=\"color: #B5CEA8\">0x0d</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">   // 检查是不是'/r'</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                    USART_RX_STA |= </span><span style=\"color: #B5CEA8\">0x4000</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\"> // 标记接收到了'/r'</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #C586C0\">else</span><span style=\"color: #6A9955\">                        // 记录在缓冲区</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                    </span><span style=\"color: #9CDCFE\">USART_RX_BUF</span><span style=\"color: #D4D4D4\">[USART_RX_STA &amp; </span><span style=\"color: #B5CEA8\">0X3FFF</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #9CDCFE\">aRxBuffer</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                    USART_RX_STA++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (USART_RX_STA &gt; (</span><span style=\"color: #B5CEA8\">256</span><span style=\"color: #D4D4D4\"> - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">))</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                        USART_RX_STA = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\"> // 接收数据错误,重新开始接收</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">print</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">str</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *p = str;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (*p != </span><span style=\"color: #CE9178\">'</span><span style=\"color: #D7BA7D\">\\0</span><span style=\"color: #CE9178\">'</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">__HAL_UART_GET_FLAG</span><span style=\"color: #D4D4D4\">(&amp;UART1_Handler, UART_FLAG_TC) != SET)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            ;</span><span style=\"color: #6A9955\"> // 等待发送结束</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_UART_Transmit</span><span style=\"color: #D4D4D4\">(&amp;UART1_Handler, (</span><span style=\"color: #569CD6\">uint8_t</span><span style=\"color: #D4D4D4\"> *)p++, </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">1000</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">printn</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #9CDCFE\">str</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">n</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *p = str;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (*p != </span><span style=\"color: #CE9178\">'</span><span style=\"color: #D7BA7D\">\\0</span><span style=\"color: #CE9178\">'</span><span style=\"color: #D4D4D4\"> &amp;&amp; n--)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">__HAL_UART_GET_FLAG</span><span style=\"color: #D4D4D4\">(&amp;UART1_Handler, UART_FLAG_TC) != SET)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            ;</span><span style=\"color: #6A9955\"> // 等待发送结束</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">HAL_UART_Transmit</span><span style=\"color: #D4D4D4\">(&amp;UART1_Handler, (</span><span style=\"color: #569CD6\">uint8_t</span><span style=\"color: #D4D4D4\"> *)p++, </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">1000</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span></code></pre></div><p>在platformio.ini中添加:</p>\n<div class=\"language-ini\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">ini</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">monitor_speed</span><span style=\"color: #D4D4D4\"> = 115200</span></span></code></pre></div><p>使得其和上面的设置的波特率一致。</p>\n","feature":true,"text":"通信基本概念串行/并行通信串行通信：数据逐位传输，一个单位时间只能发送一个bit。并行通信：数据同时通过多条线路传输，一次可以发送多个bit 单工/半双工/全双...","permalink":"/post/STM32入门（六）：串口通信","photos":[],"count_time":{"symbolsCount":"8.7k","symbolsTime":"8 mins."},"categories":[{"name":"嵌入式","slug":"嵌入式","count":8,"path":"api/categories/嵌入式.json"}],"tags":[{"name":"STM32","slug":"STM32","count":8,"path":"api/tags/STM32.json"},{"name":"单片机","slug":"单片机","count":8,"path":"api/tags/单片机.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%9A%E4%BF%A1%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">通信基本概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%B2%E8%A1%8C-%E5%B9%B6%E8%A1%8C%E9%80%9A%E4%BF%A1\"><span class=\"toc-text\">串行&#x2F;并行通信</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%95%E5%B7%A5-%E5%8D%8A%E5%8F%8C%E5%B7%A5-%E5%85%A8%E5%8F%8C%E5%B7%A5%E9%80%9A%E4%BF%A1\"><span class=\"toc-text\">单工&#x2F;半双工&#x2F;全双工通信</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%8C%E6%AD%A5-%E5%BC%82%E6%AD%A5%E9%80%9A%E4%BF%A1\"><span class=\"toc-text\">同步&#x2F;异步通信</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A2%E7%89%B9%E7%8E%87-%E6%AF%94%E7%89%B9%E7%8E%87\"><span class=\"toc-text\">波特率&#x2F;比特率</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">常见的串口通信协议</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%B2%E5%8F%A3\"><span class=\"toc-text\">串口</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#RS-232-USB\"><span class=\"toc-text\">RS-232(USB)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%92%8CUSART%E7%9A%84%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">和USART的关系</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#USART\"><span class=\"toc-text\">USART</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#USART%E5%AF%84%E5%AD%98%E5%99%A8%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">USART寄存器介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E7%BD%AEUSART%E6%B3%A2%E7%89%B9%E7%8E%87\"><span class=\"toc-text\">设置USART波特率</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#HAL%E5%BA%93%E5%9B%9E%E8%B0%83%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">HAL库回调机制</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#IO%E5%BC%95%E8%84%9A%E5%A4%8D%E7%94%A8%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">IO引脚复用功能</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#USART-UART%E5%BC%82%E6%AD%A5%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">USART&#x2F;UART异步通信配置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#HAL%E5%BA%93%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%A0%81%EF%BC%9A%E6%8E%A5%E6%94%B6%E4%BB%80%E4%B9%88%E5%8F%91%E9%80%81%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">HAL库程序代码：接收什么发送什么</span></a></li></ol></li></ol></li></ol>","author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/74120250?spm_id_from=333.1007.0.0"},"rss":{"icon":"/svg/rss.svg","link":"atom.xml"},"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"STM32入门（七）：IWDG&WWDG","uid":"66ba1c7d8be31c9521741b1f3e971a8c","slug":"STM32入门（七）：IWDG&WWDG","date":"2023-07-20T10:24:54.000Z","updated":"2023-09-25T16:37:41.401Z","comments":true,"path":"api/articles/STM32入门（七）：IWDG&WWDG.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/STM32cover.png","text":"单片机在运行过程中，由于受到外界干扰或者程序出现错误，导致程序陷入死循环，这时候就需要复位单片机，使其重新运行。单片机复位的方式有多种，比如手动复位、软件复位、...","permalink":"/post/STM32入门（七）：IWDG&WWDG","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"嵌入式","slug":"嵌入式","count":8,"path":"api/categories/嵌入式.json"}],"tags":[{"name":"STM32","slug":"STM32","count":8,"path":"api/tags/STM32.json"},{"name":"单片机","slug":"单片机","count":8,"path":"api/tags/单片机.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/74120250?spm_id_from=333.1007.0.0"},"rss":{"icon":"/svg/rss.svg","link":"atom.xml"},"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true},"next_post":{"title":"STM32入门（五）：中断","uid":"216a2da9fe9c97a8ed131bdb8a83b703","slug":"STM32入门（五）：中断","date":"2023-07-15T04:16:04.000Z","updated":"2023-09-25T16:37:41.581Z","comments":true,"path":"api/articles/STM32入门（五）：中断.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/STM32cover.png","text":"中断概念中断是指计算机在正常处理程序的过程中，当发现某种异常事件或某种外部请求时，处理器会暂停执行当前程序转而执行异常事件处理或外部事件处理。在计算机科学中，中...","permalink":"/post/STM32入门（五）：中断","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"嵌入式","slug":"嵌入式","count":8,"path":"api/categories/嵌入式.json"}],"tags":[{"name":"STM32","slug":"STM32","count":8,"path":"api/tags/STM32.json"},{"name":"单片机","slug":"单片机","count":8,"path":"api/tags/单片机.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/74120250?spm_id_from=333.1007.0.0"},"rss":{"icon":"/svg/rss.svg","link":"atom.xml"},"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true}}