{"title":"Java学习笔记(三)","uid":"0c89500007ef3b784b27319aeed34361","slug":"Java学习笔记-三","date":"2022-05-12T12:04:00.000Z","updated":"2023-10-01T19:57:24.428Z","comments":true,"path":"api/articles/Java学习笔记-三.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/java3.jpeg","content":"<h3 id=\"Maven构建工具\"><a href=\"#Maven构建工具\" class=\"headerlink\" title=\"Maven构建工具\"></a>Maven构建工具</h3><p>构建工具功能:</p>\n<ul>\n<li>自动帮程序员甄别和下载第三方库(jar)</li>\n<li>完成整个项目编译(调用javac.exe)</li>\n<li>完成整个项目单元测试流程(调用Junit工具)</li>\n<li>完成项目打包(jar/war等格式，调用jar.exe)</li>\n<li>Maven是通过pom.xml文件来进行项目管理的。</li>\n<li>第三方库的使用方法：在<a href=\"https://mvnrepository.com/\">中心库</a>里面搜索自己想要的库，然后将<em>依赖文本</em>拷贝到pom.xml中的dependencies标签内部，即完成引入。</li>\n</ul>\n<p>Maven工具是单独下载的并且需要为其配置环境变量。<br>必须保证系统变量中有JAVA_HOME变量且指向正确的地址。<br>安装路径下的/conf/settings.xml文件是该应用的设置，内部有详细的注释帮助用户来个性化maven。<br>安装完成后在cmd里面输入<code>mvn help:system</code>进行初始化，会下载大量文件。<br>某个jar包一旦被Maven下载过，即可永久地安全缓存在本地</p>\n<p>我由始至终都坚持使用Visual Studio Code进行开发。这里推荐几个别人的视频，对我的帮助很大，本人已经三连。<br><a href=\"https://www.bilibili.com/video/BV1WP4y1G7Pu\">VSCode及JDK配置</a><br><a href=\"https://www.bilibili.com/video/BV123411s7ib\">Maven安装和配置</a><br><a href=\"https://www.bilibili.com/video/BV123411s7ib\">VSCode创建Maven项目</a></p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>maven管理的依赖是传递的。即在引入依赖时，会递归的引入所需的所有依赖。</p>\n</p>\n</div>\n<h4 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h4><p>maven的项目目录结构如下所示：</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">maven-project</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">├── pom.xml</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">├── src</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">│   ├── main</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">│   │   ├── java</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">│   │   └── resources</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">│   └── test</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">│       ├── java</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">│       └── resources</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">└── target</span></span></code></pre></div><p>根目录下有一个pom.xml文件，这是maven的核心文件，用于描述整个maven项目。<br>根目录下的src文件夹用于存放程序源代码和资源文件。其中里面的main文件夹用于存放主程序代码，test文件夹用于存放测试程序代码。<br>根目录下的target文件夹用于存放编译后的class文件、jar包、war包等。</p>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p>尽量不要修改maven项目的目录结构！例如更改上述文件夹的名称等。否则可能需要特殊配置才能正常运行。</p>\n\n</div>\n<h4 id=\"pom文件解析\"><a href=\"#pom文件解析\" class=\"headerlink\" title=\"pom文件解析\"></a>pom文件解析</h4><div class=\"language-xml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">xml</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">project</span><span style=\"color: #D4D4D4\"> ... </span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">modelVersion</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">4.0.0</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">modelVersion</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">groupId</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">com.neuq</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">groupId</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">artifactId</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">shmetro2</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">artifactId</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">version</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">1.0-SNAPSHOT</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">version</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">name</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">shmetro2</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">name</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">packaging</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">war</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">packaging</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">parent</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">groupId</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">org.springframework.boot</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">groupId</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">artifactId</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">spring-boot-starter-parent</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">artifactId</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">version</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">2.6.0</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">version</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">relativePath</span><span style=\"color: #808080\">/&gt;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #6A9955\">&lt;!-- lookup parent from repository --&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">parent</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">properties</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">project.build.sourceEncoding</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">UTF-8</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">project.build.sourceEncoding</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">maven.compiler.target</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">1.8</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">maven.compiler.target</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">maven.compiler.source</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">1.8</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">maven.compiler.source</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">junit.version</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">5.9.2</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">junit.version</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">properties</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">dependencies</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">dependency</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">groupId</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">javax</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">groupId</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">artifactId</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">javaee-web-api</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">artifactId</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">version</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">8.0.1</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">version</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">scope</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">provided</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">scope</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">dependency</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">dependencies</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">build</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">plugins</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">plugin</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">groupId</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">org.apache.maven.plugins</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">groupId</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">artifactId</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">maven-war-plugin</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">artifactId</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #808080\">&lt;</span><span style=\"color: #569CD6\">version</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #D4D4D4\">3.3.2</span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">version</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">plugin</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">plugins</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">build</span><span style=\"color: #808080\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #808080\">&lt;/</span><span style=\"color: #569CD6\">project</span><span style=\"color: #808080\">&gt;</span></span></code></pre></div><ul>\n<li>&lt;project&gt;pom.xml文件的根元素<ul>\n<li>&lt;modelVersion&gt;标签用于指示pom.xml的版本，这个值与maven版本有关。<a href=\"https://stackoverflow.com/questions/19759338/why-modelversion-of-pom-xml-is-necessary-and-always-set-to-4-0-0\">但是大多数情况设置为4.0.0即可。</a></li>\n<li>&lt;groupId&gt;可以理解为Java的包名，一般是公司或者组织的名称。</li>\n<li>&lt;artifactId&gt;可以理解为Java的类名，一般是该项目的名称。</li>\n<li>&lt;version&gt;这个是当前的版本号。</li>\n<li>&lt;name&gt;用于设置maven项目的名称。<a href=\"https://stackoverflow.com/questions/60119816/maven-name-tag-under-project\">可以不写</a></li>\n<li>&lt;packaging&gt;指定Maven项目的打包方式。常见的打包方式有<code>jar</code>、<code>war</code>、<code>ear</code>等。不写默认为<code>jar</code>。</li>\n<li>&lt;parent&gt;可以将一个POM文件定义为另一个POM文件的父级。子POM文件可以继承父POM文件中的所有配置信息，如依赖项、插件、属性等。（可不写，不继承）<ul>\n<li>&lt;artifactId&gt;父POM文件的类名</li>\n<li>&lt;version&gt;父POM文件的版本号</li>\n<li>&lt;relativePath&gt;父POM文件的相对路径，如果不写则默认为<code>../pom.xml</code>，即父POM文件在当前目录的上一级目录。</li>\n</ul>\n</li>\n<li>&lt;properties&gt;这个用于设置属性值，<a href=\"https://stackoverflow.com/questions/65696058/what-does-properties-tag-mean-in-pom-xml-maven\">参考这个</a></li>\n<li>&lt;dependencies&gt;为项目定义的依赖项列表，从<a href=\"https://mvnrepository.com/\">中心库</a>复制来的依赖文本拷贝到该元素里面即可完成依赖引入。<ul>\n<li>&lt;dependency&gt;定义了一个依赖项，maven根据里面的信息从中心仓库下载对应的包并包含进项目。<ul>\n<li>&lt;groupId&gt;要引入的Java的包名</li>\n<li>&lt;artifactId&gt;要引入的Java的类名</li>\n<li>&lt;version&gt;要引入的版本</li>\n<li>&lt;type&gt;依赖的类型。常见的类型有<code>jar</code>、<code>war</code>、<code>pom</code>等。不写默认为<code>jar</code>。</li>\n<li>&lt;executions&gt;该依赖项会包含一些子依赖项，这是不希望引入的子依赖项列表。<ul>\n<li>&lt;execution&gt;要排除的子依赖项<ul>\n<li>&lt;groupId&gt;子依赖项的包名</li>\n<li>&lt;artifactId&gt;子依赖项的类名</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>&lt;scope&gt;用于指定该包在maven项目中依赖范围。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>&lt;build&gt;<a href=\"https://maven.apache.org/pom.html#the-basebuild-element-set\">用来定义项目构建的相关信息包括源代码目录，目标构建目录，插件配置等。</a></li>\n</ul>\n</li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">依赖范围</p>\n<p><p>有的依赖需要在不同的时候提供，如servlet-api在package的时候是不应该包含进去的。依赖范围指定了在不同情况下是否包含该依赖，默认不写是compile。</p>\n<table>\n<thead>\n<tr>\n<th>scope值</th>\n<th>主程序</th>\n<th>测试程序</th>\n<th>打包（运行）</th>\n<th>范例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>compile</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n<td>log4j</td>\n</tr>\n<tr>\n<td>test</td>\n<td>❌</td>\n<td>✅</td>\n<td>❌</td>\n<td>junit-jupiter-api</td>\n</tr>\n<tr>\n<td>provided</td>\n<td>✅</td>\n<td>✅</td>\n<td>❌</td>\n<td>javax.servlet-api</td>\n</tr>\n<tr>\n<td>runtime</td>\n<td>❌</td>\n<td>✅</td>\n<td>✅</td>\n<td>mysql-connector-java</td>\n</tr>\n</tbody></table>\n</p>\n</div>\n<h4 id=\"生命周期life-circle\"><a href=\"#生命周期life-circle\" class=\"headerlink\" title=\"生命周期life circle\"></a>生命周期life circle</h4><p>生命周期是指maven在构建项目时候的一系列动作，有三个生命周期，分别是clean、default、site。</p>\n<p>如果要执行某个操作，如compile，那么maven会先执行<em>该操作所在的生命周期（即default）</em>在<em>该操作之前的所有操作</em>。</p>\n<h5 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h5><ol>\n<li>pre-clean:执行清理前的工作</li>\n<li><strong>clean</strong>:清理上一次构建生成的所有文件</li>\n<li>post-clean:执行清理后的工作</li>\n</ol>\n<h5 id=\"default\"><a href=\"#default\" class=\"headerlink\" title=\"default\"></a>default</h5><ol>\n<li>validate:验证项目是否正确，所有需要的信息是否可用</li>\n<li>initialize:初始化构建环境，如设置属性、创建目录等</li>\n<li>generate-sources:生成项目的源代码</li>\n<li>process-sources:处理项目的源代码，如过滤值、替换值等</li>\n<li>generate-resources:生成项目的资源文件，如图片、配置文件等</li>\n<li>process-resources:处理项目的资源文件，如压缩图片、转换配置文件格式等</li>\n<li><strong>compile</strong>:编译项目的源代码</li>\n<li>process-classes:处理编译后的文件，如生成Javadoc、复制额外的文件等</li>\n<li>generate-test-sources:生成测试项目的源代码</li>\n<li>process-test-sources:处理测试项目的源代码，如过滤值、替换值等</li>\n<li>generate-test-resources:生成测试项目的资源文件，如图片、配置文件等</li>\n<li>process-test-resources:处理测试项目的资源文件，如压缩图片、转换配置文件格式等</li>\n<li>test-compile:编译测试项目的源代码</li>\n<li>process-test-classes:处理编译后的文件，如生成Javadoc、复制额外的文件等</li>\n<li><strong>test</strong>:运行测试</li>\n<li>prepare-package:打包前的准备工作</li>\n<li><strong>package</strong>:打包，将编译后的代码打包成可发布的格式，如jar、war等</li>\n<li>verify:对打包后的结果进行检查，以保证质量</li>\n<li>install:将打包后的文件安装到本地仓库，以供其他项目使用</li>\n<li>deploy:将打包后的文件复制到远程仓库，以供其他开发人员和项目使用</li>\n</ol>\n<h5 id=\"site\"><a href=\"#site\" class=\"headerlink\" title=\"site\"></a>site</h5><ol>\n<li>pre-site:执行生成文档前的工作</li>\n<li>site:生成项目的站点文档</li>\n<li>post-site:执行生成文档后的工作，如清理现场等</li>\n<li>site-deploy:将生成的文档部署到远程服务器上</li>\n</ol>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">clean和package不在同一个生命周期。</p>\n<p>这意味着在package的时候，clean并不会被执行！</p>\n<p>如果一个项目中，在打包过一次之后（会生成被打包的文件夹），再删除某个依赖项（这并不会使该项从被打包的文件夹中删除）再进行打包的时候，依然会把该项打包进去，这就会导致打的包有多余的依赖项，严重时可能产生错误。</p>\n<p>因此，如果在打包之前删除了某个依赖项，那么需要先执行clean，再执行package。</p>\n\n</div>\n<h4 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h4><p>对于lifecycle，maven是使用插件来实现的。例如：compile操作对应的真实操作是compiler:compile，即执行<code>mvn compile</code>和<code>mvn compiler:compile</code>是等价的，compile只不过是compiler:compile对应的简称。而compiler:compile是maven-compiler-plugin插件的compile目标。实际上执行命令的是插件哦。</p>\n<p>上述例子中的compile，通常被称为phase，而compiler:compile被称为goal。phase是一组goal的集合，goal是maven中最小的执行单元。</p>\n<p>Maven已经内置了一些常用的标准插件，如果标准插件无法满足需求，我们还可以使用自定义插件。</p>\n<p>常用的插件有（用法自搜）：</p>\n<ol>\n<li>maven-shade-plugin：打包所有依赖包并生成可执行jar；</li>\n<li>cobertura-maven-plugin：生成单元测试覆盖率报告；</li>\n<li>findbugs-maven-plugin：对Java源码进行静态分析以找出潜在问题。</li>\n</ol>\n<h4 id=\"模块管理\"><a href=\"#模块管理\" class=\"headerlink\" title=\"模块管理\"></a><a href=\"https://www.liaoxuefeng.com/wiki/1252599548343744/1309301243117601\">模块管理</a></h4><h3 id=\"单元测试和JUnit\"><a href=\"#单元测试和JUnit\" class=\"headerlink\" title=\"单元测试和JUnit\"></a>单元测试和JUnit</h3><p><strong>测试：</strong></p>\n<ul>\n<li>*白盒测试(white-box testing)*，全面了解程序内部逻辑结构，对所有的逻辑路径都进行测试。一般由程序员完成。  </li>\n<li>*黑盒测试(black-box testing)*，又名功能测试，将程序视为一个不能打开的黑盒子。在完全不考虑程序内部结构和内部特性的情况下，检查程序功能是否按照需求规格说明书的规定正常使用。一般由独立的使用者完成。</li>\n<li><em>单元测试(unit testing)</em> ，是指对软件中的最小可测试单元进行检查和验证。通常是一个函数/方法。<br>单元测试是已知代码结构进行的测试，属于白盒测试。</li>\n<li><em>集成测试</em>是将多个单元相互作用，形成一个整体，对整体协调性进行测试。<br>一般从构成系统的最小单元开始，持续推进到单元之间的接口直到集成为一个完成的软件系统为止。</li>\n<li><em>自动测试</em>︰用程序批量、反复测试程序，并可自动检查程序结果是否满足预定的要求。</li>\n<li><em>手动测试</em>:手动执行程序，手动输入所需要的参数，手动检查程序结果是否满足预定的要求。</li>\n<li><em>回归测试</em>︰修改旧代码后，重新进行测试以确认修改没有引入新的错误或导致其他代码产生错误。回归测试在整个软件测试过程中占有很大的比重。软件快速迭代开发过程中，新版本的连续发布(Daily /Nightly Build)使得回归测试进行的更加频繁。</li>\n</ul>\n<p><strong>测试策略</strong></p>\n<ul>\n<li>基于main函数的策略<ul>\n<li>优点:简单</li>\n<li>缺点:无法自动判断被测对象的行为是否符合预期，main方法需要添加大量的代码，这些代码在发布时候也需要手动删除，分散程序员在开发时的关注点</li>\n</ul>\n</li>\n<li>基于自动化测试框架的策略<ul>\n<li>初始化-&gt;输入测试数据执行被测代码-&gt;获取系统实际结果-&gt;比较结果是否一致-&gt;输出测试结论</li>\n</ul>\n</li>\n</ul>\n<p>使用Maven构建的程序会自带一个test文件，在VSCode中可以很方便的进行测试。</p>\n<h3 id=\"Java语法糖\"><a href=\"#Java语法糖\" class=\"headerlink\" title=\"Java语法糖\"></a>Java语法糖</h3><p>语法糖:Syntactic sugar / Syntax sugar<br>语法糖使得程序员更容易编写程序，更清晰准确表达业务逻辑。不仅仅是语法的转换，也包括一些小的改进。</p>\n<h4 id=\"for和for-each\"><a href=\"#for和for-each\" class=\"headerlink\" title=\"for和for-each\"></a>for和for-each</h4><ul>\n<li>for-each 从JDK5.0开始引入，语法更简洁</li>\n<li>for-each 可以避免越界错误</li>\n<li>for可以删除元素，for-each不可以删除/替换元素</li>\n<li>for-each遍历的时候，是不知道当前元素的具体位置索引</li>\n<li>for-each只能正向遍历，不能反向遍历</li>\n<li>for-each不能同时遍历2个集合</li>\n<li>for和for-each性能接近</li>\n</ul>\n<p>使用方法如下：nums是某个可迭代数据类型的对象，item是其中的每个数据，和C++一样。</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">double</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">item</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">:</span><span style=\"color: #D4D4D4\"> nums){</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">system</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(item);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h4 id=\"枚举类型：\"><a href=\"#枚举类型：\" class=\"headerlink\" title=\"枚举类型：\"></a>枚举类型：</h4><p>枚举变量:变量的取值只在一个有限的集合内，如性别、星期几、颜色等。</p>\n<ul>\n<li>enum关键字声明枚举类，且都是Enum的子类(但不需写extends)</li>\n<li>enum内部有多少个枚举量，就有多少个实例对象</li>\n<li>不能直接new枚举类对象</li>\n<li>除了枚举量，居然还可以添加属性/构造函数/方法?!</li>\n<li>构造函数只能是package-private(default)或者private，内部调用。</li>\n<li>ordinal()返回枚举量所在的索引位置,从0开始</li>\n<li>compareTo()比较两个枚举量的索引位置大小</li>\n<li>toString()返回枚举量的字符串表示</li>\n<li>valueOf()将字符串初始化为枚举对象</li>\n<li>values()返回所有的枚举量</li>\n</ul>\n<p>使用方法如下：个人感觉比和C++ 有很多不同。</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">enum</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Fruit</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    APPLE,ORANGE,BANANA(</span><span style=\"color: #B5CEA8\">8</span><span style=\"color: #D4D4D4\">),PEACH;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">//使用括号定义索引位置，和C++使用\"=\"不同；索引位置的值只能是整数。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">//每个枚举量都有一个索引位置，如果如上定义，则apple值是0，orange值为1，banana为8，peach为9；</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">private</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">price</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">Fruit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">price</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">this</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">price</span><span style=\"color: #D4D4D4\"> = price;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">getPrice</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">this</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">price</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h4 id=\"不定项参数\"><a href=\"#不定项参数\" class=\"headerlink\" title=\"不定项参数\"></a>不定项参数</h4><p>和C++ 不同的是 C++ 要使用函数模板来实现。<br>C++ :</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">template</span><span style=\"color: #D4D4D4\"> &lt;</span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\">... </span><span style=\"color: #4EC9B0\">Tmp</span><span style=\"color: #D4D4D4\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">print</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">Tmp</span><span style=\"color: #D4D4D4\">... </span><span style=\"color: #9CDCFE\">pargs</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p>Java就是这样的：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">print</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\">... </span><span style=\"color: #9CDCFE\">args</span><span style=\"color: #D4D4D4\">){</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">system</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">args</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">length</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">arg</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">:</span><span style=\"color: #D4D4D4\"> args){</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">system</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(arg);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><ul>\n<li>一个方法只能有一个不定项参数，且必须位于参数列表的最后</li>\n<li>重载的优先级规则1:固定参数的方法，比可变参数优先级更高</li>\n<li>重载的优先级规则2:调用语句，同时与两个带可变参数的方法匹配，则报错。</li>\n</ul>\n<h4 id=\"静态导入\"><a href=\"#静态导入\" class=\"headerlink\" title=\"静态导入\"></a>静态导入</h4><p>import static导入一个类的静态方法和静态变量。</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">import</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> java.lang.Math.pow;</span><span style=\"color: #6A9955\">//引入pow函数</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">import</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> java.lang.Math.sqrt;</span><span style=\"color: #6A9955\">//引入sqrt函数</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">import</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> java.lang.System.* ;</span><span style=\"color: #6A9955\">//引入System下的所有静态方法和静态变量。</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">import</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> java.lang.System.out;</span><span style=\"color: #6A9955\">//引入System的静态变量out。</span></span></code></pre></div><p>少使用*通配符，不滥用，最好具体到静态变量或方法。<br>静态方法名具有明确特征，如有重名，需要补充类名。  </p>\n<h4 id=\"自动装箱和拆箱\"><a href=\"#自动装箱和拆箱\" class=\"headerlink\" title=\"自动装箱和拆箱\"></a>自动装箱和拆箱</h4><ul>\n<li>装箱和拆箱是编译器的工作，在class中已经添加转化。虚拟机没有自动装箱和拆箱的语句。</li>\n<li>==:基本类型是内容相同，对象是指针是否相同(内存同一个区域)</li>\n<li>基本类型没有空值，对象有null，可能触发NullPointerException。</li>\n<li>当一个基础数据类型与封装类进行==、+、-、*、/运算时，会将封装类进行拆箱，对基础数据类型进行运算。</li>\n<li>谨慎使用多个非同类的数值类对象进行运算。</li>\n</ul>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #4EC9B0\">Integer</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">obj1</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//自动装箱</span></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">Integer</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">obj2</span><span style=\"color: #D4D4D4\">= </span><span style=\"color: #9CDCFE\">Integer</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">valueOf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a1</span><span style=\"color: #D4D4D4\"> = obj1;</span><span style=\"color: #6A9955\">//自动拆箱</span></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a2</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">obj1</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">intValue</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">ArrayList</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">Integer</span><span style=\"color: #D4D4D4\">&gt; </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">ArrayList</span><span style=\"color: #D4D4D4\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">add</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">//自动装箱</span></span>\n<span class=\"line\"><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">add</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">Integer</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">valueOf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">));</span></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a3</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">get</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">//自动拆箱</span></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a4</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">get</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">).</span><span style=\"color: #DCDCAA\">intValue</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"></span></code></pre></div><h4 id=\"多异常并列\"><a href=\"#多异常并列\" class=\"headerlink\" title=\"多异常并列\"></a>多异常并列</h4><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">try</span><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">//code</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">catch</span><span style=\"color: #D4D4D4\">( </span><span style=\"color: #4EC9B0\">IOException</span><span style=\"color: #D4D4D4\"> | </span><span style=\"color: #4EC9B0\">FileNotFoundException</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">ex</span><span style=\"color: #D4D4D4\">){</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">//code</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h4 id=\"数值类型赋值优化\"><a href=\"#数值类型赋值优化\" class=\"headerlink\" title=\"数值类型赋值优化\"></a>数值类型赋值优化</h4><p><strong>整型用二进制赋值</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">//整型用二进制赋值</span></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">byte</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a1</span><span style=\"color: #D4D4D4\"> = (</span><span style=\"color: #4EC9B0\">byte</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #B5CEA8\">0b00100001</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">short</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a2</span><span style=\"color: #D4D4D4\">= (</span><span style=\"color: #4EC9B0\">short</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #B5CEA8\">0b1010000101000101</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a3</span><span style=\"color: #D4D4D4\">= </span><span style=\"color: #B5CEA8\">0b10100001010001011010000101000101</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a4</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #B5CEA8\">0b101</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a5</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #B5CEA8\">0B101</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//B可以大小写</span></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">long</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a6</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #B5CEA8\">0b1010000101000101101000010110001011010000101000101L</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">final</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\">[] </span><span style=\"color: #9CDCFE\">s1</span><span style=\"color: #D4D4D4\"> = { </span><span style=\"color: #B5CEA8\">0b00110001</span><span style=\"color: #D4D4D4\">，</span><span style=\"color: #B5CEA8\">0b01100010</span><span style=\"color: #D4D4D4\">，</span><span style=\"color: #B5CEA8\">0b11000100</span><span style=\"color: #D4D4D4\">，</span><span style=\"color: #B5CEA8\">0b10000100</span><span style=\"color: #D4D4D4\"> };</span></span></code></pre></div><p><strong>在数值字面量中使用下划线</strong>  </p>\n<p>下划线只能出现数字中间，前后必须都是数字。<br>允许在二/八/十/十六进制的数字中使用。</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">//在数值字面量中使用下划线</span></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a3</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #B5CEA8\">0b0111_1011_0001</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//二进制</span></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a4</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #B5CEA8\">02_014</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//八进制</span></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a5</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #B5CEA8\">123__45</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//可以多个下划线</span></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a6</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #B5CEA8\">0x7_B_1</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//十六进制</span></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">float</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a7</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #B5CEA8\">3.56_78f</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//float</span></span></code></pre></div><h4 id=\"接口方法\"><a href=\"#接口方法\" class=\"headerlink\" title=\"接口方法\"></a>接口方法</h4><p>Java最初的设计中，接口的方法都是没有实现的、公开的。<br>Java 8推出接口的默认方法/静态方法(都带实现的)，为Lambda表达式提供支持。</p>\n<p><strong>默认方法</strong>：<br>以<code>default</code>关键字标注，其他的定义和普通函数一样</p>\n<ul>\n<li>规则1:默认方法不能重写Object中的方法</li>\n<li>规则2:实现类可以继承/重写父接口的默认方法</li>\n<li>规则3:接口可以继承/重写父接口的默认方法</li>\n<li>规则4:当父类和父接口都有(同名同参数)默认方法，子类继承父类的默认方法，这样可以兼容JDK7及以前的代码</li>\n<li>规则5:子类实现了2个接口(均有同名同参数的默认方法)，那么编译失败，必须在子类中重写这个default方法</li>\n</ul>\n<p><strong>静态方法</strong>:<br>该静态方法属于本接口的，不属于子类/子接口。<br>子类(子接口)没有继承该静态方法，只能通过所在的接口名来调用。</p>\n<p><strong>私有方法</strong>：<br>解决多个默认方法/静态方法的内容重复问题。</p>\n<ul>\n<li>私有方法属于本接口，只在本接口内使用，不属于子类/子接口  </li>\n<li>子类(子接口)没有继承该私有方法，也无法调用。  </li>\n<li>静态私有方法可以被静态/默认方法调用，非静态私有方法被默认方法调用。</li>\n</ul>\n<h4 id=\"try-with-resource\"><a href=\"#try-with-resource\" class=\"headerlink\" title=\"try-with-resource\"></a>try-with-resource</h4><ul>\n<li>程序如果打开外部资源，那么在使用后需要正确关闭。</li>\n<li>考虑异常因素，Java提供try-catch-finally进行保证。</li>\n<li>JDK7提供try-with-resource，比try-catch-finally更简便。</li>\n<li>资源对象必须实现AutoCloseable接口，即实现close方法。</li>\n</ul>\n<h4 id=\"局部变量推断\"><a href=\"#局部变量推断\" class=\"headerlink\" title=\"局部变量推断\"></a>局部变量推断</h4><p>Java 10推出var，使得在定义变量的时候不用指定数据类型:</p>\n<ul>\n<li>避免信息冗余</li>\n<li>对齐了变量名</li>\n<li>更容易阅读</li>\n</ul>\n<p>看上去Java变成了弱类型的语言，本质上还是强类型语言。<br>编译器负责推断类型，并写入字节码文件。因此推断后不能更改! ! !<br><em>注意事项：</em></p>\n<ul>\n<li>可以用在局部变量上，非类成员变量</li>\n<li>可以用在for/for-each循环中</li>\n<li>声明时必须初始化！</li>\n<li>不能用在方法(形式)参数和返回类型</li>\n<li>大面积滥用会使代码整体阅读性变差</li>\n<li>var只在编译时起作用，没有在字节码中引入新的内容，也没有专门的JVM指令处理var</li>\n</ul>\n<h4 id=\"switch\"><a href=\"#switch\" class=\"headerlink\" title=\"switch\"></a>switch</h4><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">//多分支合并</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">switch</span><span style=\"color: #D4D4D4\">(month){</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">case</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"Jan\"</span><span style=\"color: #D4D4D4\"> , </span><span style=\"color: #CE9178\">\"Mar\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">\"May\"</span><span style=\"color: #D4D4D4\">,</span><span style=\"color: #CE9178\">\"July\"</span><span style=\"color: #D4D4D4\"> , </span><span style=\"color: #CE9178\">\"Aug\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">\"oct\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">\"Dec\"</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">-&gt;</span><span style=\"color: #D4D4D4\"> result = </span><span style=\"color: #B5CEA8\">31</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">case</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"Apr\"</span><span style=\"color: #D4D4D4\">. </span><span style=\"color: #CE9178\">\".une\"</span><span style=\"color: #D4D4D4\"> , </span><span style=\"color: #CE9178\">\"sep\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">\"Nov\"</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">-&gt;</span><span style=\"color: #D4D4D4\">result = </span><span style=\"color: #B5CEA8\">30</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">case</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">\"Feb\"</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">-&gt;</span><span style=\"color: #D4D4D4\"> result = </span><span style=\"color: #B5CEA8\">28</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">default</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">-&gt;</span><span style=\"color: #D4D4D4\"> result = -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">//switch直接在表达式赋值</span></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">num</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">days</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #C586C0\">switch</span><span style=\"color: #D4D4D4\">.(num){</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">case</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">,</span><span style=\"color: #B5CEA8\">3</span><span style=\"color: #D4D4D4\">,</span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">,</span><span style=\"color: #B5CEA8\">7</span><span style=\"color: #D4D4D4\">,</span><span style=\"color: #B5CEA8\">8</span><span style=\"color: #D4D4D4\">,</span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\">,</span><span style=\"color: #B5CEA8\">12</span><span style=\"color: #569CD6\">-&gt;</span><span style=\"color: #B5CEA8\">31</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">case</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">4</span><span style=\"color: #D4D4D4\">,</span><span style=\"color: #B5CEA8\">6</span><span style=\"color: #D4D4D4\">,</span><span style=\"color: #B5CEA8\">9</span><span style=\"color: #D4D4D4\">,</span><span style=\"color: #B5CEA8\">11</span><span style=\"color: #569CD6\">-&gt;</span><span style=\"color: #B5CEA8\">30</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">default</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">-&gt;</span><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">result</span><span style=\"color: #D4D4D4\">=</span><span style=\"color: #B5CEA8\">28</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\"> result;</span><span style=\"color: #6A9955\">//代码块中break返回结果</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span></code></pre></div><h3 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3><p>Generic Programming，JDK1.5推出的特性编写的代码可以被很多不同类型的对象所重用。<br><del>说的倒是这么高级,这不就是C++的template吗？</del></p>\n<ul>\n<li>泛型类: ArrayList，HashSet，HashMap等</li>\n<li>泛型方法:Collections.binarySearch，Arrays.sort等</li>\n<li>泛型接口: List, Iterator等</li>\n</ul>\n<h4 id=\"泛型类\"><a href=\"#泛型类\" class=\"headerlink\" title=\"泛型类\"></a>泛型类</h4><ul>\n<li>具有泛型变量的类</li>\n<li>在类名后用&lt;T&gt;代表引入类型<ul>\n<li>多个字母表示多个引入类型如&lt;T,U&gt;等</li>\n<li>引入类型可以修饰成员变量/局部变量/参数/返回值</li>\n<li>没有专门的template关键字</li>\n</ul>\n</li>\n</ul>\n<p>类似于这样使用：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Interval</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">T</span><span style=\"color: #D4D4D4\">&gt;{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">private</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">T</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">lower</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">private</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">T</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">upper</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Interval</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">lower</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">upper</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">this</span><span style=\"color: #D4D4D4\">. </span><span style=\"color: #9CDCFE\">lower</span><span style=\"color: #D4D4D4\"> = lower;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">this</span><span style=\"color: #D4D4D4\">. </span><span style=\"color: #9CDCFE\">upper</span><span style=\"color: #D4D4D4\"> = upper;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">T</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">getLower</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> lower;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">//部分get/set方法省略</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\">[] </span><span style=\"color: #9CDCFE\">args</span><span style=\"color: #D4D4D4\">){</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">Interval</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">Integer</span><span style=\"color: #D4D4D4\">&gt; </span><span style=\"color: #9CDCFE\">v1</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Interval</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">Integer</span><span style=\"color: #D4D4D4\">&gt;(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">,</span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">lower</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">v1</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">getLower</span><span style=\"color: #D4D4D4\">() ;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">upper</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">v1</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">getUpper</span><span style=\"color: #D4D4D4\">() ;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">system</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(lower + </span><span style=\"color: #CE9178\">\",\"</span><span style=\"color: #D4D4D4\"> + upper);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">Interval</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">Integer</span><span style=\"color: #D4D4D4\">&gt; </span><span style=\"color: #9CDCFE\">v2</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Interval</span><span style=\"color: #D4D4D4\">&lt;&gt;(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">,</span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #4EC9B0\">Interval</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">Integer</span><span style=\"color: #D4D4D4\">&gt; </span><span style=\"color: #9CDCFE\">v3</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">getReverse</span><span style=\"color: #D4D4D4\">(v2);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">system</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">out</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">println</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">v3</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">getLower</span><span style=\"color: #D4D4D4\">() +</span><span style=\"color: #CE9178\">\",\"</span><span style=\"color: #D4D4D4\"> + </span><span style=\"color: #9CDCFE\">v3</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">getUpper</span><span style=\"color: #D4D4D4\">());</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> &lt;</span><span style=\"color: #4EC9B0\">Interval</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">T</span><span style=\"color: #D4D4D4\">&gt;</span><span style=\"color: #4EC9B0\">getReverse</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">Interval</span><span style=\"color: #D4D4D4\">&lt;T&gt; interval) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Interval</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #4EC9B0\">T</span><span style=\"color: #D4D4D4\">&gt;(</span><span style=\"color: #9CDCFE\">interval</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">getUpper</span><span style=\"color: #D4D4D4\">(),</span><span style=\"color: #9CDCFE\">interval</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">getLower</span><span style=\"color: #D4D4D4\">());</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h4 id=\"泛型方法：\"><a href=\"#泛型方法：\" class=\"headerlink\" title=\"泛型方法：\"></a>泛型方法：</h4><ul>\n<li>具有泛型参数的方法</li>\n<li>该方法可在普通类/泛型类中</li>\n<li>&lt;T&gt;在修饰符后,返回类型前</li>\n</ul>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Arrayutil</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">public</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">static</span><span style=\"color: #D4D4D4\"> &lt;</span><span style=\"color: #4EC9B0\">T</span><span style=\"color: #D4D4D4\">&gt; </span><span style=\"color: #4EC9B0\">T</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">getMiddle</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">T</span><span style=\"color: #D4D4D4\">... </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">){</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> a[</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">length</span><span style=\"color: #D4D4D4\">/</span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h4 id=\"泛型接口\"><a href=\"#泛型接口\" class=\"headerlink\" title=\"泛型接口\"></a>泛型接口</h4><ul>\n<li>和泛型类相似，在类名后加&lt;T&gt;</li>\n<li>T用来指定方法返回值和参数,T可以是一个普通类也可以是一个泛型类</li>\n<li>实现接口时，指定类型</li>\n</ul>\n<h4 id=\"泛型限定\"><a href=\"#泛型限定\" class=\"headerlink\" title=\"泛型限定\"></a>泛型限定</h4><ul>\n<li>&lt;T extends Comparable&gt;约定T必须是Comparable的子类</li>\n<li>extends固定，后面可以多个，以&amp;拼接，如&lt;T extendsComparable &amp; Serializable&gt;</li>\n<li>extends限定可以有多个接口，但只能一个类，且类必须排第一位</li>\n<li>逗号隔参数，&lt;T extends File &amp; Cloneable, U extends Serializable&gt;</li>\n</ul>\n<p><strong>上线界定符</strong>：<br>&lt;? extends S&gt;，意思是能接收的参数类型是S自身或子类。<br>只能get不能set，编译器只能保证出来的类型，但不保证放入的对象是什么类型。  </p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #4EC9B0\">Pair</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #C586C0\">?</span><span style=\"color: #D4D4D4\"> extends Fruit&gt;</span><span style=\"color: #6A9955\">//代表Pair&lt;Fruit&gt;, Pair&lt;Apple&gt;, Pair&lt;Orange&gt;等</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">?</span><span style=\"color: #D4D4D4\"> extends </span><span style=\"color: #4EC9B0\">Fruit</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">getFirst</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">//肯定可以转型到Fruit</span></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">setFirst</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #C586C0\">?</span><span style=\"color: #D4D4D4\"> extends Fruit)</span><span style=\"color: #6A9955\">//未知具体的类型，错误</span></span></code></pre></div><p><strong>下界鉴定符</strong>：<br>&lt;? super S&gt;，意思是能接收的参数类型S的自身或超类。<br>只能set不能get，编译器保证放入的是S本身或超类，但不保证出来是什么具体类型。</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #4EC9B0\">Pair</span><span style=\"color: #D4D4D4\">&lt;</span><span style=\"color: #C586C0\">?</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">super</span><span style=\"color: #D4D4D4\"> Apple&gt;</span><span style=\"color: #6A9955\">//代表Pair&lt;Object&gt;, Pair&lt;Fruit&gt;, Pair&lt;Apple&gt;等</span></span>\n<span class=\"line\"><span style=\"color: #4EC9B0\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">setFirst</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #C586C0\">?</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">super</span><span style=\"color: #D4D4D4\"> Apple)</span><span style=\"color: #6A9955\">//可以放入Apple及子类对象</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">?</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">super</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Apple</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">getFirst</span><span style=\"color: #D4D4D4\">()</span><span style=\"color: #6A9955\">//无法得知出来的对象类型，只能是Object</span></span></code></pre></div><p><strong>无限定类型的泛型</strong>：<br>&lt;?&gt;，摆烂了属于是，set和get都不能用。</p>\n<h4 id=\"泛型PECS原则\"><a href=\"#泛型PECS原则\" class=\"headerlink\" title=\"泛型PECS原则\"></a>泛型PECS原则</h4><p>Producer Extends, Consumer Super</p>\n<ul>\n<li>要从泛型类读取类型T的数据，并且不能写入，可以使用 ? extends 通配符;(Producer Extends，泛型类是生产者，往外输出东西)</li>\n<li>如果要向泛型类写入类型T的数据，并且不需要读取，可以使用 ? super 通配符;(Consumer Super，泛型类是消费者，往内增加东西)</li>\n<li>如果既想写入又想读出，那就不用通配符</li>\n</ul>\n<h4 id=\"Java类型的变化\"><a href=\"#Java类型的变化\" class=\"headerlink\" title=\"Java类型的变化\"></a>Java类型的变化</h4><p><strong>定义</strong>：<br>A、B是类型，f(·)表示类型转换，≤表示继承关系，如A≤B,表示A继承于B  </p>\n<ul>\n<li>f(·)是协变(covariant)的，如果A≤B，有f(A)≤f(B)</li>\n<li>f(·)是逆变(contravariant)的，如果A≤B，有f(B)≤f(A)</li>\n<li>f(·)是不变(invariant)的，当上述两种都不成立，即f(A)和f(B)没有关系</li>\n<li>f(·)是双变(bivariant)的，如果A≤B，有f(B)≤f(A)和f(A)≤f(B)同时成立</li>\n</ul>\n<p><strong>类型变化相关</strong>：</p>\n<ul>\n<li>数组是协变的(covariant)</li>\n<li>原始的泛型是不变的(invariant)-</li>\n<li>&lt;?extends A&gt;支持协变(covariant)</li>\n<li>&lt;?super B&gt;支持逆变(contravariant)</li>\n<li>JDK1.4重写的方法参数和返回值要求一样,JDK1.5＋重写的方法，参数要求一样的，返回值是协变的</li>\n</ul>\n","feature":true,"text":"Maven构建工具构建工具功能: 自动帮程序员甄别和下载第三方库(jar) 完成整个项目编译(调用javac.exe) 完成整个项目单元测试流程(调用Junit...","permalink":"/post/Java学习笔记-三","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"Java","slug":"Java","count":6,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":6,"path":"api/tags/Java.json"},{"name":"Maven","slug":"Maven","count":1,"path":"api/tags/Maven.json"},{"name":"语法糖","slug":"语法糖","count":1,"path":"api/tags/语法糖.json"},{"name":"泛型","slug":"泛型","count":1,"path":"api/tags/泛型.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Maven%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">Maven构建工具</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">项目结构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#pom%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">pom文件解析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9Flife-circle\"><span class=\"toc-text\">生命周期life circle</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#clean\"><span class=\"toc-text\">clean</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#default\"><span class=\"toc-text\">default</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#site\"><span class=\"toc-text\">site</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">插件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">模块管理</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%92%8CJUnit\"><span class=\"toc-text\">单元测试和JUnit</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java%E8%AF%AD%E6%B3%95%E7%B3%96\"><span class=\"toc-text\">Java语法糖</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#for%E5%92%8Cfor-each\"><span class=\"toc-text\">for和for-each</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B%EF%BC%9A\"><span class=\"toc-text\">枚举类型：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E5%AE%9A%E9%A1%B9%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">不定项参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E5%AF%BC%E5%85%A5\"><span class=\"toc-text\">静态导入</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E5%92%8C%E6%8B%86%E7%AE%B1\"><span class=\"toc-text\">自动装箱和拆箱</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E5%BC%82%E5%B8%B8%E5%B9%B6%E5%88%97\"><span class=\"toc-text\">多异常并列</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B%E8%B5%8B%E5%80%BC%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">数值类型赋值优化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">接口方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#try-with-resource\"><span class=\"toc-text\">try-with-resource</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E6%8E%A8%E6%96%AD\"><span class=\"toc-text\">局部变量推断</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#switch\"><span class=\"toc-text\">switch</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8B\"><span class=\"toc-text\">泛型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8B%E7%B1%BB\"><span class=\"toc-text\">泛型类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8B%E6%96%B9%E6%B3%95%EF%BC%9A\"><span class=\"toc-text\">泛型方法：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8B%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">泛型接口</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8B%E9%99%90%E5%AE%9A\"><span class=\"toc-text\">泛型限定</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8BPECS%E5%8E%9F%E5%88%99\"><span class=\"toc-text\">泛型PECS原则</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Java%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%98%E5%8C%96\"><span class=\"toc-text\">Java类型的变化</span></a></li></ol></li></ol>","author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"计算机网络(三)","uid":"0ca60c06fd1d7a39272aeb0b754b415e","slug":"计算机网络-三","date":"2022-05-16T06:14:00.000Z","updated":"2023-03-31T12:38:01.469Z","comments":true,"path":"api/articles/计算机网络-三.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/network3.jpeg","text":"网络层把分组从源端传到目的端，为分组交换网上的不同主机提供通信服务。网络层传输单位是数据报。 功能功能一:路由选择与分组转发最佳路径功能二:异构网络互联功能三:...","permalink":"/post/计算机网络-三","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[{"name":"网络","slug":"网络","count":4,"path":"api/categories/网络.json"}],"tags":[{"name":"网络","slug":"网络","count":4,"path":"api/tags/网络.json"},{"name":"网络层","slug":"网络层","count":1,"path":"api/tags/网络层.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true},"next_post":{"title":"Java学习笔记(二)","uid":"f72442027e50aabe63bc800cc8297c91","slug":"Java学习笔记-二","date":"2022-05-11T15:24:00.000Z","updated":"2023-07-13T18:22:14.593Z","comments":true,"path":"api/articles/Java学习笔记-二.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/java2.jpeg","text":"Java常用类Java类库*包名以Java开始的包是Java核心包(Java Core Package)*： Module Description java.a...","permalink":"/post/Java学习笔记-二","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[{"name":"Java","slug":"Java","count":6,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":6,"path":"api/tags/Java.json"},{"name":"异常","slug":"异常","count":1,"path":"api/tags/异常.json"},{"name":"文件操作","slug":"文件操作","count":2,"path":"api/tags/文件操作.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true}}