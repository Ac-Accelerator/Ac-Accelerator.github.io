{"title":"图的相关算法","uid":"0b8c5b2ddab35fde5457c41855fd8f40","slug":"图的相关算法","date":"2022-03-04T04:29:00.000Z","updated":"2023-09-25T16:37:57.941Z","comments":true,"path":"api/articles/图的相关算法.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/图.webp","content":"<p>打算把图的相关算法都复习记录一遍。以相关题目为主，代码并非最优解。</p>\n<h2 id=\"图的创建和删除边\"><a href=\"#图的创建和删除边\" class=\"headerlink\" title=\"图的创建和删除边\"></a>图的创建和删除边</h2><p>请编写程序对给定的有向图删除若干条边。有向图中包含n个顶点，编号为0至n-1。<br><strong>输入格式:</strong><br>输入第一行为两个正整数n和e，分别表示图的顶点数和边数，其中n不超过20000，e不超过1000。接下来e行表示每条边的信息，每行为3个非负整数a、b、c，其中a和b表示该边的端点编号，c表示权值。各边并非按端点编号顺序排列。随后一行为一个整数k，表示删除的边的条数，接下来k行，每行为2个非负整数a、b，表示待删除的边为a-&gt;b。保证删除的边一定在原图中。  <br><strong>输出格式:</strong><br>输出执行删边操作之后的图。每行表示一个顶点引出的所有边，格式为a:(a,b,w)……，表示有向边a-&gt;b的权值为w，a引出的多条边按编号b的递增序排列。若某顶点没有引出边，则不输出。<br><strong>输入样例:</strong>  </p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">7 7</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0 1 5</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0 3 7</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0 6 6</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">1 2 4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">2 5 1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">3 5 3</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">6 5 4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">2 5</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0 1</span></span></code></pre></div><p><strong>输出样例:</strong>  </p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">0:(0,3,7)(0,6,6)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">1:(1,2,4)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">3:(3,5,3)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">6:(6,5,4)</span></span></code></pre></div><p><strong>代码:</strong>  </p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;iostream&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;map&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Node</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> value;</span><span style=\"color: #6A9955\">//节点下标</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    map&lt;</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">&gt; connection;</span><span style=\"color: #6A9955\"> //first:连接的节点的下标，second：对应边的权值</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, e;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    cin &gt;&gt; n &gt;&gt; e;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    Node </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[n];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; e; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> a, b, c;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[a].</span><span style=\"color: #9CDCFE\">value</span><span style=\"color: #D4D4D4\"> = a;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[a].</span><span style=\"color: #9CDCFE\">connection</span><span style=\"color: #D4D4D4\">[b] = c;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> x;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    cin &gt;&gt; x;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; x; i++)</span><span style=\"color: #6A9955\">//删边</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> a, b;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        cin &gt;&gt; a &gt;&gt; b;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[a].</span><span style=\"color: #9CDCFE\">connection</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">erase</span><span style=\"color: #D4D4D4\">(b);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; n; i++)</span><span style=\"color: #6A9955\">//按格式输出</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!</span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">connection</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">empty</span><span style=\"color: #D4D4D4\">())</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            cout &lt;&lt; i &lt;&lt; </span><span style=\"color: #CE9178\">':'</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">auto</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">connection</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">begin</span><span style=\"color: #D4D4D4\">(); j != </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">connection</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">end</span><span style=\"color: #D4D4D4\">(); j++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                cout &lt;&lt; </span><span style=\"color: #CE9178\">'('</span><span style=\"color: #D4D4D4\"> &lt;&lt; i &lt;&lt; </span><span style=\"color: #CE9178\">','</span><span style=\"color: #D4D4D4\"> &lt;&lt; </span><span style=\"color: #9CDCFE\">j</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">first</span><span style=\"color: #D4D4D4\"> &lt;&lt; </span><span style=\"color: #CE9178\">','</span><span style=\"color: #D4D4D4\"> &lt;&lt; </span><span style=\"color: #9CDCFE\">j</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">second</span><span style=\"color: #D4D4D4\"> &lt;&lt; </span><span style=\"color: #CE9178\">')'</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            cout &lt;&lt; endl;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h2 id=\"岛屿数量：深度优先遍历\"><a href=\"#岛屿数量：深度优先遍历\" class=\"headerlink\" title=\"岛屿数量：深度优先遍历\"></a>岛屿数量：深度优先遍历</h2><p>给你一个由 1（陆地）和 0（水）组成的n*m的二维网格，请你计算网格中岛屿的数量num。</p>\n<p>岛屿总是被水包围，并且每座岛屿只能由水平方向或竖直方向上相邻的陆地连接形成。例如</p>\n<table>\n<thead>\n<tr>\n<th>例</th>\n<th>例</th>\n<th>例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<p>此为两个岛屿</p>\n<p>此外，你可以假设该网格的四条边均被水包围。1&lt;=n,m&lt;=100<br><strong>输入格式:</strong><br>第一行中给出网格长宽n,m 接下来的n行表示网格情况<br><strong>输出格式:</strong><br>岛屿个数num<br><strong>输入样例:</strong>  </p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">4 5</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">1 1 0 0 0</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">1 1 0 0 0</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0 0 1 0 0</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0 0 0 1 1</span></span></code></pre></div><p><strong>输出样例:</strong>  </p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">3</span></span></code></pre></div><p><strong>代码:</strong>  </p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;algorithm&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;iostream&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">node</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> num = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//该点的值</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> done = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//是否被搜索过</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">node </span><span style=\"color: #9CDCFE\">nodes</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">2002</span><span style=\"color: #D4D4D4\">][</span><span style=\"color: #B5CEA8\">2002</span><span style=\"color: #D4D4D4\">];</span><span style=\"color: #6A9955\">//图</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">//选定算法：深度优先遍历</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> sum=</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> m, n;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    cin &gt;&gt; m &gt;&gt; n;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= m;i++)</span><span style=\"color: #6A9955\">//建图</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; j &lt;=n;j++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            cin &gt;&gt; </span><span style=\"color: #9CDCFE\">nodes</span><span style=\"color: #D4D4D4\">[i][j].</span><span style=\"color: #9CDCFE\">num</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= m;i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; j &lt;=n;j++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\">((!</span><span style=\"color: #9CDCFE\">nodes</span><span style=\"color: #D4D4D4\">[i][j].</span><span style=\"color: #9CDCFE\">done</span><span style=\"color: #D4D4D4\">)&amp;&amp;</span><span style=\"color: #9CDCFE\">nodes</span><span style=\"color: #D4D4D4\">[i][j].</span><span style=\"color: #9CDCFE\">num</span><span style=\"color: #D4D4D4\">==</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">//遍历每个点，如果是陆地且没有被走过，则深度优先遍历和它相连的陆地</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(i, j);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                sum++;</span><span style=\"color: #6A9955\">//岛屿的数量增加</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    cout &lt;&lt; sum;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">i</span><span style=\"color: #D4D4D4\"> ,</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">j</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">nodes</span><span style=\"color: #D4D4D4\">[i][j].</span><span style=\"color: #9CDCFE\">done</span><span style=\"color: #D4D4D4\">==</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">//被走过，return</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\">;  </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">nodes</span><span style=\"color: #D4D4D4\">[i][j].</span><span style=\"color: #9CDCFE\">done</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//没被走过，进行标记</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">nodes</span><span style=\"color: #D4D4D4\">[i+</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">][j].</span><span style=\"color: #9CDCFE\">num</span><span style=\"color: #D4D4D4\">==</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">   //遍历搜索</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(i + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, j);  </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">nodes</span><span style=\"color: #D4D4D4\">[i-</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">][j].</span><span style=\"color: #9CDCFE\">num</span><span style=\"color: #D4D4D4\">==</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)   </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(i - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, j);   </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">nodes</span><span style=\"color: #D4D4D4\">[i][j+</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">].</span><span style=\"color: #9CDCFE\">num</span><span style=\"color: #D4D4D4\">==</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)   </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(i, j+</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">nodes</span><span style=\"color: #D4D4D4\">[i][j-</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">].</span><span style=\"color: #9CDCFE\">num</span><span style=\"color: #D4D4D4\">==</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(i , j-</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h2 id=\"繁忙的都市：最小生成树\"><a href=\"#繁忙的都市：最小生成树\" class=\"headerlink\" title=\"繁忙的都市：最小生成树\"></a>繁忙的都市：最小生成树</h2><p>城市 C 是一个非常繁忙的大都市，城市中的道路十分的拥挤，于是市长决定对其中的道路进行改造。城市 C 的道路是这样分布的：城市中有 n 个交叉路口，有些交叉路口之间有道路相连，两个交叉路口之间最多有一条道路相连接。这些道路是双向的，且把所有的交叉路口直接或间接的连接起来了。每条道路都有一个分值，分值越小表示这个道路越繁忙，越需要进行改造。但是市政府的资金有限，市长希望进行改造的道路越少越好，于是他提出下面的要求：</p>\n<p>改造的那些道路能够把所有的交叉路口直接或间接的连通起来。</p>\n<p>在满足要求 (1) 的情况下，改造的道路尽量少。</p>\n<p>在满足要求 (1)、(2) 的情况下，改造的那些道路中分值最大的道路分值尽量小。</p>\n<p>任务：作为市规划局的你，应当作出最佳的决策，选择那些道路应当被修建。<br><strong>输入格式:</strong><br>第一行有两个整数 n,m 表示城市有 n 个交叉路口，m 条道路。</p>\n<p>接下来 m 行是对每条道路的描述，u,v,c 表示交叉路口 u 和 v 之间有道路相连，分值为 c 。  1≤n≤300,1≤c≤10000<br><strong>输出格式:</strong><br>两个整数 s,max，表示你选出了几条道路，分值最大的那条道路的分值是多少。<br><strong>输入样例:</strong>  </p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">4 5</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">1 2 3</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">1 4 5</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">2 4 7</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">2 3 6</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">3 4 8</span></span></code></pre></div><p><strong>输出样例:</strong>  </p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">3 6</span></span></code></pre></div><p><strong>代码:</strong>  </p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;algorithm&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;iostream&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Node</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #6A9955\">//路径类</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> a, b, c;</span><span style=\"color: #6A9955\"> //节点1，节点2，权</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">} </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">10000</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">sign</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">10000</span><span style=\"color: #D4D4D4\">];</span><span style=\"color: #6A9955\">//用于归类，下标是路径，数值是路径对应的类的编号</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">find</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">//用于找到路径属于哪一类</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">compare</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">Node</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">Node</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, m, maxx=</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, num=</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    cin &gt;&gt; n &gt;&gt; m;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++)</span><span style=\"color: #6A9955\">//初始化sign数组，每个路基都属于不同类</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">sign</span><span style=\"color: #D4D4D4\">[i] = i;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= m; i++)</span><span style=\"color: #6A9955\">//建图</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        cin &gt;&gt; </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\"> &gt;&gt; </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\"> &gt;&gt; </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">sort</span><span style=\"color: #D4D4D4\">(list + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, list + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> + m, compare);</span><span style=\"color: #6A9955\"> //对路径按权进行排序</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= m; i++)</span><span style=\"color: #6A9955\">           //遍历所有路径</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> u = </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">, v = </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">find</span><span style=\"color: #D4D4D4\">(u) == </span><span style=\"color: #DCDCAA\">find</span><span style=\"color: #D4D4D4\">(v))</span><span style=\"color: #6A9955\"> //左节点和右节点属于一类，则已经被连接，说明此路径不是两个节点的最短路径</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">continue</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        num++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">sign</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #DCDCAA\">find</span><span style=\"color: #D4D4D4\">(u)] = </span><span style=\"color: #DCDCAA\">find</span><span style=\"color: #D4D4D4\">(v);</span><span style=\"color: #6A9955\"> //连接左节点和右节点，即两个节点归属一类</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        maxx = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(maxx, </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\"> //更新最大分值</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    cout &lt;&lt; num &lt;&lt; </span><span style=\"color: #CE9178\">' '</span><span style=\"color: #D4D4D4\"> &lt;&lt; maxx;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">compare</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">Node</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">Node</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\"> &lt; </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">find</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">//难点</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">sign</span><span style=\"color: #D4D4D4\">[x] != x)</span><span style=\"color: #6A9955\">//如果不是初始化时的值</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">sign</span><span style=\"color: #D4D4D4\">[x] = </span><span style=\"color: #DCDCAA\">find</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">sign</span><span style=\"color: #D4D4D4\">[x]);</span><span style=\"color: #6A9955\">//则更新自己的值</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">sign</span><span style=\"color: #D4D4D4\">[x];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h2 id=\"排列论文-拓扑排序\"><a href=\"#排列论文-拓扑排序\" class=\"headerlink\" title=\"排列论文:拓扑排序\"></a>排列论文:拓扑排序</h2><p>给定编号为1至n的n篇论文，以及m个形如d, u (1≤d,u≤n,d<br><br>=u)的引用关系，表示论文论文d中定义的一个名词在论文u中被引用。现在要对这n篇论文重新排列，排列方案须满足如下要求：一篇论文引用的名词必须在排在他前面的论文中被定义过。</p>\n<p>请编写程序粗略计算都有多少种满足要求的方案，如果无满足要求的方案则输出0，如果有唯一方案则输出1，如果有多种方案则输出2。<br><strong>输入格式:</strong><br>输入包含多组数据，每组数据第一行为两个正整数n和m，分别表示论文篇数和引用关系数，均不超过100。接下来m行表示论文引用关系，每行为空格间隔的2个正整数d和u，表示论文论文d中定义的一个名词在论文u中被引用。<br><strong>输出格式:</strong><br>对于每组数据输出一个整数：无满足要求的排列方案则输出0，如果有唯一方案则输出1，如果有多种方案则输出2。<br><strong>输入样例:</strong>  </p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">5 4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">1 5</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">5 2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">3 2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">4 3</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">5 4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">3 1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">4 2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">1 5</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">5 4</span></span></code></pre></div><p><strong>输出样例:</strong>  </p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">1</span></span></code></pre></div><p><strong>代码:</strong>  </p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;cstring&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;deque&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;iostream&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">howMuchBefore</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1000</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">deque&lt;</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">&gt; </span><span style=\"color: #9CDCFE\">dict</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1000</span><span style=\"color: #D4D4D4\">];</span><span style=\"color: #6A9955\">//节点名称对子节点的索引</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">deque&lt;</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">&gt; outcome;</span><span style=\"color: #6A9955\"> //保存结果</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">deque&lt;</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">&gt; list;</span><span style=\"color: #6A9955\">   //队列</span></span>\n<span class=\"line\"><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, m;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (cin &gt;&gt; n &gt;&gt; m)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> sign = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\"> //是否有多种结果</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> num = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">  // 起点的数量</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= m; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> d, u;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            cin &gt;&gt; d &gt;&gt; u;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">dict</span><span style=\"color: #D4D4D4\">[d].</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">(u);</span><span style=\"color: #6A9955\"> //给节点d添加一个子节点u</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">howMuchBefore</span><span style=\"color: #D4D4D4\">[u]++;</span><span style=\"color: #6A9955\">     //在u前面的论文个数增加</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">howMuchBefore</span><span style=\"color: #D4D4D4\">[i] == </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">//拓扑排序，先找出所有起点</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            {              </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">(i);</span><span style=\"color: #6A9955\"> //找到就加入队列</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                num++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (num &gt; </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\"> //起点太多，排序肯定不唯一</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            sign = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (!</span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">empty</span><span style=\"color: #D4D4D4\">())</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> p = </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">front</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">//取队列中最前面的元素为p</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">pop_front</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">//删去队列中最前的元素</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">outcome</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">(p);</span><span style=\"color: #6A9955\">//添加到排序队列中去</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #9CDCFE\">dict</span><span style=\"color: #D4D4D4\">[p].</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">(); i++)</span><span style=\"color: #6A9955\">//遍历p的子节点</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> y = </span><span style=\"color: #9CDCFE\">dict</span><span style=\"color: #D4D4D4\">[p][i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #9CDCFE\">howMuchBefore</span><span style=\"color: #D4D4D4\">[y]--;</span><span style=\"color: #6A9955\">//告诉这些子节点，在你们之前的元素减少一个</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!</span><span style=\"color: #9CDCFE\">howMuchBefore</span><span style=\"color: #D4D4D4\">[y])</span><span style=\"color: #6A9955\">//如果y的前面没有元素了，只能直接将y放入队列</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                    </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">(y);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">outcome</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">() == n)</span><span style=\"color: #6A9955\"> //可以进行拓扑排序</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!sign)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                cout &lt;&lt; </span><span style=\"color: #CE9178\">\"1\"</span><span style=\"color: #D4D4D4\"> &lt;&lt; endl;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">else</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                cout &lt;&lt; </span><span style=\"color: #CE9178\">\"2\"</span><span style=\"color: #D4D4D4\"> &lt;&lt; endl;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">else</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            cout &lt;&lt; </span><span style=\"color: #CE9178\">\"0\"</span><span style=\"color: #D4D4D4\"> &lt;&lt; endl;</span><span style=\"color: #6A9955\">    //不能拓扑排序</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; m; i++)</span><span style=\"color: #6A9955\"> //清空操作</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">dict</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #DCDCAA\">clear</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">outcome</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">clear</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (!</span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">empty</span><span style=\"color: #D4D4D4\">())</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">pop_front</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">memset</span><span style=\"color: #D4D4D4\">(howMuchBefore, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(howMuchBefore));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h2 id=\"双十一-最短路径算法Floyd\"><a href=\"#双十一-最短路径算法Floyd\" class=\"headerlink\" title=\"双十一:最短路径算法Floyd\"></a>双十一:最短路径算法Floyd</h2><p>双十一期间，某著名电商平台“东东”为应对销售高峰，准备在n个城市中再增加一个自营仓库，其要求是该仓库设在n个城市中的某个城市，且距离其他所有城市的最短距离之和最小。请编写程序帮助“东东”找出设立仓库的地点。假定n个城市编号为0至n-1，它们之间至少有一个城市与其他所有城市可及。<br><strong>输入格式:</strong><br>输入包含多组数据。每组数据第一行为两个正整数n和e，均不超过100。n表示城市数。接下来e行表示两个城市间的距离信息，每行为3个非负整数a、b、c，其中a和b表示两个城市编号，c表示城市间的距离。</p>\n<p>提示：可使用EOF判断输入结束。<br><strong>输出格式:</strong><br>输出为一个整数，表示建立仓库的城市编号，如多个城市满足要求，则输出编号最小者。<br><strong>输入样例:</strong>  </p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">6 5</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0 1 1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0 2 1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0 3 1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0 4 1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0 5 1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">4 5</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0 1 1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0 2 5</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">1 2 2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">1 3 4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">2 3 1</span></span></code></pre></div><p><strong>输出样例:</strong>  </p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">0</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">1</span></span></code></pre></div><p><strong>代码:</strong>  </p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;iostream&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;cstring&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">map</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">200</span><span style=\"color: #D4D4D4\">][</span><span style=\"color: #B5CEA8\">200</span><span style=\"color: #D4D4D4\">];</span><span style=\"color: #6A9955\">//邻接矩阵，出发点到目标的距离=map[出发点][目标];距离为0视为无限大</span></span>\n<span class=\"line\"><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> v, e;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (cin &gt;&gt; v &gt;&gt; e)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">memset</span><span style=\"color: #D4D4D4\">(map, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(map));</span><span style=\"color: #6A9955\">//初始化为无限大</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> t = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; t &lt; e; t++)</span><span style=\"color: #6A9955\">//建图</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i, j;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            cin &gt;&gt; i &gt;&gt; j &gt;&gt; </span><span style=\"color: #9CDCFE\">map</span><span style=\"color: #D4D4D4\">[i][j];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">map</span><span style=\"color: #D4D4D4\">[j][i] = </span><span style=\"color: #9CDCFE\">map</span><span style=\"color: #D4D4D4\">[i][j];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; k &lt; v; k++)</span><span style=\"color: #6A9955\">\t\t//Floyd算法找最短路</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; j &lt; v; j++)\t</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; v; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> ((</span><span style=\"color: #9CDCFE\">map</span><span style=\"color: #D4D4D4\">[i][j] &gt; </span><span style=\"color: #9CDCFE\">map</span><span style=\"color: #D4D4D4\">[i][k] + </span><span style=\"color: #9CDCFE\">map</span><span style=\"color: #D4D4D4\">[k][j] || </span><span style=\"color: #9CDCFE\">map</span><span style=\"color: #D4D4D4\">[i][j] == </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) &amp;&amp; </span><span style=\"color: #9CDCFE\">map</span><span style=\"color: #D4D4D4\">[i][k] != </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\"> &amp;&amp; </span><span style=\"color: #9CDCFE\">map</span><span style=\"color: #D4D4D4\">[k][j] != </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                        </span><span style=\"color: #9CDCFE\">map</span><span style=\"color: #D4D4D4\">[i][j] = </span><span style=\"color: #9CDCFE\">map</span><span style=\"color: #D4D4D4\">[i][k] + </span><span style=\"color: #9CDCFE\">map</span><span style=\"color: #D4D4D4\">[k][j];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> sum = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> minsum = </span><span style=\"color: #B5CEA8\">99999</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> minn = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; v; i++)</span><span style=\"color: #6A9955\">//遍历所有起点找到最短的距离之和</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; j &lt; v; j++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                sum += </span><span style=\"color: #9CDCFE\">map</span><span style=\"color: #D4D4D4\">[i][j];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (minsum &gt; sum)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                minsum = sum;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                minn = i;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            sum = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        cout &lt;&lt; minn&lt;&lt;endl;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h2 id=\"最短路径之Dijkstra算法、广度优先搜索\"><a href=\"#最短路径之Dijkstra算法、广度优先搜索\" class=\"headerlink\" title=\"最短路径之Dijkstra算法、广度优先搜索\"></a>最短路径之Dijkstra算法、广度优先搜索</h2><p>本题目要求通过读入无向网的边的信息（省略了各顶点的信息，仅用顶点编号来表示），构造图，并利用Dijkstra算法，求出指定源点到其它各点的最短路径。<br><strong>输入格式:</strong><br>第一行，两个整数，顶点数vN和边数eN。 以后若干行，是相关边的信息，无向图的边是对称的，只输入一半的边（小编号到大编号的，间以空格），最后两行各一个整数，前一个指定源点，后一个指定的查询的终到点。 （注意，示例中34条边，只输入了17条边的信息）<br><strong>输出格式:</strong><br>在一行中输出从源点到指定终点的短路径及代价，注意：所有符号均为西文符号。<br><strong>输入样例:</strong>  </p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">10 34</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0 1 2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0 3 5</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">1 2 5</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">1 3 2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">2 4 8</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">2 5 4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">3 5 4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">3 6 2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">4 7 5</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">4 5 2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">5 6 3</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">5 7 9</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">5 8 7</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">6 8 7</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">7 8 3</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">7 9 4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">8 9 8</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">8</span></span></code></pre></div><p><strong>输出样例:</strong>  </p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">0--&gt;1--&gt;3--&gt;6--&gt;8:13</span></span></code></pre></div><p>这里献上B站UP 从0开始数 的算法视频！</p>\n<iframe src=\"//player.bilibili.com/player.html?aid=586430293&bvid=BV1zz4y1m7Nq&cid=289260026&page=1\" scrolling=\"yes\" border=\"1\" frameborder=\"yes\" framespacing=\"1\" allowfullscreen=\"true\"> </iframe>\n\n<p><strong>代码:</strong>  </p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;iostream&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;map&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;deque&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">class</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">Node</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">public:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> value;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> front;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> length = </span><span style=\"color: #B5CEA8\">99999</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    map&lt;</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">&gt; connect;</span><span style=\"color: #6A9955\"> // first:子节点下标，second:到该子节点的路径权重</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">} </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">20</span><span style=\"color: #D4D4D4\">];</span><span style=\"color: #6A9955\">//采用邻接表</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">sign</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">20</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> v, e;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">dij</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">findpath</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    cin &gt;&gt; v &gt;&gt; e;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; e / </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">; i++)</span><span style=\"color: #6A9955\">//建无向图</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> a, b, c;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[a].</span><span style=\"color: #9CDCFE\">value</span><span style=\"color: #D4D4D4\"> = a;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[b].</span><span style=\"color: #9CDCFE\">value</span><span style=\"color: #D4D4D4\"> = b;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[a].</span><span style=\"color: #9CDCFE\">connect</span><span style=\"color: #D4D4D4\">[b] = c;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[b].</span><span style=\"color: #9CDCFE\">connect</span><span style=\"color: #D4D4D4\">[a] = c;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, m;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    cin &gt;&gt; n &gt;&gt; m;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (n == m)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        cout &lt;&lt; n &lt;&lt; </span><span style=\"color: #CE9178\">\"--&gt;\"</span><span style=\"color: #D4D4D4\"> &lt;&lt; m &lt;&lt; </span><span style=\"color: #CE9178\">':'</span><span style=\"color: #D4D4D4\"> &lt;&lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">else</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">dij</span><span style=\"color: #D4D4D4\">(n);</span><span style=\"color: #6A9955\">//从n开始进行迪杰斯塔拉</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">findpath</span><span style=\"color: #D4D4D4\">(n, m);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        cout &lt;&lt; m &lt;&lt; </span><span style=\"color: #CE9178\">':'</span><span style=\"color: #D4D4D4\"> &lt;&lt; </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[m].</span><span style=\"color: #9CDCFE\">length</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">dij</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> minn = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//保存目前找到的 离s最近 的节点</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> num = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//保存最小的路径长度</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[s].</span><span style=\"color: #9CDCFE\">length</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//对起点长度先标记为0</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">sign</span><span style=\"color: #D4D4D4\">[s] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//不进行比较的标记</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    deque&lt;</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">&gt; que;</span><span style=\"color: #6A9955\">//类似于广搜的队列</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">que</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">(s);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">que</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">() != </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">//类广度优先搜索</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> min = </span><span style=\"color: #B5CEA8\">99999</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">auto</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[*</span><span style=\"color: #9CDCFE\">que</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">begin</span><span style=\"color: #D4D4D4\">()].</span><span style=\"color: #9CDCFE\">connect</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">begin</span><span style=\"color: #D4D4D4\">(); i != </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[*</span><span style=\"color: #9CDCFE\">que</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">begin</span><span style=\"color: #D4D4D4\">()].</span><span style=\"color: #9CDCFE\">connect</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">end</span><span style=\"color: #D4D4D4\">(); i++)</span><span style=\"color: #6A9955\">//对当前 离s最近 的节点进行子节点遍历</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">sign</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">i</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">first</span><span style=\"color: #D4D4D4\">].</span><span style=\"color: #9CDCFE\">value</span><span style=\"color: #D4D4D4\">])</span><span style=\"color: #6A9955\">//如果已经被标记为不进行比较</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #C586C0\">continue</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">i</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">first</span><span style=\"color: #D4D4D4\">].</span><span style=\"color: #9CDCFE\">length</span><span style=\"color: #D4D4D4\"> &gt; </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[*</span><span style=\"color: #9CDCFE\">que</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">begin</span><span style=\"color: #D4D4D4\">()].</span><span style=\"color: #9CDCFE\">length</span><span style=\"color: #D4D4D4\"> + </span><span style=\"color: #9CDCFE\">i</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">second</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">//还可以更小</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">i</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">first</span><span style=\"color: #D4D4D4\">].</span><span style=\"color: #9CDCFE\">length</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[*</span><span style=\"color: #9CDCFE\">que</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">begin</span><span style=\"color: #D4D4D4\">()].</span><span style=\"color: #9CDCFE\">length</span><span style=\"color: #D4D4D4\"> + </span><span style=\"color: #9CDCFE\">i</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">second</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\"> //计算路程</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">i</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">first</span><span style=\"color: #D4D4D4\">].</span><span style=\"color: #9CDCFE\">front</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[*</span><span style=\"color: #9CDCFE\">que</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">begin</span><span style=\"color: #D4D4D4\">()].</span><span style=\"color: #9CDCFE\">value</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">\t\t\t   //记录下标</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; v; i++)</span><span style=\"color: #6A9955\">//找到 离s最近 的节点</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">length</span><span style=\"color: #D4D4D4\"> &lt; min &amp;&amp; </span><span style=\"color: #9CDCFE\">sign</span><span style=\"color: #D4D4D4\">[i] != </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                min = </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">length</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                minn = i;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">sign</span><span style=\"color: #D4D4D4\">[minn] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//标记</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        num++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">que</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">pop_back</span><span style=\"color: #D4D4D4\">();</span><span style=\"color: #6A9955\">//删除队首元素</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (num &lt; v)</span><span style=\"color: #6A9955\">//还没搜完</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">que</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">(minn);</span><span style=\"color: #6A9955\">//加入此节点</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">findpath</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">start</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">target</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">//递归找路</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (target == start)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">findpath</span><span style=\"color: #D4D4D4\">(start, </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[target].</span><span style=\"color: #9CDCFE\">front</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    cout &lt;&lt; </span><span style=\"color: #9CDCFE\">list</span><span style=\"color: #D4D4D4\">[target].</span><span style=\"color: #9CDCFE\">front</span><span style=\"color: #D4D4D4\"> &lt;&lt; </span><span style=\"color: #CE9178\">\"--&gt;\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h2 id=\"最长路\"><a href=\"#最长路\" class=\"headerlink\" title=\"最长路\"></a>最长路</h2><p><strong>题目描述:</strong><br>设 G 为有 n 个顶点的带权有向无环图，G 中各顶点的编号为 1 到 n，请设计算法，计算图 G 中 1,n 间的最长路径。<br><strong>输入格式:</strong><br>输入的第一行有两个整数，分别代表图的点数 n 和边数m。</p>\n<p>第 22 到第 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.644ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 3378.4 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(389,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1489.2,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2489.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2989.4,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container>行，每行 3 个整数 u, v, w（u &lt; v），代表存在一条从 u 到 v 边权为 w 的边。<br><strong>输出格式</strong><br>输出一行一个整数，代表 1 到 n 的最长路。</p>\n<p>若 1 与 n 不连通，请输出 -1。<br><strong>输入</strong>  </p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">2 1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">1 2 1</span></span></code></pre></div><p><strong>输出</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">1</span></span></code></pre></div><p><strong>代码</strong></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;iostream&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;cstdio&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;cmath&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> INF 0x7fffffff   </span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n,m,x,y,z,</span><span style=\"color: #9CDCFE\">map</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1501</span><span style=\"color: #D4D4D4\">][</span><span style=\"color: #B5CEA8\">1501</span><span style=\"color: #D4D4D4\">];</span><span style=\"color: #6A9955\">    //邻接矩阵</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    cin&gt;&gt;n&gt;&gt;m;</span><span style=\"color: #6A9955\">   //输入点数和边数</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i=</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;i&lt;n;i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j=</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;j&lt;n;j++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\">(i==j) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #9CDCFE\">map</span><span style=\"color: #D4D4D4\">[i][j]=</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">    //邻接矩阵赋初值</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">map</span><span style=\"color: #D4D4D4\">[i][j]=INF;    </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i=</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;i&lt;m;i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        x--,y--;</span><span style=\"color: #6A9955\">   //编号从1~n，注意处理数组越界问题</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">map</span><span style=\"color: #D4D4D4\">[x][y]=</span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">map</span><span style=\"color: #D4D4D4\">[x][y],-z);</span><span style=\"color: #6A9955\">   //当两个点有多条路时取最长的那条</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> k=</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;k&lt;n;k++)</span><span style=\"color: #6A9955\">   //Floyd</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i=</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;i&lt;n;i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j=</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;j&lt;n;j++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">map</span><span style=\"color: #D4D4D4\">[i][k]!=INF&amp;&amp;</span><span style=\"color: #9CDCFE\">map</span><span style=\"color: #D4D4D4\">[k][j]!=INF)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                    </span><span style=\"color: #9CDCFE\">map</span><span style=\"color: #D4D4D4\">[i][j]=</span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">map</span><span style=\"color: #D4D4D4\">[i][j],</span><span style=\"color: #9CDCFE\">map</span><span style=\"color: #D4D4D4\">[i][k]+</span><span style=\"color: #9CDCFE\">map</span><span style=\"color: #D4D4D4\">[k][j]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">map</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">][n-</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]==INF) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        cout&lt;&lt;-</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">   //判断两个点是否连通</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        cout&lt;&lt;-</span><span style=\"color: #9CDCFE\">map</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">][n-</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">];</span><span style=\"color: #6A9955\">  //相当于map[0][n-1]*-1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h2 id=\"愿天下有情人都是失散多年的兄妹-深度有限搜索\"><a href=\"#愿天下有情人都是失散多年的兄妹-深度有限搜索\" class=\"headerlink\" title=\"愿天下有情人都是失散多年的兄妹: 深度有限搜索\"></a>愿天下有情人都是失散多年的兄妹: 深度有限搜索</h2><p><strong>题目描述:</strong><br>呵呵。大家都知道五服以内不得通婚，即两个人最近的共同祖先如果在五代以内（即本人、父母、祖父母、曾祖父母、高祖父母）则不可通婚。本题就请你帮助一对有情人判断一下，他们究竟是否可以成婚？<br><strong>输入格式:</strong><br>输入第一行给出一个正整数N（2 ≤ N ≤10<br>4 ），随后N行，每行按以下格式给出一个人的信息：</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">本人ID 性别 父亲ID 母亲ID</span></span></code></pre></div><p>其中ID是5位数字，每人不同；性别M代表男性、F代表女性。如果某人的父亲或母亲已经不可考，则相应的ID位置上标记为-1。<br>接下来给出一个正整数K，随后K行，每行给出一对有情人的ID，其间以空格分隔。<br>注意：题目保证两个人是同辈，每人只有一个性别，并且血缘关系网中没有乱伦或隔辈成婚的情况。</p>\n<p><strong>输出格式</strong><br>对每一对有情人，判断他们的关系是否可以通婚：如果两人是同性，输出Never Mind；如果是异性并且关系出了五服，输出Yes；如果异性关系未出五服，输出No。<br><strong>输入样例:</strong>  </p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">24</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00001 M 01111 -1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00002 F 02222 03333</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00003 M 02222 03333</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00004 F 04444 03333</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00005 M 04444 05555</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00006 F 04444 05555</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00007 F 06666 07777</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00008 M 06666 07777</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00009 M 00001 00002</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00010 M 00003 00006</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00011 F 00005 00007</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00012 F 00008 08888</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00013 F 00009 00011</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00014 M 00010 09999</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00015 M 00010 09999</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00016 M 10000 00012</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00017 F -1 00012</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00018 F 11000 00013</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00019 F 11100 00018</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00020 F 00015 11110</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00021 M 11100 00020</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00022 M 00016 -1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00023 M 10012 00017</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00024 M 00022 10013</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">9</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00021 00024</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00019 00024</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00011 00012</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00022 00018</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00001 00004</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00013 00016</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00017 00015</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00019 00021</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">00010 00011</span></span></code></pre></div><p><strong>输出样例：</strong>  </p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">Never Mind</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">Yes</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">Never Mind</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">No</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">Yes</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">No</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">Yes</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">No</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">No</span></span></code></pre></div><p><strong>代码</strong>  </p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;algorithm&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;iostream&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//要深度遍历两个人，所以要两个缓存区</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">path1</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">100</span><span style=\"color: #D4D4D4\">] = {</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">};</span><span style=\"color: #6A9955\">//深度遍历的缓存，储存遍历数据</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">path2</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">100</span><span style=\"color: #D4D4D4\">] = {</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> depth1 = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, deep1 = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//分别是深度遍历缓存的指针、深度遍历的层数</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> depth2 = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, deep2 = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">dls</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">people</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> sex;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> fid = -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> mid = -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">people </span><span style=\"color: #9CDCFE\">guy</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">100000</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    cin &gt;&gt; n;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; n; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> id;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        cin &gt;&gt; id;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        cin &gt;&gt; </span><span style=\"color: #9CDCFE\">guy</span><span style=\"color: #D4D4D4\">[id].</span><span style=\"color: #9CDCFE\">sex</span><span style=\"color: #D4D4D4\"> &gt;&gt; </span><span style=\"color: #9CDCFE\">guy</span><span style=\"color: #D4D4D4\">[id].</span><span style=\"color: #9CDCFE\">fid</span><span style=\"color: #D4D4D4\"> &gt;&gt; </span><span style=\"color: #9CDCFE\">guy</span><span style=\"color: #D4D4D4\">[id].</span><span style=\"color: #9CDCFE\">mid</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">guy</span><span style=\"color: #D4D4D4\">[id].</span><span style=\"color: #9CDCFE\">fid</span><span style=\"color: #D4D4D4\"> != -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">//这里最好给父母亲标好性别，有的人只存在ID</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">guy</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">guy</span><span style=\"color: #D4D4D4\">[id].</span><span style=\"color: #9CDCFE\">fid</span><span style=\"color: #D4D4D4\">].</span><span style=\"color: #9CDCFE\">sex</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #CE9178\">'M'</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">guy</span><span style=\"color: #D4D4D4\">[id].</span><span style=\"color: #9CDCFE\">mid</span><span style=\"color: #D4D4D4\">!=-</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">guy</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">guy</span><span style=\"color: #D4D4D4\">[id].</span><span style=\"color: #9CDCFE\">mid</span><span style=\"color: #D4D4D4\">].</span><span style=\"color: #9CDCFE\">sex</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #CE9178\">'F'</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    cin &gt;&gt; n;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; n; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        depth1 = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, depth2 = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//归零开始新一轮的工作</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> g1, g2;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        cin &gt;&gt; g1 &gt;&gt; g2;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">guy</span><span style=\"color: #D4D4D4\">[g1].</span><span style=\"color: #9CDCFE\">sex</span><span style=\"color: #D4D4D4\"> == </span><span style=\"color: #9CDCFE\">guy</span><span style=\"color: #D4D4D4\">[g2].</span><span style=\"color: #9CDCFE\">sex</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">//同性恋</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            cout &lt;&lt; </span><span style=\"color: #CE9178\">\"Never Mind\"</span><span style=\"color: #D4D4D4\"> &lt;&lt; endl;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">continue</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">dls</span><span style=\"color: #D4D4D4\">(g1, </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">), </span><span style=\"color: #DCDCAA\">dls</span><span style=\"color: #D4D4D4\">(g2, </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">//对双方分别遍历</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        deep1 = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, deep2 = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//归零以备下次调用</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> done = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">          //优化，用于跳出循环节省时间</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; k &lt; depth1; k++)</span><span style=\"color: #6A9955\">//找是否有共同祖先</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> l = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; l &lt; depth2; l++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">path1</span><span style=\"color: #D4D4D4\">[k] == </span><span style=\"color: #9CDCFE\">path2</span><span style=\"color: #D4D4D4\">[l])</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                    done = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//优化</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                    </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (done == </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">//优化</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (i != n - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">//对输出格式的调整</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (done == </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)       </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                cout &lt;&lt; </span><span style=\"color: #CE9178\">\"No\"</span><span style=\"color: #D4D4D4\"> &lt;&lt; endl;            </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">else</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                cout &lt;&lt; </span><span style=\"color: #CE9178\">\"Yes\"</span><span style=\"color: #D4D4D4\"> &lt;&lt; endl;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">else</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (done == </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)           </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                cout &lt;&lt; </span><span style=\"color: #CE9178\">\"No\"</span><span style=\"color: #D4D4D4\">;            </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">else</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                cout &lt;&lt; </span><span style=\"color: #CE9178\">\"Yes\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">dls</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">j</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (s == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//此人无法考证，返回    </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> ((deep1 == </span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\"> &amp;&amp; j == </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) || (deep2 == </span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\"> &amp;&amp; j == </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">))</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//超过5层，停止搜索，返回</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (j == </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">path1</span><span style=\"color: #D4D4D4\">[depth1++] = s;</span><span style=\"color: #6A9955\">//记录在缓存中</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        deep1++;</span><span style=\"color: #6A9955\">//遍历前，层数增加</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">dls</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">guy</span><span style=\"color: #D4D4D4\">[s].</span><span style=\"color: #9CDCFE\">fid</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">//对父母遍历</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">dls</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">guy</span><span style=\"color: #D4D4D4\">[s].</span><span style=\"color: #9CDCFE\">mid</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        deep1--;</span><span style=\"color: #6A9955\">//关键，层数回退</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">else</span><span style=\"color: #6A9955\">        //同理</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">path2</span><span style=\"color: #D4D4D4\">[depth2++] = s;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        deep2++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">dls</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">guy</span><span style=\"color: #D4D4D4\">[s].</span><span style=\"color: #9CDCFE\">fid</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">dls</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">guy</span><span style=\"color: #D4D4D4\">[s].</span><span style=\"color: #9CDCFE\">mid</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        deep2--;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h2 id=\"生化危机-深度优先搜索\"><a href=\"#生化危机-深度优先搜索\" class=\"headerlink\" title=\"生化危机:深度优先搜索\"></a>生化危机:深度优先搜索</h2><p>人类正在经历一场生化危机，许多城市已经被病毒侵袭，这些城市中的人们为了避免感染病毒，计划开车逃往其他没有被病毒入侵的城市（安全城市）。有些城市之间有公路直达，有些没有。虽然他们知道哪些城市是安全的，但是不知道有没有一条安全路径能够到达安全城市（只有该路径上经过的所有城市都是安全的，该路径才是安全路径）。请你编写一个程序帮助他们判断。<br><strong>输入格式:</strong><br>输入第一行为三个正整数，分别表示所有城市个数m（m&lt;=100）、安全城市个数n（m&lt;=50）、公路个数k（k&lt;=100）。随后一行给出n个安全城市的编号。随后k行，每一行给出两个整数，表示连接一条公路的两个城市编号。最后一行输入两个整数，分别表示当前所在城市s、目标城市d。每行整数之间都用空格分隔。</p>\n<p><strong>输出格式:</strong><br>若目标城市已被病毒入侵（非安全城市），输出”The city i is not safe!”；若目标城市为安全城市且从当前所在城市能够经过一条安全路径到达目标城市，输出”The city can arrive safely！”；若目标城市为安全城市但是从当前所在城市没有一条安全路径到达目标城市，输出”The city can not arrive safely！”，i为目标城市编号。</p>\n<p><strong>输入样例1:</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">5 2 5</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">3 4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0 1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0 2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0 4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">1 2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">2 4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0 4</span></span></code></pre></div><p><strong>输出样例1:</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">The city 4 can arrive safely!</span></span></code></pre></div><p><strong>输入样例2:</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">5 2 5</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">3 4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0 1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0 2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0 4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">1 2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">2 4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0 3</span></span></code></pre></div><p><strong>输出样例2:</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">The city 3 can not arrive safely!</span></span></code></pre></div><p><strong>输入样例3:</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">5 2 5</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">3 4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0 1</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0 2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0 4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">1 2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">2 4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">0 1</span></span></code></pre></div><p><strong>输出样例3:</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">The city 1 is not safe!</span></span></code></pre></div><p><strong>代码</strong></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;iostream&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">city</span><span style=\"color: #6A9955\">//城市类</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> done = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//是否被搜索过</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> safe = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//是否安全</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">conect</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">101</span><span style=\"color: #D4D4D4\">] = {</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">};</span><span style=\"color: #6A9955\">//连接的城市</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> conectnum = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//连接城市的数量</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">city</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[], </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">start</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">end</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> m, n, k;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    cin &gt;&gt; m &gt;&gt; n &gt;&gt; k;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    city </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[m];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; n; i++)</span><span style=\"color: #6A9955\">//建图</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> no;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        cin &gt;&gt; no;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[no].</span><span style=\"color: #9CDCFE\">safe</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; k; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> d, b;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        cin &gt;&gt; d &gt;&gt; b;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[d].</span><span style=\"color: #9CDCFE\">conect</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[d].</span><span style=\"color: #9CDCFE\">conectnum</span><span style=\"color: #D4D4D4\">] = b;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[d].</span><span style=\"color: #9CDCFE\">conectnum</span><span style=\"color: #D4D4D4\">++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[b].</span><span style=\"color: #9CDCFE\">conect</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[b].</span><span style=\"color: #9CDCFE\">conectnum</span><span style=\"color: #D4D4D4\">] = d;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[b].</span><span style=\"color: #9CDCFE\">conectnum</span><span style=\"color: #D4D4D4\">++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> there, that;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    cin &gt;&gt; there &gt;&gt; that;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!(</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[that].</span><span style=\"color: #9CDCFE\">safe</span><span style=\"color: #D4D4D4\">))</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        cout &lt;&lt; </span><span style=\"color: #CE9178\">\"The city \"</span><span style=\"color: #D4D4D4\"> &lt;&lt; that &lt;&lt; </span><span style=\"color: #CE9178\">\" is not safe!\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(a, there, that))</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        cout &lt;&lt; </span><span style=\"color: #CE9178\">\"The city \"</span><span style=\"color: #D4D4D4\"> &lt;&lt; that &lt;&lt; </span><span style=\"color: #CE9178\">\" can arrive safely!\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">else</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        cout &lt;&lt; </span><span style=\"color: #CE9178\">\"The city \"</span><span style=\"color: #D4D4D4\"> &lt;&lt; that &lt;&lt; </span><span style=\"color: #CE9178\">\" can not arrive safely!\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">city</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[], </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">start</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">end</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">//传入保存城市的数组，开始节点，结束节点</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (start == end)</span><span style=\"color: #6A9955\">//找到</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">true</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[start].</span><span style=\"color: #9CDCFE\">done</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">//被搜索过</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">false</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[start].</span><span style=\"color: #9CDCFE\">done</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//标记为被搜索过</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[start].</span><span style=\"color: #9CDCFE\">conectnum</span><span style=\"color: #D4D4D4\">; i++)</span><span style=\"color: #6A9955\">//对相连的城市进行深度优先搜索</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(a, </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[start].</span><span style=\"color: #9CDCFE\">conect</span><span style=\"color: #D4D4D4\">[i], end))</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">true</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">false</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div>","feature":true,"text":"打算把图的相关算法都复习记录一遍。以相关题目为主，代码并非最优解。 图的创建和删除边请编写程序对给定的有向图删除若干条边。有向图中包含n个顶点，编号为0至n-1...","permalink":"/post/图的相关算法","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"竞赛","slug":"竞赛","count":5,"path":"api/categories/竞赛.json"}],"tags":[{"name":"C++","slug":"C","count":13,"path":"api/tags/C.json"},{"name":"算法","slug":"算法","count":5,"path":"api/tags/算法.json"},{"name":"图论","slug":"图论","count":1,"path":"api/tags/图论.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%BE%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%88%A0%E9%99%A4%E8%BE%B9\"><span class=\"toc-text\">图的创建和删除边</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F%EF%BC%9A%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">岛屿数量：深度优先遍历</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B9%81%E5%BF%99%E7%9A%84%E9%83%BD%E5%B8%82%EF%BC%9A%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91\"><span class=\"toc-text\">繁忙的都市：最小生成树</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%88%97%E8%AE%BA%E6%96%87-%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">排列论文:拓扑排序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%8C%E5%8D%81%E4%B8%80-%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95Floyd\"><span class=\"toc-text\">双十一:最短路径算法Floyd</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E4%B9%8BDijkstra%E7%AE%97%E6%B3%95%E3%80%81%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2\"><span class=\"toc-text\">最短路径之Dijkstra算法、广度优先搜索</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%80%E9%95%BF%E8%B7%AF\"><span class=\"toc-text\">最长路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%84%BF%E5%A4%A9%E4%B8%8B%E6%9C%89%E6%83%85%E4%BA%BA%E9%83%BD%E6%98%AF%E5%A4%B1%E6%95%A3%E5%A4%9A%E5%B9%B4%E7%9A%84%E5%85%84%E5%A6%B9-%E6%B7%B1%E5%BA%A6%E6%9C%89%E9%99%90%E6%90%9C%E7%B4%A2\"><span class=\"toc-text\">愿天下有情人都是失散多年的兄妹: 深度有限搜索</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%9F%E5%8C%96%E5%8D%B1%E6%9C%BA-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2\"><span class=\"toc-text\">生化危机:深度优先搜索</span></a></li></ol>","author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Linux系统的常用命令(1)","uid":"c680c055c2c55942f701ddf0f0509a08","slug":"Linux系统的常用命令-1","date":"2022-03-06T02:30:00.000Z","updated":"2023-07-13T18:34:51.542Z","comments":true,"path":"api/articles/Linux系统的常用命令-1.json","keywords":"C++,Pyhton,Java,算法","cover":"img/linux.jpeg","text":"文件管理说到操作系统，那就不得不提文件管理了。文件管理是使用计算机的基础，是最频繁的操作。学会linux下的文件管理是非常重要的。更多说明可以通过指令 txti...","permalink":"/post/Linux系统的常用命令-1","photos":[],"count_time":{"symbolsCount":"7.3k","symbolsTime":"7 mins."},"categories":[{"name":"Linux","slug":"Linux","count":8,"path":"api/categories/Linux.json"}],"tags":[{"name":"文件操作","slug":"文件操作","count":2,"path":"api/tags/文件操作.json"},{"name":"Linux","slug":"Linux","count":8,"path":"api/tags/Linux.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true},"next_post":{"title":"关于Aurora主题代码高亮的问题","uid":"39fc6ddd2165079a9fa7e53c3022af95","slug":"关于Aurora主题代码高亮的问题","date":"2022-03-03T11:28:00.000Z","updated":"2023-03-31T12:18:49.121Z","comments":true,"path":"api/articles/关于Aurora主题代码高亮的问题.json","keywords":"C++,Pyhton,Java,算法","cover":null,"text":"起因这几天兴致勃勃的搞了一个博客，换了几款主题，最后还是选定了极富科技感的Aurora主题。按照官方文档，折腾配置了很久，终于能够使用了。可是最最最最最蛋疼的就...","permalink":"/post/关于Aurora主题代码高亮的问题","photos":[],"count_time":{"symbolsCount":852,"symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":10,"path":"api/categories/前端.json"}],"tags":[{"name":"CSS","slug":"CSS","count":8,"path":"api/tags/CSS.json"},{"name":"前端","slug":"前端","count":1,"path":"api/tags/前端.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true}}