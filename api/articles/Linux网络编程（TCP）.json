{"title":"Linux网络编程（TCP）","uid":"b7ae202389bc9c445e0505a76dbc19f8","slug":"Linux网络编程（TCP）","date":"2024-02-11T12:26:18.000Z","updated":"2024-08-19T04:37:16.435Z","comments":true,"path":"api/articles/Linux网络编程（TCP）.json","keywords":"C++,Pyhton,Java,算法","cover":"img/linux.jpeg","content":"<h1 id=\"数据的大端和小端\"><a href=\"#数据的大端和小端\" class=\"headerlink\" title=\"数据的大端和小端\"></a>数据的大端和小端</h1><p>所谓的字节序，指的是<strong>超过一个字节</strong>的数据在内存中的存储顺序。如果一个数据只占用一个字节，则字节序的问题就不存在了。</p>\n<p>数据的<strong>大端存储</strong>比较贴近我们人类的感官。在我们查看内存里的数据的时候，内存地址低数据的一般被打印在屏幕的左边，内存地址高数据的一般被打印在屏幕的右边。大端存储的数据的高字节存储在低地址，低字节存储在高地址，正好和我们的阅读习惯一致。因此大端存储的数据我们比较好阅读。</p>\n<p>数据的<strong>小端存储</strong>和大端存储相反。小端存储的数据的低字节存储在低地址，高字节存储在高地址。虽然和我们的阅读习惯不一致，但是却符合计算机的处理方式。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意不论是大端还是小端，指向数据的指针都是指向它的低地址。</p></blockquote>\n<p>互联网的初期设计主要是由一群习惯使用大端字节序的计算机科学家完成的。由于这个历史原因，网络协议的设计也用的是大端字节序。这和主机的字节序不一致，在头文件<code>&lt;arpa/inet.h&gt; </code>中定义了一些函数可以进行转换。</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;arpa/inet.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">htonl</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">hostlong</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">uint16_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">htons</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">uint16_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">hostshort</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">ntohl</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">uint32_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">netlong</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">uint16_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">ntohs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">uint16_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">netshort</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>htonl()</code> 函数将无符号整型数 <code>hostlong</code> 从主机字节序转换为网络字节序。</p>\n<p><code>htons()</code> 函数将无符号短整型数 <code>hostshort</code> 从主机字节序转换为网络字节序。</p>\n<p><code>ntohl()</code> 函数将无符号整型数 <code>netlong</code> 从网络字节序转换为主机字节序。</p>\n<p><code>ntohs()</code> 函数将无符号短整型数 <code>netshort</code> 从网络字节序转换为主机字节序。</p>\n<p>这些函数主要用于处理 IP 地址和端口号。其中以<code>l</code>结尾的函数用于处理IP地址，以<code>s</code>结尾的函数用于处理端口号。</p>\n<h1 id=\"字符串和IP地址之间的转换\"><a href=\"#字符串和IP地址之间的转换\" class=\"headerlink\" title=\"字符串和IP地址之间的转换\"></a>字符串和IP地址之间的转换</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;arpa/inet.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">inet_pton</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">af</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">src</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">dst</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p>此函数将字符串 <code>src</code> 转换为 <code>af</code> 地址族中的网络地址结构，然后将该网络地址结构复制到 <code>dst</code>。<code>af</code> 参数必须是 <code>AF_INET</code> 或 <code>AF_INET6</code>。**<code>dst</code> 将以网络字节序写入**。</p>\n<p>成功转换网络地址时返回 1。如果 <code>src</code> 不包含表示指定地址族中有效网络地址的字符串，则返回 0。如果 <code>af</code> 不包含有效的地址族，则返回 -1，并将 <code>errno</code> 设置为 <code>EAFNOSUPPORT</code>。</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;arpa/inet.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #DCDCAA\">inet_ntop</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">af</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">src</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                      </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">dst</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">socklen_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">size</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p>此函数将 <code>af</code> 地址族中的网络地址结构 <code>src</code> 转换为字符串。 生成的字符串将被复制到 <code>dst</code> 指向的缓冲区，该缓冲区必须是非空指针。调用者在参数 <code>size</code> 中指定此缓冲区可用的字节数。</p>\n<p>成功时，函数返回一个指向 <code>dst</code> 的非空指针。如果出现错误，则返回 <code>NULL</code>，并将 <code>errno</code> 设置为指示错误的值。</p>\n<h1 id=\"套接字地址结构\"><a href=\"#套接字地址结构\" class=\"headerlink\" title=\"套接字地址结构\"></a>套接字地址结构</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">sa_family_t</span><span style=\"color: #D4D4D4\"> (sa_);</span><span style=\"color: #6A9955\">\t/* Common data: address family and length. 16bit */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">sa_data</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">14</span><span style=\"color: #D4D4D4\">];</span><span style=\"color: #6A9955\">\t\t/* Address data. 14bit */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">/* Structure describing an Internet socket address.  */</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr_in</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">sa_family_t</span><span style=\"color: #D4D4D4\"> (sin_);</span><span style=\"color: #6A9955\"> /* Common data: address family and length. 16bit */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">in_port_t</span><span style=\"color: #D4D4D4\"> sin_port;</span><span style=\"color: #6A9955\">\t\t\t/* Port number. 16bit */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> in_addr sin_addr;</span><span style=\"color: #6A9955\">\t\t/* Internet address. 32bit */</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  /* Pad to size of `struct sockaddr'.  */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">unsigned</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">sin_zero</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        - </span><span style=\"color: #4EC9B0\">sa_family_t</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        - </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">in_port_t</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        - </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> in_addr)];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span></code></pre></div><p><code>sockaddr</code> 结构体是一个通用的套接字地址结构体,而<code>sockaddr_in</code> 结构体对 <code>sockaddr</code> 结构体的<code>sa_data</code>字段进行了细化，将其分为了<code>sin_port</code>、<code>sin_addr</code>和<code>sin_zero</code>三个字段。分别用于存储端口号、IP地址和填充字节。在socket编程中，这两个结构体是等价的，只不过后者更加方便使用。</p>\n<p>如果是服务器端，IP地址可以设置为<code>INADDR_ANY</code>，表示本机在网络上所有的ip地址。</p>\n<h1 id=\"创建套接字\"><a href=\"#创建套接字\" class=\"headerlink\" title=\"创建套接字\"></a>创建套接字</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">socket</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">domain</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">type</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">protocol</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>socket()</code> 函数创建一个用于通信的端点，<strong>并返回一个指向该端点的文件描述符</strong>。成功调用返回的文件描述符将是该进程当前未打开的最小编号的文件描述符。</p>\n<p><code>domain</code> 参数指定通信域；它选择将用于通信的协议族。这些协议族定义在 <code>&lt;sys/socket.h&gt;</code> 头文件中。常用的协议族有：</p>\n<ul>\n<li><code>AF_INET</code>: 使用ipv4的网络协议</li>\n<li><code>AF_INET6</code>: 使用ipv6的网络协议</li>\n</ul>\n<p>socket 具有指定的<code>type</code>，该<code>type</code>指定了通信语义。常见取值有：</p>\n<ul>\n<li>SOCK_STREAM: 使用流式传输协议</li>\n<li>SOCK_DGRAM: 使用报式传输协议</li>\n</ul>\n<p><code>protocol</code> 参数指定要与此 socket 一起使用的特定协议。通常，在给定的协议族中，只有一种协议支持特定的 socket 类型，在这种情况下，**<code>protocol</code> 参数可以指定为 0**。但是，也可能存在多种协议，在这种情况下，必须以这种方式指定特定的协议。</p>\n<ul>\n<li>流式协议默认使用tcp</li>\n<li>报式协议默认使用udp</li>\n</ul>\n<p>成功时，返回新 socket 的文件描述符。发生错误时，返回 -1，并将 <code>errno</code> 设置为适当的值。</p>\n<h1 id=\"绑定套接字\"><a href=\"#绑定套接字\" class=\"headerlink\" title=\"绑定套接字\"></a>绑定套接字</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">bind</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">sockfd</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *</span><span style=\"color: #9CDCFE\">addr</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #4EC9B0\">socklen_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">addrlen</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p>使用 <code>socket()</code> 函数创建 socket 时，它存在于一个命名空间（地址族）中，但没有分配地址。<code>bind()</code> 函数将 <code>addr</code> 指定的地址分配给文件描述符 <code>sockfd</code> 引用的 socket。<code>addrlen</code> 指定 <code>addr</code> 指向的地址结构的大小（<code>sizeof(struct sockaddr)</code>）。传统上，此操作称为“为 socket 命名”。</p>\n<p>通常，在 <code>SOCK_STREAM</code> 类型的 socket 可以接收连接之前，需要使用 <code>bind()</code> 函数分配一个本地地址（请参阅 accept(2)）。</p>\n<p>成功时，返回 0。发生错误时，返回 -1，并将 <code>errno</code> 设置为适当的值。</p>\n<h1 id=\"监听套接字\"><a href=\"#监听套接字\" class=\"headerlink\" title=\"监听套接字\"></a>监听套接字</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">listen</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">sockfd</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">backlog</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>listen()</code> 函数将 <code>sockfd</code> 引用的 socket 标记为被动 socket，即用作通过 <code>accept()</code> 函数接受传入连接请求的 socket。</p>\n<p><code>sockfd</code> 参数是一个文件描述符，它引用一个类型为 <code>SOCK_STREAM</code> 或 <code>SOCK_SEQPACKET</code> 的 socket。</p>\n<p><code>backlog</code> 参数定义 <code>sockfd</code> 的待处理连接队列可能增长的最大长度。如果在队列已满时到达连接请求，则客户端可能会收到指示 <code>ECONNREFUSED</code> 的错误，或者，如果底层协议支持重传，则请求可能会被忽略，以便稍后再次尝试连接时成功。（这个值超过128就按照128算，因为是写死在内核中的）</p>\n<p>成功时，返回 0。发生错误时，返回 -1，并将 <code>errno</code> 设置为适当的值。</p>\n<h1 id=\"接受连接\"><a href=\"#接受连接\" class=\"headerlink\" title=\"接受连接\"></a>接受连接</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">accept</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">sockfd</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *</span><span style=\"color: #9CDCFE\">addr</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">socklen_t</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">addrlen</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>accept()</code> 系统调用从监听 socket sockfd 的待处理连接队列中提取第一个连接请求，创建一个新的已连接 socket，并返回一个指向该 socket 的新文件描述符。新创建的 socket 不会处于监听状态。原始 socket <code>sockfd</code> 不受此调用的影响。</p>\n<p><strong>参数 <code>sockfd</code> 是一个已使用 <code>socket()</code> 函数创建、使用 <code>bind()</code> 函数绑定到本地地址，并在调用 <code>listen()</code> 函数后处于监听连接状态的 socket。</strong></p>\n<p>参数 <code>addr</code> 是一个指向 <code>sockaddr</code> 结构的指针。此结构填充了通信层已知的对等 socket 的地址。返回地址 <code>addr</code> 的确切格式由 socket 的地址族决定（请参阅 socket(2) 函数和相应的协议手册页）。当 <code>addr</code> 为 <code>NULL</code> 时，不会填充任何内容；在这种情况下，不使用 <code>addrlen</code>，并且它也应该为 <code>NULL</code>。</p>\n<p>参数 <code>addrlen</code> 是一个值结果参数：调用者必须将其初始化为包含 <code>addr</code> 指向的结构的大小（以字节为单位）；返回时，它将包含对等地址的实际大小。</p>\n<p>如果提供的缓冲区太小，则返回的地址将被截断；在这种情况下，<code>addrlen</code> 将返回一个大于调用时提供的值。</p>\n<p>如果队列中没有待处理的连接，并且 socket 标记为阻塞，则 <code>accept()</code> 函数将阻塞调用者，直到有连接出现。如果 socket 被标记为非阻塞，并且队列中没有待处理的连接，则 <code>accept()</code> 函数将失败，并返回错误 <code>EAGAIN</code> 或 <code>EWOULDBLOCK</code>。</p>\n<p>为了接收 socket 上传入连接的通知，可以使用 select()、poll() 或 epoll() 函数。当尝试建立新连接时，将传递一个可读事件，然后可以调用 <code>accept()</code> 函数以获取该连接的 socket。或者，可以将 socket 设置为在 socket 上发生活动时发送 <code>SIGIO</code> 信号；有关详细信息，请参阅 socket(7) 手册页。</p>\n<p>成功时，这些系统调用返回已接受套接字的文件描述符（一个非负整数）。 出错时，返回 -1，并相应地设置 <code>errno</code>，<code>addrlen</code> 保持不变。</p>\n<h1 id=\"连接套接字\"><a href=\"#连接套接字\" class=\"headerlink\" title=\"连接套接字\"></a>连接套接字</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">connect</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">sockfd</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *</span><span style=\"color: #9CDCFE\">addr</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #4EC9B0\">socklen_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">addrlen</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>connect()</code> 系统调用将文件描述符 <code>sockfd</code> 引用的套接字连接到 <code>addr</code> 指定的地址。 <code>addrlen</code> 参数指定 <code>addr</code> 的大小（<code>sizeof(struct sockaddr)</code>）。 <code>addr</code> 中地址的格式由套接字 <code>sockfd</code> 的地址空间决定；</p>\n<p>如果套接字 <code>sockfd</code> 的类型为 <code>SOCK_DGRAM</code>，则 <code>addr</code> 是默认情况下发送数据报的地址，也是接收数据报的唯一地址。 如果套接字类型为 <code>SOCK_STREAM</code> 或 <code>SOCK_SEQPACKET</code>，则此调用会尝试连接到绑定到 <code>addr</code> 指定地址的套接字。</p>\n<p>某些协议套接字（例如，UNIX 域流套接字）可能只能成功调用 <code>connect()</code> 一次。</p>\n<p>某些协议套接字（例如，UNIX 和 Internet 域中的数据报套接字）可以使用 <code>connect()</code> 多次更改其关联。</p>\n<p>某些协议套接字（例如，TCP 套接字以及 UNIX 和 Internet 域中的数据报套接字）可以通过连接到 <code>sockaddr</code> 的 <code>sa_family</code> 成员设置为 <code>AF_UNSPEC</code> 的地址来解除关联； 此后，套接字可以连接到另一个地址。 （自内核 2.2 起，Linux 上支持 <code>AF_UNSPEC</code>。）</p>\n<p>如果连接或绑定成功，则返回 0。 出错时，返回 -1，并相应地设置 <code>errno</code>。</p>\n<h1 id=\"发送和接收数据\"><a href=\"#发送和接收数据\" class=\"headerlink\" title=\"发送和接收数据\"></a>发送和接收数据</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">ssize_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">send</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">sockfd</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">buf</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">len</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">flags</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">ssize_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">write</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">buf</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">len</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">ssize_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">recv</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">sockfd</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">buf</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">len</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">flags</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">ssize_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">sockfd</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">buf</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">size</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p>只有当套接字处于连接状态（以便知道预期的接收者）时，才能使用 <code>send()</code> 调用。 <code>send()</code> 和 <code>write()</code> 之间的唯一区别在于是否存在 <code>flags</code> 参数。 当 <code>flags</code> 参数为零时，<code>send()</code> 等效于 <code>write()</code>。</p>\n<p><code>recv()</code>调用用于从套接字接收消息。它们可用于在无连接和面向连接的套接字上接收数据。<code>recv()</code> 和 <code>read()</code> 之间的唯一区别在于是否存在 <code>flags</code> 参数。 当 <code>flags</code> 参数为零时，<code>recv()</code> 通常等效于 <code>read()</code>。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果存在一个长度为零的数据报，则 <code>flags</code> 参数为零的 <code>read()</code> 和 <code>recv()</code> 将提供不同的行为。 在这种情况下，<code>read()</code> 不会产生任何效果（数据报保持待处理状态），而 <code>recv()</code> 会消耗待处理的数据报。</p></blockquote>\n<p>下面是客户端和服务器端的代码：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">// 服务器端</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdlib.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;string.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;netinet/in.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> PORT </span><span style=\"color: #B5CEA8\">8080</span><span style=\"color: #6A9955\">  // 端口号</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> BUFFER_SIZE </span><span style=\"color: #B5CEA8\">1024</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> server_fd, client_fd;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr_in address;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> addrlen = </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(address);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">buffer</span><span style=\"color: #D4D4D4\">[BUFFER_SIZE] = {</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">};</span><span style=\"color: #6A9955\">// 缓冲区</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 1. 创建 socket (socket())</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> ((server_fd = </span><span style=\"color: #DCDCAA\">socket</span><span style=\"color: #D4D4D4\">(AF_INET, SOCK_STREAM, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">)) == </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"socket failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 2. 绑定地址和端口 (bind())，将文件描述符和地址绑定</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">address</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_family</span><span style=\"color: #D4D4D4\"> = AF_INET;</span><span style=\"color: #6A9955\">//IPv4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">address</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">s_addr</span><span style=\"color: #D4D4D4\"> = INADDR_ANY;</span><span style=\"color: #6A9955\"> // 监听所有网卡</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">address</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_port</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">htons</span><span style=\"color: #D4D4D4\">(PORT);</span><span style=\"color: #6A9955\">// 端口号（大端保存）</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">bind</span><span style=\"color: #D4D4D4\">(server_fd, (</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *)&amp;address, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(address)) &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"bind failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 3. 监听连接请求 (listen())，将这个socket设置为监听状态，最多允许3个连接</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">listen</span><span style=\"color: #D4D4D4\">(server_fd, </span><span style=\"color: #B5CEA8\">3</span><span style=\"color: #D4D4D4\">) &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"listen failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 4. 接受连接请求 (accept())，在接收到连接请求之前会一直阻塞</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> ((client_fd = </span><span style=\"color: #DCDCAA\">accept</span><span style=\"color: #D4D4D4\">(server_fd, (</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *)&amp;address, (</span><span style=\"color: #4EC9B0\">socklen_t</span><span style=\"color: #D4D4D4\">*)&amp;addrlen)) &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"accept failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 5. 接收数据 (recv())，读取的是客户端的socket</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> valread = </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">(client_fd, buffer, BUFFER_SIZE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"服务器接收到消息: </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, buffer);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 6. 发送数据 (send())，发送的是客户端的socket</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> message</span><span style=\"color: #569CD6\">[]</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #CE9178\">\"Hello from server!\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">send</span><span style=\"color: #D4D4D4\">(client_fd, message, </span><span style=\"color: #DCDCAA\">strlen</span><span style=\"color: #D4D4D4\">(message), </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"服务器已发送消息</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 7.  接收更多数据 (recv())，读取的是客户端的socket</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">memset</span><span style=\"color: #D4D4D4\">(buffer, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(buffer));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    valread = </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">(client_fd, buffer, BUFFER_SIZE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"服务器接收到消息: </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, buffer);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 8. 关闭连接 (close())</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(client_fd);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(server_fd);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A9955\">//客户端代码</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdlib.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;string.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;arpa/inet.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> PORT </span><span style=\"color: #B5CEA8\">8080</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> BUFFER_SIZE </span><span style=\"color: #B5CEA8\">1024</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> sock = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr_in serv_addr;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">buffer</span><span style=\"color: #D4D4D4\">[BUFFER_SIZE] = {</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 1. 创建 socket (socket())，指向服务器的socket</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> ((sock = </span><span style=\"color: #DCDCAA\">socket</span><span style=\"color: #D4D4D4\">(AF_INET, SOCK_STREAM, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">)) &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"socket failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 2. 连接服务器 (connect())</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">serv_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_family</span><span style=\"color: #D4D4D4\"> = AF_INET;</span><span style=\"color: #6A9955\">//IPv4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">serv_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_port</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">htons</span><span style=\"color: #D4D4D4\">(PORT);</span><span style=\"color: #6A9955\">// 端口号（大端保存）</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">inet_pton</span><span style=\"color: #D4D4D4\">(AF_INET, </span><span style=\"color: #CE9178\">\"127.0.0.1\"</span><span style=\"color: #D4D4D4\">, &amp;</span><span style=\"color: #9CDCFE\">serv_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_addr</span><span style=\"color: #D4D4D4\">) &lt;= </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"invalid address\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">connect</span><span style=\"color: #D4D4D4\">(sock, (</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *)&amp;serv_addr, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(serv_addr)) &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"connection failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 3. 发送数据 (send()), 发送的是服务器的socket</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> message</span><span style=\"color: #569CD6\">[]</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #CE9178\">\"Hello from client!\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">send</span><span style=\"color: #D4D4D4\">(sock, message, </span><span style=\"color: #DCDCAA\">strlen</span><span style=\"color: #D4D4D4\">(message), </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"客户端已发送消息</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 4. 接收数据 (recv()), 读取的是服务器的socket</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> valread = </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">(sock, buffer, BUFFER_SIZE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"客户端接收到消息: </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, buffer);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 5. 发送更多数据 (send()), 发送的是服务器的socket</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> message2</span><span style=\"color: #569CD6\">[]</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #CE9178\">\"This is another message from client!\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">send</span><span style=\"color: #D4D4D4\">(sock, message2, </span><span style=\"color: #DCDCAA\">strlen</span><span style=\"color: #D4D4D4\">(message2), </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"客户端已发送消息</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 6. 关闭连接 (close())</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(sock);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h1 id=\"如何并发处理多个客户端\"><a href=\"#如何并发处理多个客户端\" class=\"headerlink\" title=\"如何并发处理多个客户端\"></a>如何并发处理多个客户端</h1><p>上面代码中，由于只有一个<code>accept()</code>函数，所以只能处理一个客户端。如果要处理多个客户端，可以使用多线程或者多进程的方式。</p>\n<p>对于多进程来说，父进程用于监听请求，子进程用于处理请求。这里要注意的点有：</p>\n<ol>\n<li>子进程需要关闭父进程的<code>server_fd</code>文件描述符，父进程需要关闭子进程的<code>client_fd</code>文件描述符。</li>\n<li>子进程处理完请求后需要被回收，否则会变成僵尸进程。</li>\n<li>由于父进程既要要负责监听请求，又要负责回收子进程，这两个会导致阻塞的操作不能同时进行，所以需要使用信号处理函数利用<code>SIGCHLD</code>信号来回收子进程。</li>\n<li>在<code>accept()</code>阻塞等待请求的时候，如果有子进程结束，正在阻塞<code>accept()</code>函数可能会被<code>SIGCHLD</code>中断并产生<code>EINTR</code>错误，所以<code>sa_flags</code>要使用<code>SA_RESTART</code>标志自动重启系统调用，使其不返回错误。</li>\n<li><code>sig_chld()</code> 函数使用 <code>waitpid()</code> 非阻塞地回收结束的子进程，避免阻塞主循环。</li>\n</ol>\n<p>多进程服务端代码（不推荐）：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;errno.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;netinet/in.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdlib.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;string.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/types.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/wait.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> PORT </span><span style=\"color: #B5CEA8\">8080</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> BUFFER_SIZE </span><span style=\"color: #B5CEA8\">1024</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">sig_chld</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">signo</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">pid_t</span><span style=\"color: #D4D4D4\"> pid;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> stat;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> ((pid = </span><span style=\"color: #DCDCAA\">waitpid</span><span style=\"color: #D4D4D4\">(-</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, &amp;stat, WNOHANG)) &gt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span><span style=\"color: #6A9955\">//非阻塞回收所有子进程</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"子进程 </span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #CE9178\"> 结束</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, pid);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">handle_client</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">client_fd</span><span style=\"color: #D4D4D4\">) {</span><span style=\"color: #6A9955\">//注意这里如何判断客户端是否关闭连接！！</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">buffer</span><span style=\"color: #D4D4D4\">[BUFFER_SIZE] = {</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> valread;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 接收数据</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    valread = </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">(client_fd, buffer, BUFFER_SIZE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (valread == </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"客户端已关闭连接</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    } </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (valread &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"recv failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"服务器接收到消息: </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, buffer);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 发送数据</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> message</span><span style=\"color: #569CD6\">[]</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #CE9178\">\"Hello from server!\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> sent_bytes = </span><span style=\"color: #DCDCAA\">send</span><span style=\"color: #D4D4D4\">(client_fd, message, </span><span style=\"color: #DCDCAA\">strlen</span><span style=\"color: #D4D4D4\">(message), </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (sent_bytes &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (errno == EPIPE || errno == ECONNRESET) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"客户端已断开连接</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      } </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"send failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(client_fd);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\"> // 子进程退出，产生 SIGCHLD 信号</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 安装 SIGCHLD 信号处理函数</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sigaction sa;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">sa</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sa_handler</span><span style=\"color: #D4D4D4\"> = sig_chld;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">sigemptyset</span><span style=\"color: #D4D4D4\">(&amp;</span><span style=\"color: #9CDCFE\">sa</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sa_mask</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">sa</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sa_flags</span><span style=\"color: #D4D4D4\"> = SA_RESTART;</span><span style=\"color: #6A9955\"> // 使被信号中断的系统调用自动重启</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">sigaction</span><span style=\"color: #D4D4D4\">(SIGCHLD, &amp;sa, </span><span style=\"color: #569CD6\">NULL</span><span style=\"color: #D4D4D4\">) == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"sigaction failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> server_fd, client_fd;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr_in address;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> addrlen = </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(address);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">pid_t</span><span style=\"color: #D4D4D4\"> pid;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 1. 创建 socket</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> ((server_fd = </span><span style=\"color: #DCDCAA\">socket</span><span style=\"color: #D4D4D4\">(AF_INET, SOCK_STREAM, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">)) == </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"socket failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 2. 绑定地址和端口</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">address</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_family</span><span style=\"color: #D4D4D4\"> = AF_INET;</span><span style=\"color: #6A9955\">//IPv4</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">address</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">s_addr</span><span style=\"color: #D4D4D4\"> = INADDR_ANY;</span><span style=\"color: #6A9955\">// 监听所有网卡</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">address</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_port</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">htons</span><span style=\"color: #D4D4D4\">(PORT);</span><span style=\"color: #6A9955\">// 端口号（大端保存）</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">bind</span><span style=\"color: #D4D4D4\">(server_fd, (</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *)&amp;address, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(address)) &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"bind failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 3. 监听连接请求，最多同时允许3个连接</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">listen</span><span style=\"color: #D4D4D4\">(server_fd, </span><span style=\"color: #B5CEA8\">3</span><span style=\"color: #D4D4D4\">) &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"listen failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 4. 接受连接请求</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> ((client_fd = </span><span style=\"color: #DCDCAA\">accept</span><span style=\"color: #D4D4D4\">(server_fd, (</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *)&amp;address,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                            (</span><span style=\"color: #4EC9B0\">socklen_t</span><span style=\"color: #D4D4D4\"> *)&amp;addrlen)) &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"accept failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 5. 创建子进程处理客户端连接</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    pid = </span><span style=\"color: #DCDCAA\">fork</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (pid &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"fork failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    } </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (pid == </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #6A9955\">// 子进程: 处理客户端连接</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(server_fd);</span><span style=\"color: #6A9955\"> // 子进程关闭server_fd</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">handle_client</span><span style=\"color: #D4D4D4\">(client_fd);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    } </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #6A9955\">// 父进程: 关闭client_fd，继续监听</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(client_fd);</span><span style=\"color: #6A9955\">// 父进程关闭client_fd</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>对于多线程的实现方式来说，每个客户端连接都会创建一个新的线程来处理。这样可以避免多进程的开销、子进程的回收等问题。多线程方式要注意的点有：</p>\n<ol>\n<li>线程函数的参数必须是<code>void *</code>类型，所以需要将<code>client_fd</code>和<code>client_addr</code>打包成一个结构体传递给线程函数。</li>\n<li>由于线程之间共享进程的内存空间，所以<code>thread_args</code>要在堆上分配，否则会出现数据错误。</li>\n<li>记得回收堆上分配的内存。</li>\n</ol>\n<p>多线程服务端代码：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;arpa/inet.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;netinet/in.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;pthread.h&gt;</span><span style=\"color: #569CD6\"> </span><span style=\"color: #6A9955\">// 引入线程库</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdlib.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;string.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> PORT </span><span style=\"color: #B5CEA8\">8080</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> BUFFER_SIZE </span><span style=\"color: #B5CEA8\">1024</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">// 定义一个结构体，用于传递客户端信息到线程</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> ThreadArgs {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> client_fd;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr_in client_addr;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">// 线程函数，处理每个客户端的通信</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #DCDCAA\">client_handler</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">arg</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> ThreadArgs *args = (</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> ThreadArgs *)arg;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> client_fd = </span><span style=\"color: #9CDCFE\">args</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">client_fd</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">client_ip</span><span style=\"color: #D4D4D4\">[INET_ADDRSTRLEN];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">inet_ntop</span><span style=\"color: #D4D4D4\">(AF_INET, &amp;(</span><span style=\"color: #9CDCFE\">args</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">client_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_addr</span><span style=\"color: #D4D4D4\">), client_ip, INET_ADDRSTRLEN);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> client_port = </span><span style=\"color: #DCDCAA\">ntohs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">args</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">client_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_port</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">free</span><span style=\"color: #D4D4D4\">(args);</span><span style=\"color: #6A9955\">//注意是args不是arg</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"新客户端连接：IP: </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #CE9178\">, 端口: </span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, client_ip, client_port);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">buffer</span><span style=\"color: #D4D4D4\">[BUFFER_SIZE] = {</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> valread;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 接收数据</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">memset</span><span style=\"color: #D4D4D4\">(buffer, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, BUFFER_SIZE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    valread = </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">(client_fd, buffer, BUFFER_SIZE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (valread &lt;= </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #6A9955\">// 连接关闭或出错</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"客户端断开连接: IP: </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #CE9178\">, 端口: </span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, client_ip, client_port);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(client_fd);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">pthread_exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">NULL</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"从 </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #CE9178\">:</span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #CE9178\"> 收到消息: </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, client_ip, client_port, buffer);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 处理数据并发送响应 (这里可以根据实际需求修改)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> message</span><span style=\"color: #569CD6\">[]</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #CE9178\">\"来自服务器的消息\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">send</span><span style=\"color: #D4D4D4\">(client_fd, message, </span><span style=\"color: #DCDCAA\">strlen</span><span style=\"color: #D4D4D4\">(message), </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">NULL</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> server_fd, client_fd;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr_in address;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> addrlen = </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(address);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 1. 创建 socket</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> ((server_fd = </span><span style=\"color: #DCDCAA\">socket</span><span style=\"color: #D4D4D4\">(AF_INET, SOCK_STREAM, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">)) == </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"socket failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 2. 绑定地址和端口</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">address</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_family</span><span style=\"color: #D4D4D4\"> = AF_INET;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">address</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_addr</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">s_addr</span><span style=\"color: #D4D4D4\"> = INADDR_ANY;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">address</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">sin_port</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">htons</span><span style=\"color: #D4D4D4\">(PORT);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">bind</span><span style=\"color: #D4D4D4\">(server_fd, (</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *)&amp;address, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(address)) &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"bind failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 3. 监听连接请求</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">listen</span><span style=\"color: #D4D4D4\">(server_fd, </span><span style=\"color: #B5CEA8\">3</span><span style=\"color: #D4D4D4\">) &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"listen failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> ThreadArgs *thread_args =</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        (</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> ThreadArgs *)</span><span style=\"color: #DCDCAA\">malloc</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> ThreadArgs));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (thread_args == </span><span style=\"color: #569CD6\">NULL</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"内存分配失败\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">continue</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\"> // 尝试继续处理下一个连接</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 4. 接受连接请求</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">thread_args</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">client_fd</span><span style=\"color: #D4D4D4\"> =</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">accept</span><span style=\"color: #D4D4D4\">(server_fd, (</span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> sockaddr *)&amp;</span><span style=\"color: #9CDCFE\">thread_args</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">client_addr</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">               (</span><span style=\"color: #4EC9B0\">socklen_t</span><span style=\"color: #D4D4D4\"> *)&amp;addrlen);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">thread_args</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">client_fd</span><span style=\"color: #D4D4D4\"> &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"accept failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">free</span><span style=\"color: #D4D4D4\">(thread_args);</span><span style=\"color: #6A9955\"> // 释放内存</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">continue</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">          // 尝试继续处理下一个连接</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 5. 创建新线程处理客户端连接</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">pthread_t</span><span style=\"color: #D4D4D4\"> thread_id;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">pthread_create</span><span style=\"color: #D4D4D4\">(&amp;thread_id, </span><span style=\"color: #569CD6\">NULL</span><span style=\"color: #D4D4D4\">, client_handler, (</span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *)thread_args) !=</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"pthread_create failed\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">thread_args</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">client_fd</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">free</span><span style=\"color: #D4D4D4\">(thread_args);</span><span style=\"color: #6A9955\"> // 释放内存</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">continue</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">          // 尝试继续处理下一个连接</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 父线程继续循环接受新的连接</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div>","feature":true,"text":"数据的大端和小端所谓的字节序，指的是超过一个字节的数据在内存中的存储顺序。如果一个数据只占用一个字节，则字节序的问题就不存在了。 数据的大端存储比较贴近我们人类...","permalink":"/post/Linux网络编程（TCP）","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"Linux","slug":"Linux","count":8,"path":"api/categories/Linux.json"}],"tags":[{"name":"C++","slug":"C","count":13,"path":"api/tags/C.json"},{"name":"Linux","slug":"Linux","count":8,"path":"api/tags/Linux.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A4%A7%E7%AB%AF%E5%92%8C%E5%B0%8F%E7%AB%AF\"><span class=\"toc-text\">数据的大端和小端</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8CIP%E5%9C%B0%E5%9D%80%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">字符串和IP地址之间的转换</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A5%97%E6%8E%A5%E5%AD%97%E5%9C%B0%E5%9D%80%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">套接字地址结构</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%A5%97%E6%8E%A5%E5%AD%97\"><span class=\"toc-text\">创建套接字</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BB%91%E5%AE%9A%E5%A5%97%E6%8E%A5%E5%AD%97\"><span class=\"toc-text\">绑定套接字</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%9B%91%E5%90%AC%E5%A5%97%E6%8E%A5%E5%AD%97\"><span class=\"toc-text\">监听套接字</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%97%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">接受连接</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BF%9E%E6%8E%A5%E5%A5%97%E6%8E%A5%E5%AD%97\"><span class=\"toc-text\">连接套接字</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%91%E9%80%81%E5%92%8C%E6%8E%A5%E6%94%B6%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">发送和接收数据</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%B9%B6%E5%8F%91%E5%A4%84%E7%90%86%E5%A4%9A%E4%B8%AA%E5%AE%A2%E6%88%B7%E7%AB%AF\"><span class=\"toc-text\">如何并发处理多个客户端</span></a></li></ol>","author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Linux网络编程（TCP进阶）","uid":"c49d0f0683cb7b900e98e175f46fbdbf","slug":"Linux网络编程（TCP进阶）","date":"2024-02-13T12:26:18.000Z","updated":"2024-08-19T04:37:21.351Z","comments":true,"path":"api/articles/Linux网络编程（TCP进阶）.json","keywords":"C++,Pyhton,Java,算法","cover":"img/linux.jpeg","text":"shutdown函数c#include &lt;sys/socket.h&gt; int shutdown(int sockfd, int how);shutd...","permalink":"/post/Linux网络编程（TCP进阶）","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":"Linux","slug":"Linux","count":8,"path":"api/categories/Linux.json"}],"tags":[{"name":"C++","slug":"C","count":13,"path":"api/tags/C.json"},{"name":"Linux","slug":"Linux","count":8,"path":"api/tags/Linux.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true},"next_post":{"title":"Linux系统编程（信号与多线程）","uid":"ffc7901ba136221db8bdbec1296c9feb","slug":"Linux系统编程（信号与多线程）","date":"2024-02-05T07:09:36.000Z","updated":"2024-08-19T04:37:36.844Z","comments":true,"path":"api/articles/Linux系统编程（信号与多线程）.json","keywords":"C++,Pyhton,Java,算法","cover":"img/linux.jpeg","text":"信号信号概述在Linux操作系统中，信号（Signal）是一种用于进程间通信的机制，可以用来通知进程某些事件的发生。信号的主要作用是让操作系统或其他进程可以向进...","permalink":"/post/Linux系统编程（信号与多线程）","photos":[],"count_time":{"symbolsCount":"34k","symbolsTime":"31 mins."},"categories":[{"name":"Linux","slug":"Linux","count":8,"path":"api/categories/Linux.json"}],"tags":[{"name":"C++","slug":"C","count":13,"path":"api/tags/C.json"},{"name":"Linux","slug":"Linux","count":8,"path":"api/tags/Linux.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true}}