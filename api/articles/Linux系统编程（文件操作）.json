{"title":"Linux系统编程（文件操作）","uid":"e27fddc9922de42aba7a0e5c52964723","slug":"Linux系统编程（文件操作）","date":"2024-07-03T01:58:46.000Z","updated":"2024-07-04T01:32:07.077Z","comments":true,"path":"api/articles/Linux系统编程（文件操作）.json","keywords":"C++,Pyhton,Java,算法","cover":"img/linux.jpeg","content":"<h1 id=\"getopt函数\"><a href=\"#getopt函数\" class=\"headerlink\" title=\"getopt函数\"></a>getopt函数</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">getopt</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">argc</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> * </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">argv</span><span style=\"color: #569CD6\">[]</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">optstring</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">extern</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *optarg;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">extern</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> optind, opterr, optopt;</span></span></code></pre></div><p><code>getopt()</code> 函数用于解析命令行参数。它的参数 <code>argc</code> 和 <code>argv</code> 分别是在程序调用时传递给 <code>main()</code> 函数的参数计数和参数数组。</p>\n<p><code>argv</code> 中以 ‘-‘ 开头的元素（且不完全是 “-“ 或 “–”）是选项元素。除了初始的 ‘-‘ 之外，该元素的字符是选项字符。如果重复调用 <code>getopt()</code>，它会从每个选项元素中依次返回每个选项字符。</p>\n<p>变量 <code>optind</code> 是 <code>argv</code> 中要处理的下一个元素的索引。系统将此值初始化为 1。调用方可以将其重置为 1 以重新开始扫描相同的 <code>argv</code>，或者在扫描新的参数向量时重置。</p>\n<p>如果 <code>getopt()</code> 找到了另一个选项字符，它会返回该字符，并更新外部变量 <code>optind</code> 和静态变量 <code>nextchar</code>，以便下一次调用 <code>getopt()</code> 可以从下一个选项字符或 <code>argv</code> 元素继续扫描。如果没有更多的选项字符，<code>getopt()</code> 将返回 -1。此时，<code>optind</code> 是 <code>argv</code> 中第一个非选项元素的索引。</p>\n<p><code>optstring</code> 是一个包含合法选项字符的字符串。如果这样的字符后面跟着一个冒号，则该选项需要一个参数，因此 <code>getopt()</code> 会将一个指向同一 <code>argv</code> 元素中后续文本的指针，或指向下一个 <code>argv</code> 元素中文本的指针，放在 <code>optarg</code> 中。两个冒号表示选项接受一个可选参数；如果当前 <code>argv</code> 元素中有文本（例如，在与选项名称相同的单词中，例如 “-oarg”），则将其返回到 <code>optarg</code> 中，否则将 <code>optarg</code> 设置为零。这是 GNU 扩展。如果 <code>optstring</code> 包含一个后跟分号的 W，则将 -W foo 视为长选项 –foo。（POSIX.2 保留 -W 选项用于实现扩展。）此行为是 GNU 扩展，在 glibc 2 之前的库中不可用。</p>\n<p>默认情况下，<code>getopt()</code> 在扫描时会对 <code>argv</code> 的内容进行排列，以便最终所有非选项都位于末尾。还实现了另外两种扫描模式。如果 <code>optstring</code> 的第一个字符是 ‘+’ 或设置了环境变量 <code>POSIXLY_CORRECT</code>，则选项处理会在遇到非选项参数时立即停止。如果 <code>optstring</code> 的第一个字符是 ‘-‘，则每个非选项 <code>argv</code> 元素都将被视为字符代码为 1 的选项的参数。（这被那些被编写为期望选项和其他 <code>argv</code> 元素以任何顺序排列，并且关心两者顺序的程序所使用。）特殊参数 “–” 强制结束选项扫描，而不管扫描模式如何。</p>\n<p>在处理选项列表时，<code>getopt()</code> 可以检测到两种错误：（1）<code>optstring</code> 中未指定的选项字符，以及（2）缺少选项参数（即，命令行末尾的选项没有预期的参数）。此类错误将按如下方式处理和报告：</p>\n<ul>\n<li>默认情况下，<code>getopt()</code> 会在标准错误输出上打印错误消息，将错误的选项字符放入 <code>optopt</code> 中，并返回 ‘?’ 作为函数结果。</li>\n<li>如果调用方已将全局变量 <code>opterr</code> 设置为零，则 <code>getopt()</code> 不会打印错误消息。调用方可以通过测试函数返回值是否为 ‘?’ 来确定是否发生了错误。（默认情况下，<code>opterr</code> 的值为非零值。）</li>\n<li>如果 <code>optstring</code> 的第一个字符（在上述任何可选的 ‘+’ 或 ‘-‘ 之后）是冒号（’:’），则 <code>getopt()</code> 同样不会打印错误消息。此外，它会返回 ‘:’ 而不是 ‘?’ 来指示缺少选项参数。这允许调用方区分这两种不同类型的错误。</li>\n</ul>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdlib.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">argc</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">argv</span><span style=\"color: #569CD6\">[]</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> opt;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *optstring = </span><span style=\"color: #CE9178\">\"bc::a:\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> ((opt = </span><span style=\"color: #DCDCAA\">getopt</span><span style=\"color: #D4D4D4\">(argc, argv, optstring)) != -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">switch</span><span style=\"color: #D4D4D4\"> (opt) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">case</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'a'</span><span style=\"color: #D4D4D4\">:</span><span style=\"color: #6A9955\">//-a[arg]</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Option -a with argument: </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, optarg);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">case</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'b'</span><span style=\"color: #D4D4D4\">:</span><span style=\"color: #6A9955\">//-b</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Option -b</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">case</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'c'</span><span style=\"color: #D4D4D4\">:</span><span style=\"color: #6A9955\">//-c[arg]</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Option -c with argument: </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, optarg ? optarg : </span><span style=\"color: #CE9178\">\"none\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">case</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'?'</span><span style=\"color: #D4D4D4\">:</span><span style=\"color: #6A9955\">//-s -a</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Unknown option: -</span><span style=\"color: #9CDCFE\">%c</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, optopt);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">case</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">':'</span><span style=\"color: #D4D4D4\">:</span><span style=\"color: #6A9955\">//*optstring = \":bc::a:\" -a</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Option -</span><span style=\"color: #9CDCFE\">%c</span><span style=\"color: #CE9178\"> requires an argument</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, optopt);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">default</span><span style=\"color: #D4D4D4\">:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Unknown error</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span></code></pre></div><h1 id=\"open函数\"><a href=\"#open函数\" class=\"headerlink\" title=\"open函数\"></a>open函数</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/types.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/stat.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;fcntl.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">open</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">pathname</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">flags</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">open</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">pathname</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">flags</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">mode_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">mode</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>open()</code> 系统调用打开由 <code>pathname</code> 指定的文件。如果指定的文件不存在，则可以选择由 <code>open()</code> 创建（如果在 <code>flags</code> 中指定了 <code>O_CREAT</code>）。</p>\n<p><code>open()</code> 的返回值是一个文件描述符，它是一个小的非负整数，用于后续的系统调用（read(2)、write(2)、lseek(2)、fcntl(2) 等）来引用打开的文件。成功调用返回的文件描述符将是该进程当前未打开的最小编号文件描述符。</p>\n<p>默认情况下，新文件描述符设置为在 execve(2) 后保持打开状态（即，fcntl(2) 中描述的 <code>FD_CLOEXEC</code> 文件描述符标志最初是被禁用的）；可以使用下面描述的 <code>O_CLOEXEC</code> 标志来更改此默认值。文件偏移量设置为文件的开头（请参阅 lseek(2)）。</p>\n<p>调用 <code>open()</code> 会创建一个新的打开文件描述，它是系统范围内打开文件表中的一个条目。打开文件描述记录了文件偏移量和文件状态标志（见下文）。文件描述符是对打开文件描述的引用；如果随后删除或修改 <code>pathname</code> 以引用不同的文件，则此引用不受影响。有关打开文件描述的更多详细信息，请参阅注释。</p>\n<p>参数 <code>flags</code> 必须包含以下访问模式之一：<code>O_RDONLY</code>、<code>O_WRONLY</code> 或 <code>O_RDWR</code>。这些请求分别以只读、只写或读/写方式打开文件。</p>\n<p>此外，可以在 <code>flags</code> 中对零个或多个文件创建标志和文件状态标志进行按位或运算。文件创建标志是 <code>O_CLOEXEC</code>、<code>O_CREAT</code>、<code>O_DIRECTORY</code>、<code>O_EXCL</code>、<code>O_NOCTTY</code>、<code>O_NOFOLLOW</code>、<code>O_TMPFILE</code> 和 <code>O_TRUNC</code>。文件状态标志是下面列出的所有剩余标志。这两组标志之间的区别在于，文件创建标志会影响打开操作本身的语义，而文件状态标志会影响后续 I/O 操作的语义。可以检索和（在某些情况下）修改文件状态标志；有关详细信息，请参阅 fcntl(2)。</p>\n<p>以下是 <code>open</code> 函数中各个标志的含义：</p>\n<table>\n<thead>\n<tr>\n<th>标志</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>O_CLOEXEC</code></td>\n<td>在执行exec()时，自动关闭文件描述符。</td>\n</tr>\n<tr>\n<td><code>O_CREAT</code></td>\n<td>如果文件不存在，则创建它，此时要传入mode参数描述创建文件的用户访问权限</td>\n</tr>\n<tr>\n<td><code>O_DIRECTORY</code></td>\n<td>如果路径名不是一个目录，打开失败。</td>\n</tr>\n<tr>\n<td><code>O_EXCL</code></td>\n<td>和 <code>O_CREAT</code> 一起使用，如果文件已经存在，打开失败。</td>\n</tr>\n<tr>\n<td><code>O_NOCTTY</code></td>\n<td>如果路径名指向终端设备，不要将此设备分配为控制终端。</td>\n</tr>\n<tr>\n<td><code>O_NOFOLLOW</code></td>\n<td>如果路径名是一个符号链接，打开失败。</td>\n</tr>\n<tr>\n<td><code>O_TMPFILE</code></td>\n<td>创建一个匿名临时文件，文件将在关闭时删除。必须与 <code>O_RDWR</code> 或 <code>O_WRONLY</code> 一起使用，并且必须包含在 <code>O_CREAT</code> 中。</td>\n</tr>\n<tr>\n<td><code>O_TRUNC</code></td>\n<td>如果文件存在并且以写入模式打开，将其截断为长度 0。</td>\n</tr>\n</tbody></table>\n<p><code>open()</code>， <code>openat()</code> 和 <code>creat()</code> 函数在成功时返回新的文件描述符（一个非负整数），如果发生错误则返回 -1（此时，<code>errno</code> 会被设置为相应的错误码）。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>每次调用 open 系统调用时，内核都会创建一个新的文件描述符，即使两次调用的文件路径相同。每个文件描述符都有自己独立的文件指针和文件状态标志。</p>\n</p>\n</div>\n<h1 id=\"close函数\"><a href=\"#close函数\" class=\"headerlink\" title=\"close函数\"></a>close函数</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">close</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>close()</code> 函数用于关闭一个文件描述符，使其不再指向任何文件，并可以被重用。该进程持有的，与文件描述符关联的任何记录锁 (参见 fcntl(2))，都会被移除 (无论使用哪个文件描述符获取的锁)。<br>如果 <code>fd</code> 是指向底层打开文件描述符的最后一个文件描述符 (参见 open(2))，则与该打开文件描述符关联的资源将被释放；如果该文件描述符是对已使用 unlink(2) 移除的文件的最后一个引用，则该文件将被删除。</p>\n<p><code>close()</code> 函数调用成功时返回0。发生错误时返回-1，并将 <code>errno</code> 设置为相应的错误码。</p>\n<h1 id=\"strerror函数\"><a href=\"#strerror函数\" class=\"headerlink\" title=\"strerror函数\"></a>strerror函数</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;string.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #DCDCAA\">strerror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">errnum</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>strerror()</code> 函数返回一个指向字符串的指针，该字符串描述传递给参数 <code>errnum</code> 的错误码，可能会使用当前语言环境的 <code>LC_MESSAGES</code> 部分来选择适当的语言。（例如，如果 <code>errnum</code> 为 <code>EINVAL</code> ，则返回的描述将是“无效参数”。）应用程序不得修改此字符串，但可以通过后续调用 <code>strerror()</code> 或 <code>strerror_l()</code> 进行修改。 包括 perror(3) 在内的任何其他库函数都不会修改此字符串。</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;errno.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;string.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  FILE *file = </span><span style=\"color: #DCDCAA\">fopen</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"nonexistentfile.txt\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">\"r\"</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">//如果打开失败，errno会被设置</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (file == </span><span style=\"color: #569CD6\">NULL</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 打开文件失败，输出错误信息</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Error opening file: </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #DCDCAA\">strerror</span><span style=\"color: #D4D4D4\">(errno));</span><span style=\"color: #6A9955\">//将错误码转换为错误信息，直观方便</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  } </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 打开文件成功，关闭文件</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">fclose</span><span style=\"color: #D4D4D4\">(file);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h1 id=\"perror函数\"><a href=\"#perror函数\" class=\"headerlink\" title=\"perror函数\"></a>perror函数</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;errno.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> * </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> sys_errlist</span><span style=\"color: #569CD6\">[]</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> sys_nerr;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> errno;</span><span style=\"color: #6A9955\">       /* Not really declared this way; see errno(3) */</span></span></code></pre></div><p><code>perror()</code> 函数在标准错误输出上生成一条消息，描述在调用系统或库函数期间遇到的最后一个错误。</p>\n<p>首先（如果 s 不为 <code>NULL</code> 且 *s 不为空字节 (‘\\0’)），则打印参数字符串 s，后跟冒号和空格。 然后是与当前 errno 值对应的错误消息和换行符。</p>\n<p>为了最大程度地发挥作用，参数字符串应包含发生错误的函数的名称。</p>\n<p>全局错误列表 sys_errlist[] 可以通过 <code>errno</code> 索引，可用于获取不带换行符的错误消息。 表中提供的最大消息编号为 sys_nerr-1。 直接访问此列表时要小心，因为新错误值可能尚未添加到 sys_errlist[] 中。 现在不推荐使用 sys_errlist[]； 请改用 strerror(3)。</p>\n<p>当系统调用失败时，它通常返回 -1 并将变量 <code>errno</code> 设置为描述错误的值。</p>\n<p>许多库函数也是如此。 <code>perror()</code> 函数用于将此错误代码转换为人类可读的形式。 请注意，在系统调用或库函数调用成功后， <code>errno</code> 的值是未定义的：即使调用成功，此调用也可能会更改此变量，例如，因为它在内部使用了其他一些失败的库函数。 因此，如果在失败的调用之后没有立即调用 <code>perror()</code>，则应保存 <code>errno</code> 的值。</p>\n<h1 id=\"read函数\"><a href=\"#read函数\" class=\"headerlink\" title=\"read函数\"></a>read函数</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">ssize_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">buf</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">count</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>read()</code> 函数尝试从文件描述符 <code>fd</code> 读取最多 <code>count</code> 字节的数据到以 <code>buf</code> 开始的缓冲区中。<br>对于支持文件定位操作的文件，读取操作从文件偏移量处开始，读取的字节数将累加到文件偏移量中。如果文件偏移量已经到达或超过文件末尾，则不会读取任何字节，并且 <code>read()</code> 返回 0。</p>\n<p>如果 <code>count</code> 为零，<code>read()</code> 可能会检测到下述错误。如果没有错误，或者 <code>read()</code> 没有检查错误，那么 <code>count</code> 为 0 的 <code>read()</code> 调用将返回 0，并且不会产生其他影响。</p>\n<p>根据 POSIX.1 标准，如果 <code>count</code> 大于 <code>SSIZE_MAX</code>，则结果取决于具体实现；有关 Linux 的上限，请参阅注释部分。</p>\n<p>成功时，返回读取的字节数（0 表示文件结束），并且文件位置会向前移动相应的字节数。如果返回的字节数小于请求的字节数，则不视为错误；发生这种情况的原因可能是当前实际可用的字节数较少（例如，因为文件已接近末尾，或者正在从管道或终端读取数据），或者因为 <code>read()</code> 被信号中断。 另请参阅注释部分。</p>\n<p>发生错误时，返回 -1，并将 <code>errno</code> 设置为相应的错误码。 在这种情况下，文件位置（如果有）是否发生变化是未指定的。</p>\n<h1 id=\"write函数\"><a href=\"#write函数\" class=\"headerlink\" title=\"write函数\"></a>write函数</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">ssize_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">write</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">buf</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">size_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">count</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>write()</code> 函数将以 <code>buf</code> 开始的缓冲区中最多 <code>count</code> 字节的数据写入文件描述符 <code>fd</code> 所指向的文件。</p>\n<p>写入的字节数可能会少于 <code>count</code>，例如，底层物理介质上空间不足，或者遇到 RLIMIT_FSIZE 资源限制（请参阅 setrlimit(2)），或者在写入少于 <code>count</code> 字节后，调用被信号处理程序中断。（另请参阅 pipe(7)）。</p>\n<p>对于可定位文件（例如，可以应用 lseek(2) 的文件，如常规文件），写入操作在文件偏移量处进行，并且文件偏移量会增加实际写入的字节数。如果文件是用 <code>O_APPEND</code> 标志打开的（参见 open(2)），则在写入之前，文件偏移量会先被设置为文件末尾。文件偏移量的调整和写入操作是以原子操作的形式执行的。</p>\n<p>POSIX 标准要求，在一个可证明发生在 <code>write()</code> 返回之后的 read(2) 操作中，将会返回新的数据。请注意，并非所有文件系统都符合 POSIX 标准。</p>\n<p>根据 POSIX.1 标准，如果 <code>count</code> 大于 <code>SSIZE_MAX</code>，则结果取决于具体实现；有关 Linux 的上限，请参阅注释部分。</p>\n<p>成功时，返回写入的字节数。发生错误时，返回 -1，并设置 <code>errno</code> 以指示错误原因。</p>\n<p>需要注意的是，即使 <code>write()</code> 调用成功，也可能只传输了少于 <code>count</code> 字节的数据。 这种部分写入可能由多种原因造成； 例如，磁盘设备上的空间不足以写入所有请求的字节，或者对套接字、管道或类似设备的阻塞 <code>write()</code> 操作在传输了部分数据后被信号处理程序中断。 如果发生部分写入，调用者可以再次调用 <code>write()</code> 以传输剩余的字节。 后续调用将传输更多字节，也可能导致错误（例如，如果磁盘已满）。</p>\n<p>如果 <code>count</code> 为零且 <code>fd</code> 引用的是常规文件，那么如果检测到以下错误之一，<code>write()</code> 可能会返回失败状态。 如果未检测到错误或未执行错误检测，则将返回 0 且不会产生任何其他影响。 如果 <code>count</code> 为零且 <code>fd</code> 引用的是常规文件以外的文件，则结果未指定。</p>\n<h1 id=\"文件描述符\"><a href=\"#文件描述符\" class=\"headerlink\" title=\"文件描述符\"></a>文件描述符</h1><p>对于一个进程来说，系统维护一个文件描述符表，用于记录进程打开的文件。文件描述符是一个非负整数，用于标识一个文件，对应文件描述符表中的一个表项（下标）。默认情况下，进程最开始运行时会打开3个文件，分别是：</p>\n<ul>\n<li>0:STDIN</li>\n<li>1:STDOUT</li>\n<li>2:STDERR</li>\n</ul>\n<p>于是，如果第一次使用 <code>open()</code> 函数打开一个文件，那么返回的文件描述符就是3。</p>\n<p>根据这个知识，我们可以自己使用系统调用完成scanf函数和printf函数的功能。</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">argc</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">argv</span><span style=\"color: #569CD6\">[]</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">buf</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">100</span><span style=\"color: #D4D4D4\">]={};</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n = </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">(STDIN_FILENO,buf,</span><span style=\"color: #B5CEA8\">100</span><span style=\"color: #D4D4D4\">);</span><span style=\"color: #6A9955\">//scanf</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">//注意，此时从标准输入读取的字符串是不会自动加上'\\0'的</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">write</span><span style=\"color: #D4D4D4\">(STDOUT_FILENO, buf, n);</span><span style=\"color: #6A9955\">//printf</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h1 id=\"fcntl函数\"><a href=\"#fcntl函数\" class=\"headerlink\" title=\"fcntl函数\"></a>fcntl函数</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;fcntl.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">fcntl</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">cmd</span><span style=\"color: #D4D4D4\">, ...</span><span style=\"color: #6A9955\"> /* arg */</span><span style=\"color: #D4D4D4\"> );</span></span></code></pre></div><p><code>fcntl()</code> 函数对打开的文件描述符 <code>fd</code> 执行以下操作之一。 具体操作由 <code>cmd</code> 参数决定。</p>\n<p><code>fcntl()</code> 可以接受一个可选的第三个参数。 是否需要此参数取决于 <code>cmd</code>。 每个 <code>cmd</code> 名称后面的括号中指明了所需的参数类型（在大多数情况下，所需的类型是 int，我们使用名称 <code>arg</code> 来标识参数），如果不需要参数，则指定为 void。</p>\n<p>以下某些操作仅在特定 Linux 内核版本之后才受支持。 检查主机内核是否支持特定操作的首选方法是使用所需的 cmd 值调用 <code>fcntl()</code>，然后测试调用是否失败并返回 <code>EINVAL</code> 错误，这表明内核无法识别此值。</p>\n<table>\n<thead>\n<tr>\n<th><strong>cmd 参数</strong></th>\n<th><strong>解释</strong></th>\n<th><strong>用法</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>F_GETFD</code></td>\n<td>获取文件描述符的标志位</td>\n<td><code>int flags = fcntl(fd, F_GETFD);</code></td>\n</tr>\n<tr>\n<td><code>F_SETFD</code></td>\n<td>设置文件描述符的标志位</td>\n<td><code>fcntl(fd, F_SETFD, flags);</code></td>\n</tr>\n<tr>\n<td><code>F_GETFL</code></td>\n<td>获取文件状态标志</td>\n<td><code>int flags = fcntl(fd, F_GETFL);</code></td>\n</tr>\n<tr>\n<td><code>F_SETFL</code></td>\n<td>设置文件状态标志</td>\n<td><code>fcntl(fd, F_SETFL, flags);</code></td>\n</tr>\n<tr>\n<td><code>F_GETLK</code></td>\n<td>获取文件锁信息</td>\n<td><code>struct flock lock; fcntl(fd, F_GETLK, &amp;lock);</code></td>\n</tr>\n<tr>\n<td><code>F_SETLK</code></td>\n<td>设置文件锁信息，非阻塞模式</td>\n<td><code>fcntl(fd, F_SETLK, &amp;lock);</code></td>\n</tr>\n<tr>\n<td><code>F_SETLKW</code></td>\n<td>设置文件锁信息，阻塞模式</td>\n<td><code>fcntl(fd, F_SETLKW, &amp;lock);</code></td>\n</tr>\n<tr>\n<td><code>F_DUPFD</code></td>\n<td>复制文件描述符</td>\n<td><code>int new_fd = fcntl(fd, F_DUPFD, 0);</code></td>\n</tr>\n<tr>\n<td><code>F_DUPFD_CLOEXEC</code></td>\n<td>复制文件描述符，并设置 <code>FD_CLOEXEC</code> 标志</td>\n<td><code>int new_fd = fcntl(fd, F_DUPFD_CLOEXEC, 0);</code></td>\n</tr>\n<tr>\n<td><code>F_GETOWN</code></td>\n<td>获取信号所有者 PID 或进程组 ID</td>\n<td><code>int owner = fcntl(fd, F_GETOWN);</code></td>\n</tr>\n<tr>\n<td><code>F_SETOWN</code></td>\n<td>设置信号所有者 PID 或进程组 ID</td>\n<td><code>fcntl(fd, F_SETOWN, owner);</code></td>\n</tr>\n<tr>\n<td><code>F_GETSIG</code></td>\n<td>获取异步 I/O 信号</td>\n<td><code>int sig = fcntl(fd, F_GETSIG);</code></td>\n</tr>\n<tr>\n<td><code>F_SETSIG</code></td>\n<td>设置异步 I/O 信号</td>\n<td><code>fcntl(fd, F_SETSIG, sig);</code></td>\n</tr>\n<tr>\n<td><code>F_SETPIPE_SZ</code></td>\n<td>设置管道的缓冲区大小</td>\n<td><code>fcntl(fd, F_SETPIPE_SZ, size);</code></td>\n</tr>\n<tr>\n<td><code>F_GETPIPE_SZ</code></td>\n<td>获取管道的缓冲区大小</td>\n<td><code>int size = fcntl(fd, F_GETPIPE_SZ);</code></td>\n</tr>\n<tr>\n<td><code>F_OFD_GETLK</code></td>\n<td>获取文件描述符锁信息（文件描述符级别的锁）</td>\n<td><code>struct ofd_lock lock; fcntl(fd, F_OFD_GETLK, &amp;lock);</code></td>\n</tr>\n<tr>\n<td><code>F_OFD_SETLK</code></td>\n<td>设置文件描述符锁信息（文件描述符级别的锁），非阻塞模式</td>\n<td><code>fcntl(fd, F_OFD_SETLK, &amp;lock);</code></td>\n</tr>\n<tr>\n<td><code>F_OFD_SETLKW</code></td>\n<td>设置文件描述符锁信息（文件描述符级别的锁），阻塞模式</td>\n<td><code>fcntl(fd, F_OFD_SETLKW, &amp;lock);</code></td>\n</tr>\n</tbody></table>\n<p>函数返回值取决于cmd参数，发生错误时，返回值为 -1，并设置 <code>errno</code> 以指示错误原因。</p>\n<h1 id=\"阻塞和非阻塞\"><a href=\"#阻塞和非阻塞\" class=\"headerlink\" title=\"阻塞和非阻塞\"></a>阻塞和非阻塞</h1><p>对文件进行读写操作时，根据打开文件的类型，读写操作可能会阻塞。例如，对于程序默认打开的终端STDIN，如果没有输入，那么读操作会一直阻塞，直到有输入为止。</p>\n<p>对一个文件的读写操作是否会阻塞，取决于其文件状态标志，使用open函数时传入了<code>O_NONBLOCK</code>参数，则在打开时可以设置该标志，那么就不会被阻塞。</p>\n<p>值得注意的是：对于普通文件，读取操作通常不会阻塞，即使文件描述符是阻塞的，因为文件的大小是固定的，读取操作要么成功读取数据，要么返回EOF。<br>对于终端设备、管道、套接字等，读取操作在没有可用数据时可能会阻塞，直到有数据可读或发生错误。</p>\n<p>如果想让终端设备、管道、套接字等读写操作不阻塞，则要设置其文件状态标志。这样在读取的时候不会发生阻塞，但是会立即返回一个错误码，错误码为<code>EAGAIN</code>或<code>EWOULDBLOCK</code>。这个时候可以通过轮询的方式来读取数据，直到读取到数据为止。</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;errno.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;fcntl.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdlib.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;string.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> MSG_TRY </span><span style=\"color: #CE9178\">\"try again</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">buf</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> flags, n;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  flags = </span><span style=\"color: #DCDCAA\">fcntl</span><span style=\"color: #D4D4D4\">(STDIN_FILENO, F_GETFL);</span><span style=\"color: #6A9955\"> // 获取stdin属性信息</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (flags == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"fcntl error\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  flags |= O_NONBLOCK;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> ret = </span><span style=\"color: #DCDCAA\">fcntl</span><span style=\"color: #D4D4D4\">(STDIN_FILENO, F_SETFL, flags);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (ret == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"fcntl error\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">tryagain:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  n = </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">(STDIN_FILENO, buf, </span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (n &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (errno != EAGAIN) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"read /dev/tty\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">sleep</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">3</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">write</span><span style=\"color: #D4D4D4\">(STDOUT_FILENO, MSG_TRY, </span><span style=\"color: #DCDCAA\">strlen</span><span style=\"color: #D4D4D4\">(MSG_TRY));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">goto</span><span style=\"color: #D4D4D4\"> tryagain;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">write</span><span style=\"color: #D4D4D4\">(STDOUT_FILENO, buf, n);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h1 id=\"lseek函数\"><a href=\"#lseek函数\" class=\"headerlink\" title=\"lseek函数\"></a>lseek函数</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/types.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">off_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">lseek</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">off_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">offset</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">whence</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p>文件的读指针和写指针是同一个指针。<code>lseek</code> 修改的是文件描述符的当前位置，无论你进行读取还是写入操作，都是从这个位置开始的。因此，<code>lseek</code> 同时影响读取和写入的起始位置。</p>\n<p><code>lseek()</code> 函数根据指令 <code>whence</code> 的值，将与文件描述符 <code>fd</code> 关联的打开文件描述符的文件偏移量重新定位到参数 <code>offset</code> 指定的位置，具体如下：</p>\n<ul>\n<li>SEEK_SET：文件偏移量被设置为 offset 字节。</li>\n<li>SEEK_CUR：文件偏移量被设置为当前位置加上 offset 字节。</li>\n<li>SEEK_END：文件偏移量被设置为文件大小加上 offset 字节。</li>\n<li>SEEK_DATA：文件偏移量被设置为下一个数据区的开始，如果offset本来就在数据区中，则不改变。</li>\n<li>SEEK_HOLE：文件偏移量被设置为下一个空洞的开始，如果offset本来就在空洞区中，则不改变，如果没有空洞区，则指向文件末尾。</li>\n</ul>\n<p><code>lseek()</code> 允许将文件偏移量设置到文件末尾之后（但这不会改变文件的大小）。如果稍后在该点写入数据，则在实际写入数据到该间隙（“空洞”）之前，对该间隙中的数据的后续读取操作将返回空字节（’\\0’）。</p>\n<p>成功完成后，<code>lseek()</code> 返回从文件开头开始计算的偏移量（以字节为单位）。发生错误时，返回值为 (off_t) -1，并设置 <code>errno</code> 以指示错误原因。</p>\n<h1 id=\"truncate函数\"><a href=\"#truncate函数\" class=\"headerlink\" title=\"truncate函数\"></a>truncate函数</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/types.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">truncate</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">path</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">off_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">length</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">ftruncate</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">off_t</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">length</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>truncate()</code> 和 <code>ftruncate()</code> 函数将 <code>path</code> 指定的常规文件或 <code>fd</code> 引用的常规文件截断为 <code>length</code> 字节的大小。</p>\n<p>如果文件之前大于此大小，则多余的数据将丢失。如果文件之前较短，则会被扩展，扩展部分读取为空字节 (‘\\0’)。</p>\n<p>文件偏移量不会改变。</p>\n<p>如果文件大小发生变化，则文件的 <code>st_ctime</code> 和 <code>st_mtime</code> 字段（分别为最后一次状态更改时间和最后一次修改时间；参见 inode(7)）将被更新，并且 set-user-ID 和 set-group-ID 模式位可能会被清除。<br>使用 <code>ftruncate()</code> 时，文件必须以写模式打开；使用 <code>truncate()</code> 时，文件必须是可写的。</p>\n<h1 id=\"stat函数\"><a href=\"#stat函数\" class=\"headerlink\" title=\"stat函数\"></a>stat函数</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/types.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/stat.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">stat</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">pathname</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> stat *</span><span style=\"color: #9CDCFE\">statbuf</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">fstat</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> stat *</span><span style=\"color: #9CDCFE\">statbuf</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">lstat</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">pathname</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> stat *</span><span style=\"color: #9CDCFE\">statbuf</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> stat {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">dev_t</span><span style=\"color: #D4D4D4\"> st_dev;</span><span style=\"color: #6A9955\">         /* ID of device containing file */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">ino_t</span><span style=\"color: #D4D4D4\"> st_ino;</span><span style=\"color: #6A9955\">         /* Inode number */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">mode_t</span><span style=\"color: #D4D4D4\"> st_mode;</span><span style=\"color: #6A9955\">       /* File type and mode */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">nlink_t</span><span style=\"color: #D4D4D4\"> st_nlink;</span><span style=\"color: #6A9955\">     /* Number of hard links */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">uid_t</span><span style=\"color: #D4D4D4\"> st_uid;</span><span style=\"color: #6A9955\">         /* User ID of owner */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">gid_t</span><span style=\"color: #D4D4D4\"> st_gid;</span><span style=\"color: #6A9955\">         /* Group ID of owner */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">dev_t</span><span style=\"color: #D4D4D4\"> st_rdev;</span><span style=\"color: #6A9955\">        /* Device ID (if special file) */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">off_t</span><span style=\"color: #D4D4D4\"> st_size;</span><span style=\"color: #6A9955\">        /* Total size, in bytes */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">blksize_t</span><span style=\"color: #D4D4D4\"> st_blksize;</span><span style=\"color: #6A9955\"> /* Block size for filesystem I/O */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">blkcnt_t</span><span style=\"color: #D4D4D4\"> st_blocks;</span><span style=\"color: #6A9955\">   /* Number of 512B blocks allocated */</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">  /* Since Linux 2.6, the kernel supports nanosecond</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">     precision for the following timestamp fields.</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">     For the details before Linux 2.6, see NOTES. */</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> timespec st_atim;</span><span style=\"color: #6A9955\"> /* Time of last access */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> timespec st_mtim;</span><span style=\"color: #6A9955\"> /* Time of last modification */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> timespec st_ctim;</span><span style=\"color: #6A9955\"> /* Time of last status change */</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> st_atime </span><span style=\"color: #9CDCFE\">st_atim</span><span style=\"color: #569CD6\">.</span><span style=\"color: #9CDCFE\">tv_sec</span><span style=\"color: #6A9955\"> /* Backward compatibility */</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> st_mtime </span><span style=\"color: #9CDCFE\">st_mtim</span><span style=\"color: #569CD6\">.</span><span style=\"color: #9CDCFE\">tv_sec</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> st_ctime </span><span style=\"color: #9CDCFE\">st_ctim</span><span style=\"color: #569CD6\">.</span><span style=\"color: #9CDCFE\">tv_sec</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"></span></code></pre></div><p>这些函数返回文件信息，并将信息存储在 <code>statbuf</code> 指向的缓冲区中。 文件本身不需要任何权限，但对于 <code>stat()</code>、<code>fstatat()</code> 和 <code>lstat()</code>，需要对 <code>pathname</code> 中所有通向该文件的目录具有执行（搜索）权限。</p>\n<p><code>stat()</code> 和 <code>fstatat()</code> 获取 <code>pathname</code> 指向的文件的信息；<code>fstatat()</code> 的区别将在下文介绍。</p>\n<p><code>lstat()</code> 与 <code>stat()</code> 相同，区别在于如果 <code>pathname</code> 是符号链接，则 <code>lstat()</code> 返回有关链接本身的信息，而不是链接指向的文件的信息。</p>\n<p><code>fstat()</code> 与 <code>stat()</code> 相同，区别在于要获取其信息的文件由文件描述符 <code>fd</code> 指定。</p>\n<p>若成功，返回 0。若出错，返回 -1，并将 <code>errno</code> 设置为相应的值。</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdint.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdlib.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/stat.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/sysmacros.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/types.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;time.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">argc</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">argv</span><span style=\"color: #569CD6\">[]</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> stat sb;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (argc != </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">fprintf</span><span style=\"color: #D4D4D4\">(stderr, </span><span style=\"color: #CE9178\">\"Usage: </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #CE9178\"> &lt;pathname&gt;</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">argv</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">lstat</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">argv</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">], &amp;sb) == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"lstat\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"ID of containing device:  [</span><span style=\"color: #9CDCFE\">%jx</span><span style=\"color: #CE9178\">,</span><span style=\"color: #9CDCFE\">%jx</span><span style=\"color: #CE9178\">]</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, (</span><span style=\"color: #569CD6\">uintmax_t</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #DCDCAA\">major</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">sb</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_dev</span><span style=\"color: #D4D4D4\">),</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">         (</span><span style=\"color: #569CD6\">uintmax_t</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #DCDCAA\">minor</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">sb</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_dev</span><span style=\"color: #D4D4D4\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"File type:                \"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">switch</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">sb</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_mode</span><span style=\"color: #D4D4D4\"> &amp; S_IFMT) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">case</span><span style=\"color: #D4D4D4\"> S_IFBLK:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"block device</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">case</span><span style=\"color: #D4D4D4\"> S_IFCHR:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"character device</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">case</span><span style=\"color: #D4D4D4\"> S_IFDIR:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"directory</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">case</span><span style=\"color: #D4D4D4\"> S_IFIFO:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"FIFO/pipe</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">case</span><span style=\"color: #D4D4D4\"> S_IFLNK:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"symlink</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">case</span><span style=\"color: #D4D4D4\"> S_IFREG:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"regular file</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">case</span><span style=\"color: #D4D4D4\"> S_IFSOCK:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"socket</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">default</span><span style=\"color: #D4D4D4\">:</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"unknown?</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"I-node number:            </span><span style=\"color: #9CDCFE\">%ju</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, (</span><span style=\"color: #569CD6\">uintmax_t</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #9CDCFE\">sb</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_ino</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Mode:                     </span><span style=\"color: #9CDCFE\">%jx</span><span style=\"color: #CE9178\"> (hex)</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, (</span><span style=\"color: #569CD6\">uintmax_t</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #9CDCFE\">sb</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_mode</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Link count:               </span><span style=\"color: #9CDCFE\">%ju</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, (</span><span style=\"color: #569CD6\">uintmax_t</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #9CDCFE\">sb</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_nlink</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Ownership:                UID=</span><span style=\"color: #9CDCFE\">%ju</span><span style=\"color: #CE9178\">   GID=</span><span style=\"color: #9CDCFE\">%ju</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, (</span><span style=\"color: #569CD6\">uintmax_t</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #9CDCFE\">sb</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_uid</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">         (</span><span style=\"color: #569CD6\">uintmax_t</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #9CDCFE\">sb</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_gid</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Preferred I/O block size: </span><span style=\"color: #9CDCFE\">%jd</span><span style=\"color: #CE9178\"> bytes</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, (</span><span style=\"color: #569CD6\">intmax_t</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #9CDCFE\">sb</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_blksize</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"File size:                </span><span style=\"color: #9CDCFE\">%jd</span><span style=\"color: #CE9178\"> bytes</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, (</span><span style=\"color: #569CD6\">intmax_t</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #9CDCFE\">sb</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_size</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Blocks allocated:         </span><span style=\"color: #9CDCFE\">%jd</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, (</span><span style=\"color: #569CD6\">intmax_t</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #9CDCFE\">sb</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_blocks</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Last status change:       </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #DCDCAA\">ctime</span><span style=\"color: #D4D4D4\">(&amp;</span><span style=\"color: #9CDCFE\">sb</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_ctime</span><span style=\"color: #D4D4D4\">));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Last file access:         </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #DCDCAA\">ctime</span><span style=\"color: #D4D4D4\">(&amp;</span><span style=\"color: #9CDCFE\">sb</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_atime</span><span style=\"color: #D4D4D4\">));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Last file modification:   </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #DCDCAA\">ctime</span><span style=\"color: #D4D4D4\">(&amp;</span><span style=\"color: #9CDCFE\">sb</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_mtime</span><span style=\"color: #D4D4D4\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_SUCCESS);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h1 id=\"link函数\"><a href=\"#link函数\" class=\"headerlink\" title=\"link函数\"></a>link函数</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">link</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">oldpath</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">newpath</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>link()</code> 系统调用会为一个已有的文件创建一个新的链接（也称为硬链接）。</p>\n<p>如果 <code>newpath</code> 已经存在，它不会被覆盖，产生<code>EEXIST</code>错误码。</p>\n<p>这个新的文件名可以和旧文件名完全一样地用于任何操作；两个文件名都指向同一个文件（因此具有相同的权限和所有权），并且无法分辨哪个文件名是“原始”的。</p>\n<p>若调用成功，返回 0。若调用失败，返回 -1，并设置相应的错误码 <code>errno</code>。</p>\n<h1 id=\"unlink函数\"><a href=\"#unlink函数\" class=\"headerlink\" title=\"unlink函数\"></a>unlink函数</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">unlink</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">pathname</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>unlink()</code> 系统调用从文件系统中删除一个文件目录项。如果该文件目录项是文件的最后一个链接，并且没有任何进程打开了该文件，则该文件将被删除，其占用的空间将被释放以供重用。</p>\n<p><strong>如果该文件名是文件的最后一个链接，但仍有进程打开了该文件，则该文件将继续存在，直到最后一个引用它的文件描述符被关闭。</strong></p>\n<p>如果该文件名指向一个符号链接，则该链接将被删除。</p>\n<p>如果该文件名指向一个套接字、FIFO 或设备文件，则该文件名将被删除，但打开了该对象的进程可以继续使用它。</p>\n<p>若调用成功，返回 0。若调用失败，返回 -1，并设置相应的错误码 <code>errno</code>。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>如果文件仍有其他进程打开，文件的内容不会立即被删除。这是因为文件的实际内容和文件的目录项是分开的。文件的内容只有在所有打开该文件的进程关闭文件描述符后才会被真正删除。</p>\n<p>在大多数 UNIX 系统中，unlink 通常不会因为文件被其他进程打开而返回 <code>EBUSY</code> 错误。然而，有些系统和特定的文件系统可能会在这种情况下返回 <code>EBUSY</code>。<br>一些特殊的文件系统或文件类型（如设备文件）可能会因为被某些内核模块或系统服务使用而导致 <code>EBUSY</code> 错误。</p>\n<p>以下是一些可能导致 <code>unlink</code> 返回 <code>EBUSY</code> 错误的具体场景：</p>\n<ol>\n<li><p><strong>挂载点</strong>：</p>\n<ul>\n<li>如果你尝试删除一个目录或文件，但该目录或文件是一个挂载点（即文件系统被挂载到该目录上），则可能会遇到 <code>EBUSY</code> 错误。</li>\n<li>例如，尝试删除 <code>/mnt</code> 目录，而 <code>/mnt</code> 目录上挂载了一个文件系统。</li>\n</ul>\n</li>\n<li><p><strong>当前目录</strong>：</p>\n<ul>\n<li>如果当前工作目录是一个你试图删除的目录，<code>unlink</code> 将失败并返回 <code>EBUSY</code>。</li>\n<li>你不能删除当前工作目录。</li>\n</ul>\n</li>\n<li><p><strong>文件被其他进程打开</strong>：</p>\n<ul>\n<li>在大多数 UNIX 系统中，<code>unlink</code> 通常不会因为文件被其他进程打开而返回 <code>EBUSY</code> 错误。然而，有些系统和特定的文件系统可能会在这种情况下返回 <code>EBUSY</code>。</li>\n<li>一些特殊的文件系统或文件类型（如设备文件）可能会因为被某些内核模块或系统服务使用而导致 <code>EBUSY</code> 错误。</li>\n</ul>\n</li>\n<li><p><strong>挂载文件系统</strong>：</p>\n<ul>\n<li>如果你尝试删除挂载点，而该点下的文件系统正在被使用，<code>unlink</code> 将失败并返回 <code>EBUSY</code> 错误。</li>\n<li>例如，尝试删除 <code>/dev</code> 目录的文件，而该目录被用于设备文件挂载。</li>\n</ul>\n</li>\n</ol>\n\n</div>\n<p>这是一个使用link和unlink函数实现mv命令的例子：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdlib.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">move_file</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">src</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">dst</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 创建硬链接</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">link</span><span style=\"color: #D4D4D4\">(src, dst) != </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Error creating hard link\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// 删除原始文件</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">unlink</span><span style=\"color: #D4D4D4\">(src) != </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Error deleting original file\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 这里我们希望在失败时撤销之前的操作</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #6A9955\">// 如果 unlink 失败，删除刚才创建的硬链接</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">unlink</span><span style=\"color: #D4D4D4\">(dst) != </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Error deleting the newly created file\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">argc</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">argv</span><span style=\"color: #569CD6\">[]</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (argc != </span><span style=\"color: #B5CEA8\">3</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">fprintf</span><span style=\"color: #D4D4D4\">(stderr, </span><span style=\"color: #CE9178\">\"Usage: </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #CE9178\"> &lt;source&gt; &lt;destination&gt;</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">argv</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> EXIT_FAILURE;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">move_file</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">argv</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">], </span><span style=\"color: #9CDCFE\">argv</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> EXIT_SUCCESS;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h1 id=\"opendir函数\"><a href=\"#opendir函数\" class=\"headerlink\" title=\"opendir函数\"></a>opendir函数</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/types.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;dirent.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">DIR *</span><span style=\"color: #DCDCAA\">opendir</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">name</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">DIR *</span><span style=\"color: #DCDCAA\">fdopendir</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">fd</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>opendir()</code> 函数打开一个与目录名相对应的目录流，并返回指向该目录流的指针。该流定位在目录的第一个条目。</p>\n<p><code>fdopendir()</code> 函数类似于 <code>opendir()</code>，但它返回的是由已打开文件描述符 <code>fd</code> 所指向的目录的目录流。成功调用 <code>fdopendir()</code> 后，<code>fd</code> 将被内部使用，应用程序不应再使用该文件描述符。</p>\n<p><code>opendir()</code> 和 <code>fdopendir()</code> 函数返回指向目录流的指针。如果发生错误，则返回 <code>NULL</code> ，并设置相应的错误码 <code>errno</code>。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>成功调用 <code>fdopendir()</code> 后，传递给它的文件描述符 <code>fd</code> 将被内部使用，意味着该文件描述符会被 <code>DIR</code> 结构体内部使用，管理打开的目录流。应用程序不应再使用该文件描述符的原因有以下几个方面：</p>\n<ol>\n<li><p><strong>资源管理交由系统</strong>：<code>fdopendir()</code> 函数将文件描述符 <code>fd</code> 转换成一个 <code>DIR*</code> 类型的指针，该指针代表一个打开的目录流。这个目录流由系统管理，应用程序如果继续直接使用 <code>fd</code>，可能会破坏系统对目录流的管理。</p>\n</li>\n<li><p><strong>避免竞态条件</strong>：如果应用程序在 <code>fdopendir()</code> 后继续使用 <code>fd</code>，可能会引发竞态条件。例如，应用程序可能会在不适当的时机关闭或修改该文件描述符，从而影响到 <code>DIR*</code> 结构体的正常工作，导致未定义的行为。</p>\n</li>\n<li><p><strong>资源释放问题</strong>：<code>fdopendir()</code> 接管了 <code>fd</code> 的管理职责，这意味着当通过 <code>DIR*</code> 进行的目录操作完成后，应用程序应该使用 <code>closedir()</code> 来关闭目录流。直接使用 <code>fd</code> 进行关闭或其他操作可能会导致资源泄漏或双重释放问题。</p>\n</li>\n</ol>\n</p>\n</div>\n<h1 id=\"readdir函数\"><a href=\"#readdir函数\" class=\"headerlink\" title=\"readdir函数\"></a>readdir函数</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;dirent.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> dirent *</span><span style=\"color: #DCDCAA\">readdir</span><span style=\"color: #D4D4D4\">(DIR *</span><span style=\"color: #9CDCFE\">dirp</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> dirent {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">ino_t</span><span style=\"color: #D4D4D4\">          d_ino;</span><span style=\"color: #6A9955\">       /* inode 编号 */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">off_t</span><span style=\"color: #D4D4D4\">          d_off;</span><span style=\"color: #6A9955\">       /* 不是偏移量；见下文 */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">unsigned</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">short</span><span style=\"color: #D4D4D4\"> d_reclen;</span><span style=\"color: #6A9955\">    /* 此记录的长度 */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">unsigned</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\">  d_type;</span><span style=\"color: #6A9955\">      /* 文件类型；并非所有文件系统类型都支持 */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\">           </span><span style=\"color: #9CDCFE\">d_name</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">256</span><span style=\"color: #D4D4D4\">];</span><span style=\"color: #6A9955\"> /* 以空字符结尾的文件名 */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">};</span></span>\n<span class=\"line\"></span></code></pre></div><p><code>readdir()</code> 函数返回一个指向 <code>dirent</code> 结构体的指针，该结构体表示由 <code>dirp</code> 指向的目录流中的下一个目录项。当到达目录流的末尾或发生错误时，它返回 <code>NULL</code>。</p>\n<p>调用成功时，<code>readdir()</code> 函数返回一个指向 <code>dirent</code> 结构体的指针。（该结构体可能被静态分配；不要尝试使用 free(3) 释放它。）</p>\n<p>如果到达目录流的末尾，则返回 <code>NULL</code>，且 <code>errno</code> 不变。如果发生错误，则返回 <code>NULL</code>，并设置相应的 <code>errno</code>。为了区分到达目录流末尾和发生错误，需要在调用 <code>readdir()</code> 之前将 <code>errno</code> 设置为 0，然后在返回 <code>NULL</code> 时检查 <code>errno</code> 的值。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><code>readdir()</code> 返回的 <code>dirent</code> 结构体指针指向的内存区域通常是静态分配的。这意味着：</p>\n<p><strong>共享单一缓冲区</strong>：在许多实现中，<code>readdir()</code> 使用一个静态分配的缓冲区来存放 <code>dirent</code> 结构体的内容。每次调用 <code>readdir()</code>，都会复用同一个缓冲区来存储新的目录项信息。这是为了减少内存分配和释放的开销，提高性能。</p>\n<p><strong>不可释放</strong>：由于这个缓冲区是静态分配的，由系统的 C 库管理，而不是动态分配在堆上，因此不能使用 <code>free()</code> 来释放它。试图使用 <code>free()</code> 释放它将导致未定义的行为，可能会引发程序崩溃或者其他不可预见的问题。</p>\n\n</div>\n<h1 id=\"closedir函数\"><a href=\"#closedir函数\" class=\"headerlink\" title=\"closedir函数\"></a>closedir函数</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/types.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;dirent.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">closedir</span><span style=\"color: #D4D4D4\">(DIR *</span><span style=\"color: #9CDCFE\">dirp</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>closedir()</code> 函数关闭与 <code>dirp</code> 关联的目录流。成功调用 <code>closedir()</code> 也会关闭与 <code>dirp</code> 关联的底层文件描述符。在此调用之后，目录流描述符 <code>dirp</code> 将不再可用。</p>\n<p><code>closedir()</code> 函数成功时返回 0。如果发生错误，则返回 -1，并设置相应的错误码 <code>errno</code>。</p>\n<p>下面是使用 <code>opendir()</code>、<code>readdir()</code> 和 <code>closedir()</code> 函数列出目录中所有文件的示例：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdlib.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;dirent.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/stat.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;pwd.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;grp.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;time.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">print_file_info</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">path</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> dirent *</span><span style=\"color: #9CDCFE\">entry</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> stat file_stat;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">full_path</span><span style=\"color: #D4D4D4\">[PATH_MAX];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">snprintf</span><span style=\"color: #D4D4D4\">(full_path, PATH_MAX, </span><span style=\"color: #CE9178\">\"</span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #CE9178\">/</span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, path, </span><span style=\"color: #9CDCFE\">entry</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">d_name</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">stat</span><span style=\"color: #D4D4D4\">(full_path, &amp;file_stat) == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"stat\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">((</span><span style=\"color: #DCDCAA\">S_ISDIR</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">file_stat</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_mode</span><span style=\"color: #D4D4D4\">)) ? </span><span style=\"color: #CE9178\">\"d\"</span><span style=\"color: #D4D4D4\"> : </span><span style=\"color: #CE9178\">\"-\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">((</span><span style=\"color: #9CDCFE\">file_stat</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_mode</span><span style=\"color: #D4D4D4\"> &amp; S_IRUSR) ? </span><span style=\"color: #CE9178\">\"r\"</span><span style=\"color: #D4D4D4\"> : </span><span style=\"color: #CE9178\">\"-\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">((</span><span style=\"color: #9CDCFE\">file_stat</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_mode</span><span style=\"color: #D4D4D4\"> &amp; S_IWUSR) ? </span><span style=\"color: #CE9178\">\"w\"</span><span style=\"color: #D4D4D4\"> : </span><span style=\"color: #CE9178\">\"-\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">((</span><span style=\"color: #9CDCFE\">file_stat</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_mode</span><span style=\"color: #D4D4D4\"> &amp; S_IXUSR) ? </span><span style=\"color: #CE9178\">\"x\"</span><span style=\"color: #D4D4D4\"> : </span><span style=\"color: #CE9178\">\"-\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">((</span><span style=\"color: #9CDCFE\">file_stat</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_mode</span><span style=\"color: #D4D4D4\"> &amp; S_IRGRP) ? </span><span style=\"color: #CE9178\">\"r\"</span><span style=\"color: #D4D4D4\"> : </span><span style=\"color: #CE9178\">\"-\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">((</span><span style=\"color: #9CDCFE\">file_stat</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_mode</span><span style=\"color: #D4D4D4\"> &amp; S_IWGRP) ? </span><span style=\"color: #CE9178\">\"w\"</span><span style=\"color: #D4D4D4\"> : </span><span style=\"color: #CE9178\">\"-\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">((</span><span style=\"color: #9CDCFE\">file_stat</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_mode</span><span style=\"color: #D4D4D4\"> &amp; S_IXGRP) ? </span><span style=\"color: #CE9178\">\"x\"</span><span style=\"color: #D4D4D4\"> : </span><span style=\"color: #CE9178\">\"-\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">((</span><span style=\"color: #9CDCFE\">file_stat</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_mode</span><span style=\"color: #D4D4D4\"> &amp; S_IROTH) ? </span><span style=\"color: #CE9178\">\"r\"</span><span style=\"color: #D4D4D4\"> : </span><span style=\"color: #CE9178\">\"-\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">((</span><span style=\"color: #9CDCFE\">file_stat</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_mode</span><span style=\"color: #D4D4D4\"> &amp; S_IWOTH) ? </span><span style=\"color: #CE9178\">\"w\"</span><span style=\"color: #D4D4D4\"> : </span><span style=\"color: #CE9178\">\"-\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">((</span><span style=\"color: #9CDCFE\">file_stat</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_mode</span><span style=\"color: #D4D4D4\"> &amp; S_IXOTH) ? </span><span style=\"color: #CE9178\">\"x\"</span><span style=\"color: #D4D4D4\"> : </span><span style=\"color: #CE9178\">\"-\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\" </span><span style=\"color: #9CDCFE\">%lu</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">file_stat</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_nlink</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> passwd *pw = </span><span style=\"color: #DCDCAA\">getpwuid</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">file_stat</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_uid</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> group *gr = </span><span style=\"color: #DCDCAA\">getgrgid</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">file_stat</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_gid</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\" </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #CE9178\"> </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">pw</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">pw_name</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">gr</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">gr_name</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\" </span><span style=\"color: #9CDCFE\">%5ld</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">file_stat</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_size</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">time_str</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">20</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">strftime</span><span style=\"color: #D4D4D4\">(time_str, </span><span style=\"color: #569CD6\">sizeof</span><span style=\"color: #D4D4D4\">(time_str), </span><span style=\"color: #CE9178\">\"</span><span style=\"color: #F44747\">%</span><span style=\"color: #CE9178\">b </span><span style=\"color: #9CDCFE\">%d</span><span style=\"color: #CE9178\"> </span><span style=\"color: #F44747\">%</span><span style=\"color: #CE9178\">H:</span><span style=\"color: #F44747\">%</span><span style=\"color: #CE9178\">M\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #DCDCAA\">localtime</span><span style=\"color: #D4D4D4\">(&amp;</span><span style=\"color: #9CDCFE\">file_stat</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_mtime</span><span style=\"color: #D4D4D4\">));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\" </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, time_str);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\" </span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">entry</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">d_name</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">list_long</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">path</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    DIR *dir = </span><span style=\"color: #DCDCAA\">opendir</span><span style=\"color: #D4D4D4\">(path);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (dir == </span><span style=\"color: #569CD6\">NULL</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"opendir\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> dirent *entry;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> ((entry = </span><span style=\"color: #DCDCAA\">readdir</span><span style=\"color: #D4D4D4\">(dir)) != </span><span style=\"color: #569CD6\">NULL</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">print_file_info</span><span style=\"color: #D4D4D4\">(path, entry);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">closedir</span><span style=\"color: #D4D4D4\">(dir) == -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"closedir\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(EXIT_FAILURE);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">argc</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">argv</span><span style=\"color: #569CD6\">[]</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *path = argc &gt; </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> ? </span><span style=\"color: #9CDCFE\">argv</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] : </span><span style=\"color: #CE9178\">\".\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">list_long</span><span style=\"color: #D4D4D4\">(path);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><p>下面是一个递归遍历目录的c程序示例：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;dirent.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;grp.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;pwd.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdio.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;stdlib.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;string.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;sys/stat.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;time.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">list</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">path</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">list</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">path</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> stat sb;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> s = </span><span style=\"color: #DCDCAA\">stat</span><span style=\"color: #D4D4D4\">(path, &amp;sb);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (s != </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"list read stat:\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(-</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">printf</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, path);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">S_ISDIR</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">sb</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">st_mode</span><span style=\"color: #D4D4D4\">)) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    DIR *dirp = </span><span style=\"color: #DCDCAA\">opendir</span><span style=\"color: #D4D4D4\">(path);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (dirp == </span><span style=\"color: #569CD6\">NULL</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">perror</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"list opendir\"</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(-</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    dirent *dir_element;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> ((dir_element = </span><span style=\"color: #DCDCAA\">readdir</span><span style=\"color: #D4D4D4\">(dirp))) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">strcmp</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">dir_element</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">d_name</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">\".\"</span><span style=\"color: #D4D4D4\">) &amp;&amp;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">          </span><span style=\"color: #DCDCAA\">strcmp</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">dir_element</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">d_name</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #CE9178\">\"..\"</span><span style=\"color: #D4D4D4\">)) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">name</span><span style=\"color: #D4D4D4\">[PATH_MAX];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">snprintf</span><span style=\"color: #D4D4D4\">(name, PATH_MAX, </span><span style=\"color: #CE9178\">\"</span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #CE9178\">/</span><span style=\"color: #9CDCFE\">%s</span><span style=\"color: #CE9178\">\"</span><span style=\"color: #D4D4D4\">, path, </span><span style=\"color: #9CDCFE\">dir_element</span><span style=\"color: #D4D4D4\">-&gt;</span><span style=\"color: #9CDCFE\">d_name</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">list</span><span style=\"color: #D4D4D4\">(name);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">closedir</span><span style=\"color: #D4D4D4\">(dirp);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">argc</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *</span><span style=\"color: #9CDCFE\">argv</span><span style=\"color: #569CD6\">[]</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> *path = argc &gt; </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> ? </span><span style=\"color: #9CDCFE\">argv</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] : </span><span style=\"color: #CE9178\">\".\"</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #DCDCAA\">list</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">argv</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div><h1 id=\"dup函数\"><a href=\"#dup函数\" class=\"headerlink\" title=\"dup函数\"></a>dup函数</h1><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dark-plus\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;unistd.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">dup</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">oldfd</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">dup2</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">oldfd</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">newfd</span><span style=\"color: #D4D4D4\">);</span></span></code></pre></div><p><code>dup()</code> 系统调用使用未使用的最小文件描述符编号为新描述符创建一个 <code>oldfd</code> 文件描述符的副本。</p>\n<p>成功返回后，新旧文件描述符可以互换使用。它们指向同一个已打开的文件描述（参见 open(2)），因此<strong>共享文件偏移量和文件状态标志</strong>；例如，如果使用 lseek(2) 修改其中一个文件描述符的文件偏移量，则另一个文件描述符的偏移量也会更改。</p>\n<p>这两个文件描述符不共享文件描述符标志（“执行时关闭”标志）。复制描述符的“执行时关闭”标志（FD_CLOEXEC；参见 fcntl(2)）处于关闭状态。</p>\n<p><code>dup2()</code> 系统调用执行与 <code>dup()</code> 相同的任务，但它不会使用未使用的最小文件描述符编号，而是使用 <code>newfd</code> 中指定的文件描述符编号。如果文件描述符 <code>newfd</code> 之前已打开，则会在重用之前将其静默关闭。</p>\n<p>关闭和重用文件描述符 <code>newfd</code> 的步骤是原子执行的。这一点很重要，因为尝试使用 close(2) 和 <code>dup()</code> 实现相同的功能可能会导致竞争条件，即 <code>newfd</code> 可能会在这两个步骤之间被重用。这种重用可能发生的原因是主程序被分配文件描述符的信号处理程序中断，或者并行线程分配了文件描述符。</p>\n<p>当调用成功时，这些系统调用返回新的文件描述符。如果发生错误，则返回 -1，并设置相应的错误码 <code>errno</code>。</p>\n","feature":true,"text":"getopt函数c#include &lt;unistd.h&gt; int getopt(int argc, char * const argv[], con...","permalink":"/post/Linux系统编程（文件操作）","photos":[],"count_time":{"symbolsCount":"22k","symbolsTime":"20 mins."},"categories":[{"name":"Linux","slug":"Linux","count":3,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":3,"path":"api/tags/Linux.json"},{"name":"C++","slug":"C","count":7,"path":"api/tags/C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#getopt%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">getopt函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#open%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">open函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#close%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">close函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#strerror%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">strerror函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#perror%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">perror函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#read%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">read函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#write%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">write函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6\"><span class=\"toc-text\">文件描述符</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#fcntl%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">fcntl函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%98%BB%E5%A1%9E%E5%92%8C%E9%9D%9E%E9%98%BB%E5%A1%9E\"><span class=\"toc-text\">阻塞和非阻塞</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#lseek%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">lseek函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#truncate%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">truncate函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#stat%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">stat函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#link%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">link函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#unlink%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">unlink函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#opendir%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">opendir函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#readdir%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">readdir函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#closedir%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">closedir函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#dup%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">dup函数</span></a></li></ol>","author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Linux系统编程（进程）","uid":"68c10486ec2cc89517f4c1626fec120f","slug":"Linux系统编程（进程）","date":"2024-07-04T01:36:23.000Z","updated":"2024-07-05T05:19:31.200Z","comments":true,"path":"api/articles/Linux系统编程（进程）.json","keywords":"C++,Pyhton,Java,算法","cover":"img/linux.jpeg","text":"PCB进程控制块cstruct task_struct { unsigned int __state; /* 进程状态：运行、等待、停止等 */ pid_t p...","permalink":"/post/Linux系统编程（进程）","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"17 mins."},"categories":[{"name":"Linux","slug":"Linux","count":3,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":3,"path":"api/tags/Linux.json"},{"name":"C++","slug":"C","count":7,"path":"api/tags/C.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true},"next_post":{"title":"《Effective C++》笔记","uid":"45eea3793f995e9782f39b2b3ca183ab","slug":"《Effective-C-》读后总结","date":"2024-02-03T08:12:24.000Z","updated":"2024-02-15T16:39:23.632Z","comments":true,"path":"api/articles/《Effective-C-》读后总结.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/effectiveC++.jpeg","text":"读完《Effective C++》后，确实感到收益匪浅。但因为目前是学生，平时实践并不多，恐怕很多知识点会忘记。所以，我打算写一篇读后总结，以便日后复习，用电子...","permalink":"/post/《Effective-C-》读后总结","photos":[],"count_time":{"symbolsCount":"38k","symbolsTime":"35 mins."},"categories":[{"name":"C++","slug":"C","count":4,"path":"api/categories/C.json"}],"tags":[{"name":"C++进阶","slug":"C-进阶","count":4,"path":"api/tags/C-进阶.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true}}