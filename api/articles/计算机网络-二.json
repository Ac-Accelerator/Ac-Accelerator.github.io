{"title":"计算机网络(二)","uid":"1400880ea83318bcbc365c9ffe072342","slug":"计算机网络-二","date":"2022-05-08T03:29:00.000Z","updated":"2023-11-08T12:58:00.186Z","comments":true,"path":"api/articles/计算机网络-二.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/network2.jpeg","content":"<h2 id=\"数据链路层\"><a href=\"#数据链路层\" class=\"headerlink\" title=\"数据链路层\"></a>数据链路层</h2><p>数据链路层负责通过一条链路从一个结点向另一个物理链路直接相连的相邻结点传送数据报。  </p>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p><strong>结点</strong>:主机、路由器<br><strong>链路</strong>:网络中两个结点之间的物理通道，链路的传输介质主要有双绞线、光纤和微波。分为有线链路、无线链路。<br><strong>数据链路</strong>:网络中两个结点之间的逻辑通道，把实现控制数据传输协议的硬件和软件加到链路上就构成数据链路<br><strong>帧</strong>︰链路层的协议数据单元，封装网络层数据报。</p>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><p>数据链路层在物理层提供服务的基础上<em>向网络层提供服务</em>，其最基本的服务是将源自网络层来的数据<em>可靠</em>地传输到相邻节点的目标机网络层。其主要作用是<em>加强物理层传输原始比特流的功能</em>，将物理层提供的可能出错的物理连接改造成为<em>逻辑上无差错</em>的数据链路，使之对网络层表现为一条无差错的链路。  </p>\n<h4 id=\"封装成帧\"><a href=\"#封装成帧\" class=\"headerlink\" title=\"封装成帧\"></a>封装成帧</h4><p>封装成帧就是在一段数据的前后部分添加首部和尾部，这样就构成了一个帧。接收端在收到物理层上交的比特流后，就能根据首部和尾部的标记，从收到的比特流中识别帧的开始和结束。<br>首部和尾部包含许多的控制信息，他们的一个重要作用:<strong>帧定界（确定帧的界限）</strong>。</p>\n<p><strong>帧同步</strong>:接收方应当能从接收到的二进制比特流中区分出帧的起始和终止。</p>\n<p><strong>组帧的四种方法:（如何实现透明传输）</strong>  </p>\n<ol>\n<li><strong>字符计数法</strong>:帧首部使用一个计数字段(第一个字节，八位)来标明帧内字符数。（若第一个字节出错，将导致灾难性的后果）    </li>\n<li><strong>字符填充法</strong>:使用两个控制字符：SOH和EOT来标识帧的开始和结束。虽然在纯ASCII码传输中，这两个控制字符不会从键盘中被输入，不会引发帧定界错误，但是在非ASCII码传输中，可能出现帧中的数据部分的某个<em>字节</em>可能与帧的控制信息相同。这时候就要在该字节前添加转义字符ESC实现透明传输。（PPP协议异步传输）  </li>\n<li><strong>零比特填充法</strong>:帧首部和尾部都是01111110。（PPP协议同步传输）<br><em>在发送端</em>，扫描整个信息字段，只要连续5个1，就立即填入1个0。<br><em>在接收端</em>收到一个帧时，先找到标志字段确定边界，再用硬件对比特流进行扫描。发现连续5个1时，就把后面的0删除。   </li>\n<li><strong>违规编码法</strong>体现在物理层中。例如在曼彻斯特编码中，连续的高电平或连续第低电平是违规的。把这两种违规编码作为帧的起始和终止（MAC帧）。</li>\n</ol>\n<h4 id=\"差错控制\"><a href=\"#差错控制\" class=\"headerlink\" title=\"差错控制\"></a>差错控制</h4><p>传输中的<strong>差错</strong>都是由于噪声引起的。<br><strong>位错</strong>：0→1或1→0  </p>\n<p><strong>检错编码</strong>：  </p>\n<ul>\n<li><em>奇偶校验法</em>（帧中的1的个数是奇数还是偶数）  </li>\n<li><em>CRC循环冗余码</em>：  <ul>\n<li>对发送端：  <ul>\n<li>要传的数据%生成多项式=FCS帧检验序列(冗余码)<br>最终发送的数据=要传的数据+FCS帧检验序列(冗余码)</li>\n</ul>\n</li>\n<li>对接收端：  <ul>\n<li>如果接受到的数据能被生成多项式整除，则有无限接近于1的概率判定传输无错。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>在数据链路层使用CRC检验，能够实现无比特差错的传输，但这不是可靠传输。可靠传输还要处理帧丢失、帧重复、帧失序等问题。过去OSI打算在数据链路层实现可靠传输，除了CRC检验外，还有帧编号、确认和重传机制。而现在由于性能问题，做了区别对待：对于有线传输，可靠传输的实现被放到了传输层；而对于无线传输，可靠传输的实现放到了数据链路层。</p>\n\n</div>\n<p><strong>纠错编码</strong>：<br><a href=\"https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E7%A0%81/3226749?fromtitle=%E6%B5%B7%E6%98%8E%E7%A0%81&fromid=1453231&fr=aladdin\">海明码</a></p>\n<h4 id=\"流量控制\"><a href=\"#流量控制\" class=\"headerlink\" title=\"流量控制\"></a>流量控制</h4><p>较高的发送速度和较低的接收能力的不匹配，会造成传输出错，因此流量控制也是数据链路层的一项重要工作。<br><strong>数据链路层流量控制手段</strong>:接收方收不下就不回复确认。</p>\n<p><strong>流量控制方法：</strong><br><strong>停止-等待协议</strong>： </p>\n<ul>\n<li>条件：每个帧及其对应的ASK都需要进行编号  </li>\n<li><em>发送方</em>：  <ul>\n<li>每发送完一个帧就停止发送，并启动一个超时计时器，并且等待对方的确认。若在规定时间内收到确认则发送下一个帧。  </li>\n<li>若超出规定时间，则重新发送，若收到不属于当前传输的帧的确认，则直接忽略该确认。</li>\n</ul>\n</li>\n<li><em>接受方</em>：  <ul>\n<li>每接受到一个帧就返回一个确认。</li>\n<li>若收到一个和之前收到过的某个帧相同的帧，则丢弃该帧，并重新发送之前那个帧的确认。</li>\n</ul>\n</li>\n</ul>\n<p>以下两个协议的帧的编号是可以重复利用的。<br><strong>后退N帧协议（GBN）</strong>：</p>\n<ul>\n<li><em>发送窗口(多个)</em>:发送方维持一组连续的允许发送的帧的序号。发送窗口的长度应该大于等于1且小于等于帧的最大编号(从0开始编号)   </li>\n<li><em>接收窗口（单个）</em>:接收方维持的一个允许接收帧的序号。  </li>\n<li><em>发送方</em>：  <ul>\n<li><em>上层的调用</em>：<br>上层要发送数据时，发送方先检查发送窗口是否已满，如果未满，则产生一个帧并将其发送;如果窗口已满,发送方只需将数据返回给上层，暗示上层窗口已满。上层等一会再发送。(实际实现中，发送方可以缓存这些数据，窗口不满时再发送帧）。  </li>\n<li><em>收到了一个ACK</em>：<br>GBN协议中，对n号帧的确认采用累积确认的方式，标明接收方已经收到n号帧和它之前的全部帧。  </li>\n<li><em>超时事件</em>：<br>协议的名字为后退N帧/回退N帧，来源于出现丢失和时延过长帧时发送方的行为。就像在停等协议中一样，定时器将再次用于恢复数据帧或确认帧的丢失。如果出现超时，发送方重传所有已发送但未被确认的帧。</li>\n</ul>\n</li>\n<li><em>接收方</em>：  <ul>\n<li>如果正确收到n号帧，并且按序，那么接收方为n帧发送一个ACK，并将该帧中的数据部分交付给上层。  </li>\n<li>其余情况都丢弃帧，并为最近按序接收的帧重新发送ACK。接收方无需缓存任何失序帧，只需要维护一个信息:expectedseqnum(下一个按序接收的帧序号)。</li>\n</ul>\n</li>\n</ul>\n<p><strong>选择重传协议（SR）</strong>：<br>GBN协议中，如果某个帧出错可能会导致批量重传。<br>而在SR协议中，只重传出错的帧。  </p>\n<ul>\n<li>发送窗口长度等于接收窗口长度等于(帧的最大编号(从0开始)+1)/2。  </li>\n<li><em>发送方</em>： <ul>\n<li><em>上层的调用</em>（同GBN）  </li>\n<li><em>收到了一个ACK</em>：如果收到ACK，如果该帧序号在窗口内，则将那个被确认的帧标记为已接收。如果该帧序号是窗口的下界（还留在窗口中的且是最早进入窗口的序号），则窗口下界移动到下一个未确认帧处。如果窗口移动了并且有序号在窗口内的未发送帧，则发送这些帧。  </li>\n<li><em>超时事件</em>：每个帧都有自己的定时器，一个超时事件发生后只重传一个帧。</li>\n</ul>\n</li>\n<li><em>接受方</em><ul>\n<li>返回每一个收到的帧的ASK。失序的帧将被缓存，并返回给发送方一个该帧的ASK，直到窗口下界的帧收到为止，这时才可以将一批帧按序交付给上层，然后移动滑动窗口。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"信道划分、介质访问控制（使用广播信道的数据链路层）\"><a href=\"#信道划分、介质访问控制（使用广播信道的数据链路层）\" class=\"headerlink\" title=\"信道划分、介质访问控制（使用广播信道的数据链路层）\"></a>信道划分、介质访问控制（使用广播信道的数据链路层）</h3><p>这些技术使用在局域网的数据链路层中。</p>\n<p>信道划分介质访问控制:将使用介质的每个设备与来自同一信道上的其他设备的通信<em>隔离</em>开，把<em>时域和频域资源</em>合理地分配给网络上的设备。</p>\n<p><strong>多路复用技术</strong>：<br>把多个信号组合在一条物理信道上进行传输，使得多个计算机或终端设备共享信道资源,提高信道利用率。即把一条广播信道，逻辑上分成几条用于两个节点之间通信的互不干扰的子信道，实际就是把广播信道转变为点对点信道。  </p>\n<p><em>频分多路复用（FDM）</em>：<br>用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。频分复用的所有用户在同样的时间占用不同的带宽(颜率带宽)资源。  </p>\n<p><em>时分多路复用（TDM）</em>：<br>将时间划分为一段段等长的时分复用帧（TDM帧）。每一个时分复用的用户在每一个TDM帧中占用固定序号的时隙,所有用户轮流占用信道。  </p>\n<p><em>统计时分复用（STDM）</em>：<br>各用户有了数据就随时发往集中器的输入缓存，然后集中器按顺序依次扫描输入缓存，把缓存中的输入数据放入STDM帧中，一个STDM帧满了就发出。STDM帧不是固定分配时隙,而是按动态分配时隙。  </p>\n<p><em>波分多路复用（WDM）</em>：<br>波分多路复用就是光的频分多路复用，在一根光纤中传输的多种不同波长（频率）的光信号互不干扰，最后再用波长分解复用器将各路波长分解出来。  </p>\n<p><em>码分多路复用</em>：<br>码分多址（CDMA）是码分复用的一种方式。<br>1个比特分为多个码片/芯片(chip)，每一个站点被指定一个唯一的m位的芯片序列。<br>发送1时站点发送芯片序列，发送0时发送芯片序列反码。<br>要求： </p>\n<ul>\n<li>发送:多个站点同时发送数据的时候，要求各个站点芯片序列相互正交  </li>\n<li>合并:各路数据在信道中被线性相加  </li>\n<li>分离:合并的数据和源站规格化内积</li>\n</ul>\n<hr>\n<p><strong>轮询访问介质访问控制（环形网）：</strong><br>令牌传递协议、轮询协议</p>\n<hr>\n<h4 id=\"介质访问控制协议\"><a href=\"#介质访问控制协议\" class=\"headerlink\" title=\"介质访问控制协议\"></a>介质访问控制协议</h4><p><em>纯ALOHA协议</em>:<br>不监听信道，不按时间槽发送，随机重发。如果发生冲突，接收方在就会检测出差错，然后不予确认，发送方在一定时间内收不到就判断发生冲突。   </p>\n<p><em>时隙ALOHA协议</em>:<br>把时间分成若干个相同的时间片，所有用户在时间片开始时刻同步接入网络信道,若发生冲突，则必须等到下一个时间片开始时刻再发送。</p>\n<hr>\n<p><em>载波监听多路访问协议(CSMA)</em>:<br>每一个站在发送数据之前要检测一下总线上是否有其他计算机在发送数据。多点接入，表示许多计算机以多点接入的方式连接在一根总线上。<br>若信道空闲，则发送完整帧；如果信道忙，则推迟发送。这个协议需要一边发送一边监听信道，是个半双工协议，只能在半双工信道上使用。</p>\n<p><em>缺点</em>：发生冲突后还是要坚持把数据帧发送完，造成了浪费。？  </p>\n<p><em>1-坚持CSMA:</em></p>\n<ul>\n<li>如果一个主机要发送消息，那么它先监听信道。</li>\n<li>空闲则直接传输，不必等待。忙则一直监听，直到空闲马上传输。  </li>\n<li>如果有冲突（一段时间内未收到肯定回复），则等待一个随机长的时间（截断二进制指数退避）再监听，重复上述过程。 </li>\n<li><strong>优点</strong>:只要媒体空闲，站点就马上发送，避免了媒体利用率的损失。  </li>\n<li><strong>缺点</strong>:假如有两个或两个以上的站点有数据要发送，冲突就不可避免。</li>\n</ul>\n<p><em>非坚持CSMA:</em></p>\n<ul>\n<li>如果一个主机要发送消息，那么它先监听信道。</li>\n<li>空闲则直接传输，不必等待。忙则等待一个随机的时间（截断二进制指数退避）之后再进行监听。 </li>\n<li><strong>优点</strong>:采用随机的重发延迟时间可以减少冲突发生的可能性。  </li>\n<li><strong>缺点</strong>:可能存在大家都在延迟等待过程中，使得媒体仍可能处于空闲状态，媒体使用率降低。</li>\n</ul>\n<p><em>p-坚持CSMA:</em></p>\n<ul>\n<li>如果一个主机要发送消息，那么它先监听信道。</li>\n<li>空闲则以p概率直接传输，不必等待;概率1-p等待到下一个时间槽再传输。忙则等待一个随机的时间之后再进行监听。  </li>\n<li><strong>优点</strong>:既能像非坚持算法那样减少冲突，又能像1-坚持算法那样减少媒体空闲时间的这种方案。</li>\n</ul>\n<hr>\n<p><em>CSMA/CD协议</em>：(常用于总线以太网、树形网络)<br><a href=\"https://baike.baidu.com/item/CSMA/CD/986847\">CSMA/CD</a>  </p>\n<p><em>CSMA/CA协议</em>：(常用于无线局域网)<br><a href=\"https://baike.baidu.com/item/CSMA%2FCA/10898090?fr=aladdin\">CSMA/CA</a></p>\n<h3 id=\"以太网\"><a href=\"#以太网\" class=\"headerlink\" title=\"以太网\"></a>以太网</h3><p>以太网提供<em>无连接</em>、<em>不可靠</em>的服务<br><em>无连接</em>:发送方和接收方之间无“握手过程”。<br><em>不可靠</em>:不对发送方的数据帧编号，接收方不向发送方进行确认，差错帧直接丢弃，差错纠正由高层负责。  </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>以太网只实现无差错接收，不实现可靠传输。</p></blockquote>\n<p><strong>10BASE-T以太网</strong>:<br>10BASE-T是传送基带信号的双绞线以太网，T表示采用双绞线，现10BASE-T采用的是无屏蔽双绞线(UTP），传输速率是10Mb/s。  </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>物理上采用星型拓扑，逻辑上总线型，每段双绞线最长为100m。<br>采用曼彻斯特编码。<br>采用CSMA/CD介质访问控制。</p></blockquote>\n<p><strong>100BASE-T以太网</strong>:<br>在双绞线上传送100Mb/s基带信号的星型拓扑以太网，仍使用IEEE802.3的CSMA/CD协议。<br>支持全双工和半双工，可在全双工方式下工作而无冲突。  </p>\n<p><strong>吉比特以太网</strong>:<br>在光纤或双绞线上传送1Gb/s信号。<br>支持全双工和半双工，可在全双工方式下工作而无冲突。  </p>\n<p><strong>10吉比特</strong>:<br>10吉比特以太网在光纤上传送10Gb/s信号。<br>只支持全双工，无争用问题。</p>\n<h3 id=\"链路层设备\"><a href=\"#链路层设备\" class=\"headerlink\" title=\"链路层设备\"></a>链路层设备</h3><p><strong>网段（冲突域）</strong>:一般指一个计算机网络中使用同一物理层设备(传输介质，中继器，集线器等)能够直接通讯的那一部分。</p>\n<p><strong>网桥</strong>：网桥根据MAC帧的目的地址对帧进行转发和过滤。当网桥收到一个帧时，并不向所有接口转发此帧，而是先检查此帧的目的MAC地址，然后再确定将该帧转发到哪一个接口，或者是把它丢弃（即过滤）。<br><em>优点:</em>  </p>\n<ol>\n<li>过滤通信量，增大吞吐量。  </li>\n<li>扩大了物理范围。  </li>\n<li>提高了可靠性。  </li>\n<li>可互连不同物理层、不同MAC子层和不同速率的以太网。</li>\n</ol>\n<p><strong>网桥分类</strong>  </p>\n<ul>\n<li><em>透明网桥</em>:以太网上的站点并不知道所发送的帧将经过哪几个网桥，是一种即插即用设备  </li>\n<li><em>源路由网桥</em>:在发送帧时，把详细的最佳路由信息（路由最少/时间最短）放在帧的首部中。</li>\n</ul>\n<p><strong>多接口网桥――以太网交换机</strong><br><em>直通式交换机</em>：  </p>\n<ul>\n<li>查完目的地址（6B）就立刻转发。  </li>\n<li>延迟小，可靠性低，无法支持具有不同速率的端口的交换。</li>\n</ul>\n<p><em>存储转发式交换机</em>:  </p>\n<ul>\n<li>将帧放入高速缓存，并检查否正确，正确则转发，错误则丢弃。  </li>\n<li>延迟大，可靠性高，可以支持具有不同速率的端口的交换。</li>\n</ul>\n","feature":true,"text":"数据链路层数据链路层负责通过一条链路从一个结点向另一个物理链路直接相连的相邻结点传送数据报。 基本概念结点:主机、路由器链路:网络中两个结点之间的物理通道，链路...","permalink":"/post/计算机网络-二","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"网络","slug":"网络","count":4,"path":"api/categories/网络.json"}],"tags":[{"name":"网络","slug":"网络","count":4,"path":"api/tags/网络.json"},{"name":"数据链路层","slug":"数据链路层","count":1,"path":"api/tags/数据链路层.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82\"><span class=\"toc-text\">数据链路层</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">基本概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B0%81%E8%A3%85%E6%88%90%E5%B8%A7\"><span class=\"toc-text\">封装成帧</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B7%AE%E9%94%99%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">差错控制</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">流量控制</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BF%A1%E9%81%93%E5%88%92%E5%88%86%E3%80%81%E4%BB%8B%E8%B4%A8%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%EF%BC%88%E4%BD%BF%E7%94%A8%E5%B9%BF%E6%92%AD%E4%BF%A1%E9%81%93%E7%9A%84%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%EF%BC%89\"><span class=\"toc-text\">信道划分、介质访问控制（使用广播信道的数据链路层）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E8%B4%A8%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">介质访问控制协议</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A5%E5%A4%AA%E7%BD%91\"><span class=\"toc-text\">以太网</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%B7%AF%E5%B1%82%E8%AE%BE%E5%A4%87\"><span class=\"toc-text\">链路层设备</span></a></li></ol></li></ol>","author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Java学习笔记(一)","uid":"4fcfa8e6703310350c6e3442c24e0c97","slug":"Java学习笔记-一","date":"2022-05-09T08:43:00.000Z","updated":"2023-07-13T18:25:05.830Z","comments":true,"path":"api/articles/Java学习笔记-一.json","keywords":"C++,Pyhton,Java,算法","cover":"/img/java1.jpeg","text":"前言本篇不具体介绍Java的具体细节和语法，只记录在笔者眼中的Java和C++ 的相同和不同之处，因此需要有C++ 基础。 类的结构和主函数 main函数的写法...","permalink":"/post/Java学习笔记-一","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"Java","slug":"Java","count":6,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":6,"path":"api/tags/Java.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true},"next_post":{"title":"计算机网络(一)","uid":"f667b4d44d41991982b8841954899495","slug":"计算机网络(一)","date":"2022-05-05T02:13:00.000Z","updated":"2023-11-08T11:26:37.453Z","comments":true,"path":"api/articles/计算机网络(一).json","keywords":"C++,Pyhton,Java,算法","cover":"/img/network1.jpeg","text":"计算机网络初步概念计算机网络是一个将分散的、具有独立功能的计算机系统，通过通信设备与线路连接起来，由功能完善的软件实现资源共享和信息传递的系统。 计算机网络是互...","permalink":"/post/计算机网络(一)","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"网络","slug":"网络","count":4,"path":"api/categories/网络.json"}],"tags":[{"name":"网络","slug":"网络","count":4,"path":"api/tags/网络.json"},{"name":"网络体系结构","slug":"网络体系结构","count":1,"path":"api/tags/网络体系结构.json"},{"name":"物理层","slug":"物理层","count":1,"path":"api/tags/物理层.json"}],"author":{"name":"Ac-Accelerator","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一位计算机技术爱好者，大学在读，目前正在学习C++、Python、Java和计算机系统以及计算机视觉深度学习等相关知识，欢迎交流","socials":{"github":"https://github.com/Ac-Accelerator","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31702515?spm=1000.2115.3001.5343","juejin":"","customs":{"qq":{"icon":"/svg/QQ.svg","link":"http://tool.gljlw.com/qq/?qq=2583832841"}}}},"feature":true}}